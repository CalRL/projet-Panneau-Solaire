CCS PCM C Compiler, Version 3.212, 26421               31-août-05 13:37

               Filename: C:\Dossier MAT Electronique\Programmes PIC applications MAT\Panneau solaire\source modules pic (version 2)\carte analyseur\MAIN.LST

               ROM used: 2835 words (35%)
                         Largest free fragment is 2048
               RAM used: 91 (25%) at main() level
                         199 (55%) worst case
               Stack:    6 worst case (3 in main + 3 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   712
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   038
001F:  MOVLW  8C
0020:  MOVWF  04
0021:  BTFSS  00.1
0022:  GOTO   025
0023:  BTFSC  0C.1
0024:  GOTO   03B
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   27,W
0030:  MOVWF  7B
0031:  MOVF   20,W
0032:  MOVWF  0A
0033:  SWAPF  21,W
0034:  MOVWF  03
0035:  SWAPF  7F,F
0036:  SWAPF  7F,W
0037:  RETFIE
0038:  BCF    0A.3
0039:  BCF    0A.4
003A:  GOTO   1EC
003B:  BCF    0A.3
003C:  BCF    0A.4
003D:  GOTO   04F
....................  // version 2.0 du 31/07/2005 //  
.................... // maj : aucune //  
....................   
.................... #include <16F876a.h> //mettre #include <16F876.h> si PIC16F876-04 // 
....................  //////// Standard Header file for the PIC16F876A device ////////////////  
.................... #device PIC16F876A  
.................... #list  
....................  
.................... #device ICD=TRUE  
.................... #device *=16  
.................... #use delay(clock=2500000)  
*
0474:  MOVLW  D3
0475:  MOVWF  04
0476:  BCF    03.7
0477:  MOVF   00,W
0478:  BTFSC  03.2
0479:  GOTO   480
047A:  MOVLW  CF
047B:  MOVWF  77
047C:  DECFSZ 77,F
047D:  GOTO   47C
047E:  DECFSZ 00,F
047F:  GOTO   47A
0480:  BCF    0A.3
0481:  BCF    0A.4
0482:  GOTO   502 (RETURN)
.................... #fuses XT, NOPROTECT, BROWNOUT, NOWDT  
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7,bits=8)  
....................   
.................... #include "can.c" 
....................  /////////////////////////////////////////////////////////////////////////  
.................... ////                        can-mcp2510.c                            ////  
.................... //// CAN Library routines for Microchip's MCP2510 (and compatable)   ////  
.................... //// CAN IO expanders.                                               ////  
.................... ////                                                                 ////  
.................... //// This library provides the following functions:                  ////  
.................... ////  (for more information on these functions see the comment       ////  
.................... ////   header above each function)                                   ////  
.................... ////                                                                 ////  
.................... ////    can_init - Configures the MCP2510 CAN peripheral             ////  
.................... ////                                                                 ////  
.................... ////    can_set_baud - Sets the baud rate control registers          ////  
.................... ////                                                                 ////  
.................... ////    can_set_mode - Sets the CAN module into a specific mode      ////  
.................... ////                                                                 ////  
.................... ////    can_set_id - Sets the standard and extended ID               ////  
.................... ////                                                                 ////  
.................... ////    can_get_id - Gets the standard and extended ID               ////  
.................... ////                                                                 ////  
.................... ////    can_putd - Sends a message/request with specified ID         ////  
.................... ////                                                                 ////  
.................... ////    can_getd - Returns specifid message/request and ID           ////  
.................... ////                                                                 ////  
.................... ////    can_kbhit - Returns true if there is data in one of the      ////  
.................... ////                receive buffers                                  ////  
.................... ////                                                                 ////  
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    ////  
.................... ////              send more data                                     ////  
.................... ////                                                                 ////  
.................... ////    can_abort - Aborts all pending transmissions                 ////  
.................... ////                                                                 ////  
.................... //// You will need a CAN transeiver to connect CANRX and CANTX       ////  
.................... //// pins to CANH and CANL bus lines.                                ////  
.................... ////                                                                 ////  
.................... //// CCS provides an example, ex_can_ccs_b.c, which shows how to use ////  
.................... //// this library with CCS's CAN Prototype board.                    ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////                                                                 ////  
.................... //// Version History                                                 ////  
.................... ////                                                                 ////  
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     ////  
.................... ////              setting all RX filters to extended.                ////  
.................... ////                                                                 ////  
.................... ////  Apr 20 04 - Fixed a compling problem.                          ////  
.................... ////                                                                 ////  
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
.................... #include <can.h> 
....................  /////////////////////////////////////////////////////////////////////////  
.................... ////                        can-mcp2510.h                            ////  
.................... ////                                                                 ////  
.................... //// Prototypes, definitions, defines and macros used for and with   ////  
.................... //// the CCS CAN library for the MCP2510 (and compatable) CAN IO     ////  
.................... //// expanders.                                                      ////  
.................... ////                                                                 ////  
.................... //// (see can-mcp2510.c)                                             ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... #ifndef CAN_DO_DEBUG  
....................  #define CAN_DO_DEBUG FALSE  
.................... #endif  
....................   
.................... #IFNDEF CAN_USE_EXTENDED_ID  
....................   #define CAN_USE_EXTENDED_ID         TRUE  
.................... #ENDIF  
....................   
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH  
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq)  
.................... #ENDIF  
....................   
.................... #IFNDEF CAN_BRG_PRESCALAR  
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc )  
.................... #ENDIF  
....................   
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS  
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_SAM  
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1  
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PROPAGATION_TIME  
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_WAKE_FILTER  
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2  
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER  
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data  
.................... #endif  
....................   
.................... #ifndef CAN_ENABLE_DRIVE_HIGH  
....................  #define CAN_ENABLE_DRIVE_HIGH 0  
.................... #endif  
....................   
.................... #ifndef CAN_ENABLE_CAN_CAPTURE  
....................  #define CAN_ENABLE_CAN_CAPTURE 0  
.................... #endif  
....................   
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_SLEEP=1, CAN_OP_NORMAL=0};  
....................   
.................... //can control  
.................... struct struct_CANCTRL {  
....................    int  clkpre:2; //0:1 //clkout pin prescalar  
....................    int1 clken; //2   //clkout pin enable  
....................    int1 void3; //3  
....................    int1 abat;  //4   //abort all pending transmissions  
....................    CAN_OP_MODE reqop:3; //5:7 //request operation mode  
.................... };  
.................... #define CANCTRL   0x0F  //or 1f, or 2f, or 3f ... or 7f  
....................   
.................... enum CAN_INT_CODE {CAN_INT_RX1=7, CAN_INT_RX0=6, CAN_INT_TX2=5, CAN_INT_TX1=4, CAN_INT_TX0=3, CAN_INT_WAKEUP=2, CAN_INT_ERROR=1, CAN_INT_NO=0};  
....................   
.................... //can status register READ-ONLY  
.................... struct struct_CANSTAT {  
.................... 	int1 void0;	//0  
.................... 	CAN_INT_CODE icode:3;	//1:3	//interrupt code  
.................... 	int1 void4;	//4  
.................... 	CAN_OP_MODE opmode:3;	//5:7	//operation mode status  
.................... };  
.................... #define CANSTAT 0x0E //or 1e, or 2e ... or 7e  
....................   
.................... //error flag register  
.................... struct struct_EFLG {  
.................... 	int1 ewarn;		//0 //error warning  
.................... 	int1 rxwar;		//1 //receiver warning  
.................... 	int1 txwar;		//2 //transmitter warning  
.................... 	int1 rxep;	//3 //receive error passive flag  
.................... 	int1 txep;	//4 //transmit error passive flag  
.................... 	int1 txbo;	//5	//bus off error flag  
.................... 	int1 rx0ovr;	//6	//receive buffer 0 overflow  
.................... 	int1 rx1ovr;	//7	//receive buffer 1 overflow  
.................... };  
.................... #define EFLG   0x2D  
....................   
.................... //interupt enable register  
.................... struct struct_CANINTE {  
....................    int1 rx0ie; //0   //receive buffer 0 full interrupt enable  
....................    int1 rx1ie; //1   //receive buffer 1 full interrupt enable  
....................    int1 tx0ie; //2   //transmit buffer 0 embty interrupt enable  
....................    int1 tx1ie; //3   //transmit buffer 1 embty interrupt enable  
....................    int1 tx2ie; //4   //transmit buffer 2 embty interrupt enable  
....................    int1 errie; //5   //error interrupt enable  
....................    int1 wakie; //6   //wakeup interrupt  enable  
....................    int1 merre; //7   //message error interrupt enable  
.................... };  
.................... #define CANINTE   0x2B  
....................   
.................... //interupt enable register  
.................... struct struct_CANINTF {  
....................    int1 rx0if; //0   //receive buffer 0 full interrupt flag  
....................    int1 rx1if; //1   //receive buffer 1 full interrupt flag  
....................    int1 tx0if; //2   //transmit buffer 0 embty interrupt flag  
....................    int1 tx1if; //3   //transmit buffer 1 embty interrupt flag  
....................    int1 tx2if; //4   //transmit buffer 2 embty interrupt flag  
....................    int1 errif; //5   //error interrupt flag  
....................    int1 wakif; //6   //wakeup interrupt flag  
....................    int1 merrf; //7   //message error interrupt flag  
.................... };  
.................... #define CANINTF   0x2C  
....................   
....................   
.................... //error counters  
.................... #define TEC    0x1C  
.................... #define REC    0x1D  
....................   
.................... //baud rate control register 1  
.................... struct struct_CNF1 {  
.................... 	int brp:6;	//0:5	//baud rate prescalar  
.................... 	int sjw:2;	//6:7	//synchronized jump width  
.................... };  
.................... #define CNF1   0x2A  
....................   
.................... //baud rate control register 2  
.................... struct struct_CNF2 {  
.................... 	int prseg:3; //0:2 //propagation time select  
.................... 	int phseg1:3; //3:5 //phase segment 1  
.................... 	int1 sam; //6 //sample of the can bus line  
.................... 	int1 btlmode; //7 //phase segment 2 bit time length  
.................... };  
.................... #define CNF2   0x29  
....................   
.................... //baud rate control register 3  
.................... struct struct_CNF3 {  
.................... 	int phseg2:3;	//0:2	//phase segment 2 time select  
.................... 	int void543:3;	//3:5  
.................... 	int1 wakfil;	//6 //selects can bus line filter for wake-up  
.................... 	int1 void7;	//7  
.................... };  
.................... #define CNF3   0x28  
.................... //can i/o control register  
....................   
.................... //transmit buffer n control register  
.................... struct txbNctrl_struct {  
.................... 	int  txpri:2;	//0:1	//transmit priority bits  
.................... 	int1 void2; //2  
.................... 	int1 txreq;	//3	//transmit request status (clear to request message abort)  
.................... 	int1 txerr;	//4	//transmission error detected  
.................... 	int1 mloa;	//5	//message lost arbitration  
.................... 	int1 abtf;	//6	//message was aborted / or transmitted succesfully  
.................... 	int1 void7;  
.................... };  
.................... #define TXB0CTRL  0x30  
.................... #define TXB1CTRL  0x40  
.................... #define TXB2CTRL  0x50  
....................   
.................... //TXnRTS pin control and status register  
.................... struct struct_TXRTSCTRL {  
....................    int1 b0rtsm; //0  //1=request message trans, 0=digital  
....................    int1 b1rtsm; //1  //1=request message trans, 0=digital  
....................    int1 b2rtsm; //2  //1=request message trans, 0=digital  
....................    int1 b0rts; //3   //reads as tx2rts when in digital, 0 when in rts  
....................    int1 b1rts; //4   //reads as tx2rts when in digital, 0 when in rts mode  
....................    int1 b2rts; //5  //reads as tx2rts when in digital, 0 when in rts mode  
....................    int  void67:2; //6:7  
.................... };  
.................... #define TXRTSCTRL 0x0D  
....................   
.................... //transmit buffer n standard identifier  
.................... #define TXB0SIDH 0x31  
.................... #define TXB0SIDL 0x32  
.................... #define TXB1SIDH 0x41  
.................... #define TXB1SIDL 0x42  
.................... #define TXB2SIDH 0x51  
.................... #define TXB2SIDL 0x52  
....................   
.................... //transmit buffer n extended identifier  
.................... #define TXB0EIDH 0x33  
.................... #define TXB0EIDL 0x34  
.................... #define TXB1EIDH 0x43  
.................... #define TXB1EIDL 0x44  
.................... #define TXB2EIDH 0x53  
.................... #define TXB2EIDL 0x54  
....................   
.................... //transmit buffer n data byte m  
.................... #define TXB0D0 0x36  
.................... #define TXB0D7 0x3D  
....................   
.................... #define TXB1D0 0x46  
.................... #define TXB1D7 0x4D  
....................   
.................... #define TXB2D0 0x56  
.................... #define TXB2D7 0x5D  
....................   
.................... //transmit buffer n data length  
.................... struct txbNdlc_struct {  
.................... 	int dlc:4;	//0:3  
.................... 	int void54:2; //4:5  
.................... 	int1 rtr; //6 //transmission frame remote tranmission  
.................... 	int1 void7; //7  
.................... };  
.................... #define TXB0DLC 0x35  
.................... #define TXB1DLC 0x45  
.................... #define TXB2DLC 0x55  
....................   
.................... //#byte TXBaDLC=0xF65  //txbXdlc when in the access bank  
....................   
....................   
.................... //transmit error count register  
.................... #byte TXERRCNT=0xF76  
....................   
....................   
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0};  
....................   
.................... //receive buffer 0 control register  
.................... struct struct_RXB0CTRL {  
.................... 	int1 filhit0;	//0 //filter hit  
.................... 	int1 bukt1;	//1 //read only copy of bukt bit (used internally by mcp2510)  
.................... 	int1 bukt;	//2 //rollover enable  
.................... 	int1 rxrtr;	//3 //receive remote transfer request  
.................... 	int1 void4;	//4  
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receiver buffer mode  
.................... 	int1 void7;	//7 //receive full status  
.................... };  
.................... #define RXB0CTRL  0x60  
....................   
.................... //receive buffer 1 control register  
.................... struct struct_RXB1CTRL {  
.................... 	int filhit0:3;	//0:2  
.................... 	int1 rxrtr;	//3 //receive remote transfer request  
.................... 	int1 void4;	//4  
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receive buffer mode  
.................... 	int1 void7;	//7  
.................... };  
.................... #define RXB1CTRL 0x70  
....................   
.................... //RXnBF pint control and status register  
.................... struct struct_BFPCTRL {  
....................    int1  b0bfm; //0   //1=pin is interrupt when message loaded into rxb0, 0=digital  
....................    int1  b1bfm; //1   //1=pin is interrupt when message loaded into rxb1, 0=digital  
....................    int1  b0bfe; //2   //rx0bf pin function enable  
....................    int1  b1bfe; //3   //rx1bf pin function enable  
....................    int1  b0bfs; //4   //rx0bf pin state  
....................    int1  b1bfs; //5   //rx1bf pin state  
.................... };  
....................   
.................... //receive buffer n standard identifier  
.................... #define	RXB0SIDH  0x61  
.................... #define	RXB0SIDL  0x62  
....................   
.................... #define	RXB1SIDH  0x71  
.................... #define	RXB1SIDL  0x72  
....................   
.................... //receive buffer n extended identifier  
.................... #define	RXB0EID8  0x63  
.................... #define	RXB0EID0  0x64  
....................   
.................... #define	RXB1EID8  0x73  
.................... #define	RXB1EID0  0x74  
....................   
.................... struct struct_TXRXBaSIDL {  
....................    int void012:3; //0:2  
....................    int1 ext;      //3 //extendid id  
....................    int1 srr;      //4 //substitute remove request bit  
....................    int void567:3; //5:7  
.................... };  
....................   
.................... //receive buffer n data length code register  
.................... struct rxbNdlc_struct {  
.................... 	int dlc:4;	//0:3 //data length code  
.................... 	int1 rb0;   //4   //reserved  
.................... 	int1 rb1;	//5   //reserved  
.................... 	int1 rtr;	//6   //receiver remote transmission request bit  
.................... 	int1 void7;	//7  
.................... };  
.................... #define	RXB0DLC   0x65  
.................... #define	RXB1DLC   0x75  
....................   
.................... //receive buffer n data field byte m register  
.................... #define RXB0D0    0x66  
.................... #define RXB0D7    0x6D  
....................   
.................... #define RXB1D0    0x76  
.................... #define RXB1D7    0x7D  
....................   
....................   
.................... //receive acceptance filter n standard indifier  
.................... #define RXF0SIDH  0x00  
.................... #define RXF0SIDL  0x01  
.................... #define RXF1SIDH  0x04  
.................... #define RXF1SIDL  0x05  
.................... #define RXF2SIDH  0x08  
.................... #define RXF2SIDL  0x09  
.................... #define RXF3SIDH  0x10  
.................... #define RXF3SIDL  0x11  
.................... #define RXF4SIDH  0x14  
.................... #define RXF4SIDL  0x15  
.................... #define RXF5SIDH  0x18  
.................... #define RXF5SIDL  0x19  
....................   
.................... //receive acceptance filter n extended indifier  
.................... #define RXF0EIDH  0x02  
.................... #define RXF0EIDL  0x03  
.................... #define RXF1EIDH  0x06  
.................... #define RXF1EIDL  0x07  
.................... #define RXF2EIDH  0x0a  
.................... #define RXF2EIDL  0x0b  
.................... #define RXF3EIDH  0x12  
.................... #define RXF3EIDL  0x13  
.................... #define RXF4EIDH  0x16  
.................... #define RXF4EIDL  0x17  
.................... #define RXF5EIDH  0x1a  
.................... #define RXF5EIDL  0x1b  
....................   
.................... //receive acceptance mask n standard identifer mask  
.................... #define RXM0SIDH  0x20  
.................... #define RXM0SIDL  0x21  
.................... #define RXM1SIDH  0x24  
.................... #define RXM1SIDL  0x25  
....................   
.................... //receive acceptance mask n extended identifer mask  
.................... #define RXM0EIDH  0x22  
.................... #define RXM0EIDL  0x23  
.................... #define RXM1EIDH  0x26  
.................... #define RXM1EIDL  0x27  
....................   
.................... #define RX0MASK       RXM0EIDL   //rxm0eidl  
.................... #define RX1MASK       RXM1EIDL   //rxm1eidl  
.................... #define RX0FILTER0    RXF0EIDL   //rxf0eidl  
.................... #define RX0FILTER1    RXF1EIDL   //rxf1eidl  
.................... #define RX1FILTER2    RXF2EIDL   //rxf2eidl  
.................... #define RX1FILTER3    RXF3EIDL   //rxf3eidl  
.................... #define RX1FILTER4    RXF4EIDL   //rxf4eidl  
.................... #define RX1FILTER5    RXF5EIDL   //rxf5eidl  
.................... #define RXB0ID        RXB0EIDL   //rxb0eidl  
.................... #define RXB1ID        RXB1EIDL   //rxb1eidl  
.................... #define TXB0ID        TXB0EIDL   //txb0eidl  
.................... #define TXB1ID        TXB1EIDL   //txb1eidl  
.................... #define TXB2ID        TXB2EIDL   //tsb2eidl  
....................   
.................... //value to put in mask field to accept all incoming id's  
.................... #define CAN_MASK_ACCEPT_ALL   0  
....................   
....................   
.................... //PROTOTYPES and MACROS  
....................   
.................... struct rx_stat {  
....................    int1 err_ovfl;  
....................    int filthit:3;  
....................    int1 buffer;  
....................    int1 rtr;  
....................    int1 ext;  
....................    int1 inv;  
.................... };  
....................   
.................... /* variables bus can */  
.................... int32 crx_id;  
.................... int crxbuf[8];  
.................... int ctxbuf[8];  
.................... int ic,crx_len;  
.................... struct rx_stat rxstat;  
....................   
....................   
.................... void  can_init(void);  
.................... void  can_set_baud(void);  
.................... void  can_set_mode(CAN_OP_MODE mode);  
.................... void can_set_id(int addr, int32 id, int1 ext);  
.................... int32 can_get_id(int addr, int1 ext);  
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr);  
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat);  
....................   
.................... void mcp2510_init();  
.................... void mcp2510_command(int command);  
.................... void mcp2510_write(int address, int data);  
.................... int mcp2510_status(void);  
.................... int mcp2510_read(int address);  
....................   
....................   
....................  
....................   
.................... //IO pins connected to MCP2510  
.................... #ifndef EXT_CAN_CS  
....................    #define EXT_CAN_CS   PIN_B3  
....................    #define EXT_CAN_SI   PIN_C5  
....................    #define EXT_CAN_SO   PIN_C4  
....................    #define EXT_CAN_SCK  PIN_C3  
.................... //   #define EXT_CAN_RESET   PIN_B5 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX0RTS  PIN_C4 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX1RTS  PIN_B4 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX2RTS  PIN_C2 //CCS library does not use this pin by default  
.................... #endif  
....................   
.................... #if CAN_DO_DEBUG  
....................  #define can_debug printf  
.................... #else  
....................  #define can_debug  
.................... #endif  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_init()  
.................... //  
.................... // Initializes MCP2510 CAN peripheral.  Sets the RX filter and masks so the  
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers  
.................... // to only accept valid valid messages (as opposed to all messages, or all  
.................... // extended message, or all standard messages).  
.................... //  
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH,  
.................... // CAN_ENABLE_CAN_CAPTURE, etc) are given a default define in the can-mcp2510.h file.  
.................... // These default values can be overwritten in the main code, but most  
.................... // applications will be fine with these defaults.  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... void can_init(void) {  
....................    struct struct_RXB0CTRL b_rxb0ctrl;  
....................   
....................    mcp2510_init();  
....................   
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set  
*
0503:  MOVLW  04
0504:  BSF    03.5
0505:  MOVWF  53
0506:  BCF    03.5
0507:  CALL   483
....................    can_set_baud();  
....................   
....................    b_rxb0ctrl=0;  
*
0554:  BSF    03.5
0555:  CLRF   52
....................    b_rxb0ctrl.rxm=CAN_RX_VALID;  
0556:  MOVLW  9F
0557:  ANDWF  52,W
0558:  MOVWF  52
....................    b_rxb0ctrl.bukt=CAN_USE_RX_DOUBLE_BUFFER;  
0559:  BSF    52.2
055A:  BCF    03.5
055B:  CLRF   28
055C:  BTFSC  0B.7
055D:  BSF    28.7
055E:  BCF    0B.7
....................    mcp2510_write(RXB0CTRL, (int)b_rxb0ctrl);  
055F:  MOVLW  60
0560:  BSF    03.6
0561:  MOVWF  58
0562:  BSF    03.5
0563:  BCF    03.6
0564:  MOVF   52,W
0565:  BCF    03.5
0566:  BSF    03.6
0567:  MOVWF  59
0568:  BCF    03.6
0569:  CALL   0DD
056A:  BTFSC  28.7
056B:  BSF    0B.7
056C:  CLRF   28
056D:  BTFSC  0B.7
056E:  BSF    28.7
056F:  BCF    0B.7
....................    mcp2510_write(RXB1CTRL, (int)b_rxb0ctrl);  
0570:  MOVLW  70
0571:  BSF    03.6
0572:  MOVWF  58
0573:  BSF    03.5
0574:  BCF    03.6
0575:  MOVF   52,W
0576:  BCF    03.5
0577:  BSF    03.6
0578:  MOVWF  59
0579:  BCF    03.6
057A:  CALL   0DD
057B:  BTFSC  28.7
057C:  BSF    0B.7
057D:  CLRF   28
057E:  BTFSC  0B.7
057F:  BSF    28.7
0580:  BCF    0B.7
....................   
....................    //if you want to configure the TXnRTS pins, do it here.  default is off  
....................   
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 (RX BUFFER 0)  
0581:  MOVLW  23
0582:  BSF    03.6
0583:  MOVWF  4B
0584:  CLRF   4F
0585:  CLRF   4E
0586:  CLRF   4D
0587:  CLRF   4C
0588:  MOVLW  01
0589:  MOVWF  50
058A:  BCF    03.6
058B:  CALL   115
058C:  BTFSC  28.7
058D:  BSF    0B.7
058E:  CLRF   28
058F:  BTFSC  0B.7
0590:  BSF    28.7
0591:  BCF    0B.7
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 (RX BUFFER 0)  
0592:  MOVLW  03
0593:  BSF    03.6
0594:  MOVWF  4B
0595:  CLRF   4F
0596:  CLRF   4E
0597:  CLRF   4D
0598:  CLRF   4C
0599:  MOVLW  01
059A:  MOVWF  50
059B:  BCF    03.6
059C:  CALL   115
059D:  BTFSC  28.7
059E:  BSF    0B.7
059F:  CLRF   28
05A0:  BTFSC  0B.7
05A1:  BSF    28.7
05A2:  BCF    0B.7
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 (RX BUFFER 0)  
05A3:  MOVLW  07
05A4:  BSF    03.6
05A5:  MOVWF  4B
05A6:  CLRF   4F
05A7:  CLRF   4E
05A8:  CLRF   4D
05A9:  CLRF   4C
05AA:  MOVLW  01
05AB:  MOVWF  50
05AC:  BCF    03.6
05AD:  CALL   115
05AE:  BTFSC  28.7
05AF:  BSF    0B.7
05B0:  CLRF   28
05B1:  BTFSC  0B.7
05B2:  BSF    28.7
05B3:  BCF    0B.7
....................   
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 (RX BUFFER 1)  
05B4:  MOVLW  27
05B5:  BSF    03.6
05B6:  MOVWF  4B
05B7:  CLRF   4F
05B8:  CLRF   4E
05B9:  CLRF   4D
05BA:  CLRF   4C
05BB:  MOVLW  01
05BC:  MOVWF  50
05BD:  BCF    03.6
05BE:  CALL   115
05BF:  BTFSC  28.7
05C0:  BSF    0B.7
05C1:  CLRF   28
05C2:  BTFSC  0B.7
05C3:  BSF    28.7
05C4:  BCF    0B.7
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 (RX BUFFER 1)  
05C5:  MOVLW  0B
05C6:  BSF    03.6
05C7:  MOVWF  4B
05C8:  CLRF   4F
05C9:  CLRF   4E
05CA:  CLRF   4D
05CB:  CLRF   4C
05CC:  MOVLW  01
05CD:  MOVWF  50
05CE:  BCF    03.6
05CF:  CALL   115
05D0:  BTFSC  28.7
05D1:  BSF    0B.7
05D2:  CLRF   28
05D3:  BTFSC  0B.7
05D4:  BSF    28.7
05D5:  BCF    0B.7
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 (RX BUFFER 1)  
05D6:  MOVLW  13
05D7:  BSF    03.6
05D8:  MOVWF  4B
05D9:  CLRF   4F
05DA:  CLRF   4E
05DB:  CLRF   4D
05DC:  CLRF   4C
05DD:  MOVLW  01
05DE:  MOVWF  50
05DF:  BCF    03.6
05E0:  CALL   115
05E1:  BTFSC  28.7
05E2:  BSF    0B.7
05E3:  CLRF   28
05E4:  BTFSC  0B.7
05E5:  BSF    28.7
05E6:  BCF    0B.7
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 (RX BUFFER 1)  
05E7:  MOVLW  17
05E8:  BSF    03.6
05E9:  MOVWF  4B
05EA:  CLRF   4F
05EB:  CLRF   4E
05EC:  CLRF   4D
05ED:  CLRF   4C
05EE:  MOVLW  01
05EF:  MOVWF  50
05F0:  BCF    03.6
05F1:  CALL   115
05F2:  BTFSC  28.7
05F3:  BSF    0B.7
05F4:  CLRF   28
05F5:  BTFSC  0B.7
05F6:  BSF    28.7
05F7:  BCF    0B.7
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 (RX BUFFER 1)  
05F8:  MOVLW  1B
05F9:  BSF    03.6
05FA:  MOVWF  4B
05FB:  CLRF   4F
05FC:  CLRF   4E
05FD:  CLRF   4D
05FE:  CLRF   4C
05FF:  MOVLW  01
0600:  MOVWF  50
0601:  BCF    03.6
0602:  CALL   115
0603:  BTFSC  28.7
0604:  BSF    0B.7
....................   
....................    can_set_mode(CAN_OP_NORMAL);  
0605:  BSF    03.5
0606:  CLRF   53
0607:  BCF    03.5
0608:  CALL   483
0609:  NOP
060A:  CLRF   28
060B:  BTFSC  0B.7
060C:  BSF    28.7
060D:  BCF    0B.7
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_set_baud()  
.................... //  
.................... // Configures the baud rate control registers.  All the defines here  
.................... // are defaulted in the can-mcp2510.h file.  These defaults can, and  
.................... // probably should, be overwritten in the main code.  
.................... //  
.................... // Current defaults are set to work with CCS's CAN Prototype board and  
.................... // Microchip's MCP250xxx CAN Developers Kit if this PIC is running at 20Mhz.  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... void can_set_baud(void) {  
....................    struct struct_CNF1 new_CNF1;  
....................    struct struct_CNF2 new_CNF2;  
....................    struct struct_CNF3 new_CNF3;  
....................   
....................   
....................    new_CNF1.brp=CAN_BRG_PRESCALAR;  
*
0508:  MOVLW  C0
0509:  BSF    03.5
050A:  ANDWF  53,W
050B:  IORLW  04
050C:  MOVWF  53
....................    new_CNF1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH;  
050D:  MOVLW  3F
050E:  ANDWF  53,W
050F:  MOVWF  53
....................   
....................    new_CNF2.prseg=CAN_BRG_PROPAGATION_TIME;  
0510:  MOVLW  F8
0511:  ANDWF  54,W
0512:  IORLW  02
0513:  MOVWF  54
....................    new_CNF2.phseg1=CAN_BRG_PHASE_SEGMENT_1;  
0514:  MOVLW  C7
0515:  ANDWF  54,W
0516:  IORLW  28
0517:  MOVWF  54
....................    new_CNF2.sam=CAN_BRG_SAM;  
0518:  BCF    54.6
....................    new_CNF2.btlmode=CAN_BRG_SEG_2_PHASE_TS;  
0519:  BSF    54.7
....................   
....................    new_CNF3.phseg2=CAN_BRG_PHASE_SEGMENT_2;  
051A:  MOVLW  F8
051B:  ANDWF  55,W
051C:  IORLW  05
051D:  MOVWF  55
....................    new_CNF3.wakfil=CAN_BRG_WAKE_FILTER;  
051E:  BCF    55.6
051F:  BCF    03.5
0520:  CLRF   28
0521:  BTFSC  0B.7
0522:  BSF    28.7
0523:  BCF    0B.7
....................   
....................    mcp2510_write(CNF1, (int)new_CNF1);  
0524:  MOVLW  2A
0525:  BSF    03.6
0526:  MOVWF  58
0527:  BSF    03.5
0528:  BCF    03.6
0529:  MOVF   53,W
052A:  BCF    03.5
052B:  BSF    03.6
052C:  MOVWF  59
052D:  BCF    03.6
052E:  CALL   0DD
052F:  BTFSC  28.7
0530:  BSF    0B.7
0531:  CLRF   28
0532:  BTFSC  0B.7
0533:  BSF    28.7
0534:  BCF    0B.7
....................    mcp2510_write(CNF2, (int)new_CNF2);  
0535:  MOVLW  29
0536:  BSF    03.6
0537:  MOVWF  58
0538:  BSF    03.5
0539:  BCF    03.6
053A:  MOVF   54,W
053B:  BCF    03.5
053C:  BSF    03.6
053D:  MOVWF  59
053E:  BCF    03.6
053F:  CALL   0DD
0540:  BTFSC  28.7
0541:  BSF    0B.7
0542:  CLRF   28
0543:  BTFSC  0B.7
0544:  BSF    28.7
0545:  BCF    0B.7
....................    mcp2510_write(CNF3, (int)new_CNF3);  
0546:  MOVLW  28
0547:  BSF    03.6
0548:  MOVWF  58
0549:  BSF    03.5
054A:  BCF    03.6
054B:  MOVF   55,W
054C:  BCF    03.5
054D:  BSF    03.6
054E:  MOVWF  59
054F:  BCF    03.6
0550:  CALL   0DD
0551:  BTFSC  28.7
0552:  BSF    0B.7
0553:  NOP
.................... }  
....................   
.................... void can_set_mode(CAN_OP_MODE mode) {  
*
0483:  CLRF   28
0484:  BTFSC  0B.7
0485:  BSF    28.7
0486:  BCF    0B.7
....................    struct struct_CANCTRL old_CANCTRL;  
....................   
....................    old_CANCTRL=mcp2510_read(CANCTRL);  
0487:  MOVLW  0F
0488:  BSF    03.6
0489:  MOVWF  4B
048A:  BCF    03.6
048B:  CALL   082
048C:  BTFSC  28.7
048D:  BSF    0B.7
048E:  MOVF   78,W
048F:  BSF    03.5
0490:  MOVWF  54
....................   
....................    old_CANCTRL.reqop=mode;  
0491:  SWAPF  53,W
0492:  ANDLW  70
0493:  MOVWF  77
0494:  BCF    03.0
0495:  RLF    77,F
0496:  MOVLW  1F
0497:  ANDWF  54,W
0498:  IORWF  77,W
0499:  MOVWF  54
049A:  BCF    03.5
049B:  CLRF   28
049C:  BTFSC  0B.7
049D:  BSF    28.7
049E:  BCF    0B.7
....................   
....................    mcp2510_write(CANCTRL, (int)old_CANCTRL);  
049F:  MOVLW  0F
04A0:  BSF    03.6
04A1:  MOVWF  58
04A2:  BSF    03.5
04A3:  BCF    03.6
04A4:  MOVF   54,W
04A5:  BCF    03.5
04A6:  BSF    03.6
04A7:  MOVWF  59
04A8:  BCF    03.6
04A9:  CALL   0DD
04AA:  BTFSC  28.7
04AB:  BSF    0B.7
....................   
....................    do {  
....................       old_CANCTRL=mcp2510_read(CANCTRL);  
04AC:  CLRF   28
04AD:  BTFSC  0B.7
04AE:  BSF    28.7
04AF:  BCF    0B.7
04B0:  MOVLW  0F
04B1:  BSF    03.6
04B2:  MOVWF  4B
04B3:  BCF    03.6
04B4:  CALL   082
04B5:  BTFSC  28.7
04B6:  BSF    0B.7
04B7:  MOVF   78,W
04B8:  BSF    03.5
04B9:  MOVWF  54
....................    } while (old_CANCTRL.reqop != mode);  
04BA:  MOVF   54,W
04BB:  MOVWF  77
04BC:  SWAPF  77,F
04BD:  RRF    77,W
04BE:  ANDLW  07
04BF:  SUBWF  53,W
04C0:  BTFSC  03.2
04C1:  GOTO   4C4
04C2:  BCF    03.5
04C3:  GOTO   4AC
.................... }  
04C4:  BCF    03.5
04C5:  RETLW  00
....................   
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_set_id()  
.................... //  
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to  
.................... // configure the defined buffer to use the specified ID  
.................... //  
.................... //   Paramaters:  
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL.  
.................... //            For example, a pointer to RXM1EIDL  
.................... //     id - ID to set buffer to  
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... void can_set_id(int addr, int32 id, int1 ext) {  
....................    int converted_id[4];  
....................    int *ptr;  
....................   
....................    ptr=&converted_id[3];   //3=eidl, 2=eidh, 1=sidl, 0=sidh  
*
0115:  MOVLW  01
0116:  BSF    03.6
0117:  MOVWF  56
0118:  MOVLW  54
0119:  MOVWF  55
....................   
....................    if (ext) {  //extended  
011A:  MOVF   50,F
011B:  BTFSC  03.2
011C:  GOTO   176
....................       //eidl  
....................       *ptr=make8(id,0); //0:7  
011D:  MOVF   55,W
011E:  MOVWF  04
011F:  BCF    03.7
0120:  BTFSC  56.0
0121:  BSF    03.7
0122:  MOVF   4C,W
0123:  MOVWF  00
....................   
....................       //eidh  
....................       ptr--;  
0124:  MOVF   55,W
0125:  BTFSC  03.2
0126:  DECF   56,F
0127:  DECF   55,F
....................       *ptr=make8(id,1); //8:15  
0128:  MOVF   55,W
0129:  MOVWF  04
012A:  BCF    03.7
012B:  BTFSC  56.0
012C:  BSF    03.7
012D:  MOVF   4D,W
012E:  MOVWF  00
....................   
....................       //sidl  
....................       ptr--;  
012F:  MOVF   55,W
0130:  BTFSC  03.2
0131:  DECF   56,F
0132:  DECF   55,F
....................       *ptr=make8(id,2) & 0x03;   //16:17  
0133:  MOVF   55,W
0134:  MOVWF  04
0135:  BCF    03.7
0136:  BTFSC  56.0
0137:  BSF    03.7
0138:  MOVF   4E,W
0139:  ANDLW  03
013A:  MOVWF  00
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20  
013B:  MOVF   55,W
013C:  MOVWF  04
013D:  BCF    03.7
013E:  BTFSC  56.0
013F:  BSF    03.7
0140:  MOVF   4E,W
0141:  MOVWF  77
0142:  RLF    77,F
0143:  RLF    77,F
0144:  RLF    77,F
0145:  MOVLW  F8
0146:  ANDWF  77,F
0147:  MOVF   77,W
0148:  ANDLW  E0
0149:  IORWF  00,W
014A:  MOVWF  00
....................       *ptr|=0x08;  
014B:  MOVF   55,W
014C:  MOVWF  04
014D:  BCF    03.7
014E:  BTFSC  56.0
014F:  BSF    03.7
0150:  MOVF   00,W
0151:  IORLW  08
0152:  MOVWF  00
....................   
....................   
....................       //sidh  
....................       ptr--;  
0153:  MOVF   55,W
0154:  BTFSC  03.2
0155:  DECF   56,F
0156:  DECF   55,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23  
0157:  MOVF   55,W
0158:  MOVWF  04
0159:  BCF    03.7
015A:  BTFSC  56.0
015B:  BSF    03.7
015C:  MOVF   4E,W
015D:  MOVWF  77
015E:  SWAPF  77,F
015F:  RRF    77,F
0160:  MOVLW  07
0161:  ANDWF  77,F
0162:  MOVF   77,W
0163:  ANDLW  07
0164:  MOVWF  00
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28  
0165:  MOVF   55,W
0166:  MOVWF  04
0167:  BCF    03.7
0168:  BTFSC  56.0
0169:  BSF    03.7
016A:  MOVF   4F,W
016B:  MOVWF  77
016C:  RLF    77,F
016D:  RLF    77,F
016E:  RLF    77,F
016F:  MOVLW  F8
0170:  ANDWF  77,F
0171:  MOVF   77,W
0172:  ANDLW  F8
0173:  IORWF  00,W
0174:  MOVWF  00
....................    }  
....................    else {   //standard  
0175:  GOTO   1BA
....................       //eidl  
....................       *ptr=0;  
0176:  MOVF   55,W
0177:  MOVWF  04
0178:  BCF    03.7
0179:  BTFSC  56.0
017A:  BSF    03.7
017B:  CLRF   00
....................   
....................       //eidh  
....................       ptr--;  
017C:  MOVF   55,W
017D:  BTFSC  03.2
017E:  DECF   56,F
017F:  DECF   55,F
....................       *ptr=0;  
0180:  MOVF   55,W
0181:  MOVWF  04
0182:  BCF    03.7
0183:  BTFSC  56.0
0184:  BSF    03.7
0185:  CLRF   00
....................   
....................       //sidl  
....................       ptr--;  
0186:  MOVF   55,W
0187:  BTFSC  03.2
0188:  DECF   56,F
0189:  DECF   55,F
....................       *ptr=(make8(id,0) << 5) & 0xE0;  
018A:  MOVF   55,W
018B:  MOVWF  04
018C:  BCF    03.7
018D:  BTFSC  56.0
018E:  BSF    03.7
018F:  MOVF   4C,W
0190:  MOVWF  77
0191:  SWAPF  77,F
0192:  RLF    77,F
0193:  MOVLW  E0
0194:  ANDWF  77,F
0195:  MOVF   77,W
0196:  ANDLW  E0
0197:  MOVWF  00
....................   
....................       //sidh  
....................       ptr--;  
0198:  MOVF   55,W
0199:  BTFSC  03.2
019A:  DECF   56,F
019B:  DECF   55,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F;  
019C:  MOVF   55,W
019D:  MOVWF  04
019E:  BCF    03.7
019F:  BTFSC  56.0
01A0:  BSF    03.7
01A1:  MOVF   4C,W
01A2:  MOVWF  77
01A3:  RRF    77,F
01A4:  RRF    77,F
01A5:  RRF    77,F
01A6:  MOVLW  1F
01A7:  ANDWF  77,F
01A8:  MOVF   77,W
01A9:  ANDLW  1F
01AA:  MOVWF  00
....................       *ptr|=(make8(id,1) << 5) & 0xE0;  
01AB:  MOVF   55,W
01AC:  MOVWF  04
01AD:  BCF    03.7
01AE:  BTFSC  56.0
01AF:  BSF    03.7
01B0:  MOVF   4D,W
01B1:  MOVWF  77
01B2:  SWAPF  77,F
01B3:  RLF    77,F
01B4:  MOVLW  E0
01B5:  ANDWF  77,F
01B6:  MOVF   77,W
01B7:  ANDLW  E0
01B8:  IORWF  00,W
01B9:  MOVWF  00
....................    }  
....................   
....................    //0=eidl, 1=eidh, 2=sidl, 3=sidh  
....................    mcp2510_write(addr--, converted_id[3]);  
01BA:  MOVF   4B,W
01BB:  DECF   4B,F
01BC:  MOVWF  57
01BD:  MOVWF  58
01BE:  MOVF   54,W
01BF:  MOVWF  59
01C0:  BCF    03.6
01C1:  CALL   0DD
....................    mcp2510_write(addr--, converted_id[2]);  
01C2:  BSF    03.6
01C3:  MOVF   4B,W
01C4:  DECF   4B,F
01C5:  MOVWF  57
01C6:  MOVWF  58
01C7:  MOVF   53,W
01C8:  MOVWF  59
01C9:  BCF    03.6
01CA:  CALL   0DD
....................    mcp2510_write(addr--, converted_id[1]);  
01CB:  BSF    03.6
01CC:  MOVF   4B,W
01CD:  DECF   4B,F
01CE:  MOVWF  57
01CF:  MOVWF  58
01D0:  MOVF   52,W
01D1:  MOVWF  59
01D2:  BCF    03.6
01D3:  CALL   0DD
....................    mcp2510_write(addr, converted_id[0]);  
01D4:  BSF    03.6
01D5:  MOVF   4B,W
01D6:  MOVWF  58
01D7:  MOVF   51,W
01D8:  MOVWF  59
01D9:  BCF    03.6
01DA:  CALL   0DD
.................... }  
01DB:  RETLW  00
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_get_id()  
.................... //  
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id())  
.................... // This is used after receiving a message, to see which ID sent the message.  
.................... //  
.................... //   Paramaters:  
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL.  
.................... //            For example, a pointer to RXM1EIDL  
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not  
.................... //  
.................... //   Returns:  
.................... //     The ID of the buffer  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int32 can_get_id(int addr, int1 ext) {  
....................    int32 ret;  
....................    int * ptr;  
....................    int converted_id[4];  
....................   
....................    ptr=&converted_id[3];   //3=eidl, 2=eidh, 1=sidl, 0=sidh  
*
091B:  MOVLW  01
091C:  MOVWF  6D
091D:  MOVLW  13
091E:  MOVWF  6C
....................   
....................    converted_id[3]=mcp2510_read(addr--);  
091F:  MOVF   66,W
0920:  DECF   66,F
0921:  BCF    03.5
0922:  BSF    03.6
0923:  MOVWF  14
0924:  BCF    03.6
0925:  CLRF   28
0926:  BTFSC  0B.7
0927:  BSF    28.7
0928:  BCF    0B.7
0929:  BSF    03.6
092A:  MOVF   14,W
092B:  MOVWF  4B
092C:  BCF    0A.3
092D:  BCF    03.6
092E:  CALL   082
092F:  BSF    0A.3
0930:  BTFSC  28.7
0931:  BSF    0B.7
0932:  MOVF   78,W
0933:  BSF    03.6
0934:  MOVWF  13
....................    converted_id[2]=mcp2510_read(addr--);  
0935:  BSF    03.5
0936:  BCF    03.6
0937:  MOVF   66,W
0938:  DECF   66,F
0939:  BCF    03.5
093A:  BSF    03.6
093B:  MOVWF  14
093C:  BCF    03.6
093D:  CLRF   28
093E:  BTFSC  0B.7
093F:  BSF    28.7
0940:  BCF    0B.7
0941:  BSF    03.6
0942:  MOVF   14,W
0943:  MOVWF  4B
0944:  BCF    0A.3
0945:  BCF    03.6
0946:  CALL   082
0947:  BSF    0A.3
0948:  BTFSC  28.7
0949:  BSF    0B.7
094A:  MOVF   78,W
094B:  BSF    03.6
094C:  MOVWF  12
....................    converted_id[1]=mcp2510_read(addr--);  
094D:  BSF    03.5
094E:  BCF    03.6
094F:  MOVF   66,W
0950:  DECF   66,F
0951:  BCF    03.5
0952:  BSF    03.6
0953:  MOVWF  14
0954:  BCF    03.6
0955:  CLRF   28
0956:  BTFSC  0B.7
0957:  BSF    28.7
0958:  BCF    0B.7
0959:  BSF    03.6
095A:  MOVF   14,W
095B:  MOVWF  4B
095C:  BCF    0A.3
095D:  BCF    03.6
095E:  CALL   082
095F:  BSF    0A.3
0960:  BTFSC  28.7
0961:  BSF    0B.7
0962:  MOVF   78,W
0963:  BSF    03.6
0964:  MOVWF  11
0965:  BCF    03.6
0966:  CLRF   28
0967:  BTFSC  0B.7
0968:  BSF    28.7
0969:  BCF    0B.7
....................    converted_id[0]=mcp2510_read(addr);  
096A:  BSF    03.5
096B:  MOVF   66,W
096C:  BCF    03.5
096D:  BSF    03.6
096E:  MOVWF  4B
096F:  BCF    0A.3
0970:  BCF    03.6
0971:  CALL   082
0972:  BSF    0A.3
0973:  BTFSC  28.7
0974:  BSF    0B.7
0975:  MOVF   78,W
0976:  BSF    03.6
0977:  MOVWF  10
....................   
....................    ret=0;  
0978:  BSF    03.5
0979:  BCF    03.6
097A:  CLRF   6B
097B:  CLRF   6A
097C:  CLRF   69
097D:  CLRF   68
....................   
....................   
....................    if (ext) {  
097E:  MOVF   67,F
097F:  BTFSC  03.2
0980:  GOTO   242
....................       ret=*ptr;  //eidl  
0981:  MOVF   6D,W
0982:  MOVWF  7A
0983:  MOVF   6C,W
0984:  MOVWF  04
0985:  BCF    03.7
0986:  BTFSC  6D.0
0987:  BSF    03.7
0988:  MOVF   00,W
0989:  MOVWF  77
098A:  CLRF   78
098B:  CLRF   79
098C:  CLRF   7A
098D:  MOVF   7A,W
098E:  MOVWF  6B
098F:  MOVF   79,W
0990:  MOVWF  6A
0991:  MOVF   78,W
0992:  MOVWF  69
0993:  MOVF   77,W
0994:  MOVWF  68
....................   
....................       ptr--;     //eidh  
0995:  MOVF   6C,W
0996:  BTFSC  03.2
0997:  DECF   6D,F
0998:  DECF   6C,F
....................       ret|=((int32)*ptr << 8);  
0999:  MOVF   6C,W
099A:  MOVWF  04
099B:  BCF    03.7
099C:  BTFSC  6D.0
099D:  BSF    03.7
099E:  MOVF   00,W
099F:  BCF    03.5
09A0:  BSF    03.6
09A1:  CLRF   17
09A2:  CLRF   16
09A3:  CLRF   15
09A4:  MOVWF  14
09A5:  MOVF   16,W
09A6:  MOVWF  7A
09A7:  MOVF   15,W
09A8:  MOVWF  79
09A9:  MOVF   14,W
09AA:  MOVWF  78
09AB:  CLRF   77
09AC:  MOVF   77,W
09AD:  BSF    03.5
09AE:  BCF    03.6
09AF:  IORWF  68,F
09B0:  MOVF   78,W
09B1:  IORWF  69,F
09B2:  MOVF   79,W
09B3:  IORWF  6A,F
09B4:  MOVF   7A,W
09B5:  IORWF  6B,F
....................   
....................       ptr--;     //sidl  
09B6:  MOVF   6C,W
09B7:  BTFSC  03.2
09B8:  DECF   6D,F
09B9:  DECF   6C,F
....................       ret|=((int32)*ptr & 0x03) << 16;  
09BA:  MOVF   6C,W
09BB:  MOVWF  04
09BC:  BCF    03.7
09BD:  BTFSC  6D.0
09BE:  BSF    03.7
09BF:  MOVF   00,W
09C0:  BCF    03.5
09C1:  BSF    03.6
09C2:  CLRF   17
09C3:  CLRF   16
09C4:  CLRF   15
09C5:  MOVWF  14
09C6:  ANDLW  03
09C7:  MOVWF  18
09C8:  MOVF   15,W
09C9:  ANDLW  00
09CA:  MOVWF  19
09CB:  MOVF   16,W
09CC:  ANDLW  00
09CD:  MOVWF  1A
09CE:  MOVF   17,W
09CF:  ANDLW  00
09D0:  MOVWF  1B
09D1:  MOVF   19,W
09D2:  MOVWF  7A
09D3:  MOVF   18,W
09D4:  MOVWF  79
09D5:  CLRF   77
09D6:  CLRF   78
09D7:  MOVF   77,W
09D8:  BSF    03.5
09D9:  BCF    03.6
09DA:  IORWF  68,F
09DB:  MOVF   78,W
09DC:  IORWF  69,F
09DD:  MOVF   79,W
09DE:  IORWF  6A,F
09DF:  MOVF   7A,W
09E0:  IORWF  6B,F
....................       ret|=((int32)*ptr & 0xE0) << 13;  
09E1:  MOVF   6C,W
09E2:  MOVWF  04
09E3:  BCF    03.7
09E4:  BTFSC  6D.0
09E5:  BSF    03.7
09E6:  MOVF   00,W
09E7:  BCF    03.5
09E8:  BSF    03.6
09E9:  CLRF   17
09EA:  CLRF   16
09EB:  CLRF   15
09EC:  MOVWF  14
09ED:  ANDLW  E0
09EE:  MOVWF  18
09EF:  MOVF   15,W
09F0:  ANDLW  00
09F1:  MOVWF  19
09F2:  MOVF   16,W
09F3:  ANDLW  00
09F4:  MOVWF  1A
09F5:  MOVF   17,W
09F6:  ANDLW  00
09F7:  MOVWF  1B
09F8:  CLRF   77
09F9:  RLF    18,W
09FA:  MOVWF  78
09FB:  RLF    19,W
09FC:  MOVWF  79
09FD:  RLF    1A,W
09FE:  MOVWF  7A
09FF:  RLF    78,F
0A00:  RLF    79,F
0A01:  RLF    7A,F
0A02:  RLF    78,F
0A03:  RLF    79,F
0A04:  RLF    7A,F
0A05:  RLF    78,F
0A06:  RLF    79,F
0A07:  RLF    7A,F
0A08:  RLF    78,F
0A09:  RLF    79,F
0A0A:  RLF    7A,F
0A0B:  MOVLW  E0
0A0C:  ANDWF  78,F
0A0D:  MOVF   77,W
0A0E:  BSF    03.5
0A0F:  BCF    03.6
0A10:  IORWF  68,F
0A11:  MOVF   78,W
0A12:  IORWF  69,F
0A13:  MOVF   79,W
0A14:  IORWF  6A,F
0A15:  MOVF   7A,W
0A16:  IORWF  6B,F
....................   
....................       ptr--;     //sidh  
0A17:  MOVF   6C,W
0A18:  BTFSC  03.2
0A19:  DECF   6D,F
0A1A:  DECF   6C,F
....................       ret|=((int32)*ptr << 21);  
0A1B:  MOVF   6C,W
0A1C:  MOVWF  04
0A1D:  BCF    03.7
0A1E:  BTFSC  6D.0
0A1F:  BSF    03.7
0A20:  MOVF   00,W
0A21:  BCF    03.5
0A22:  BSF    03.6
0A23:  CLRF   17
0A24:  CLRF   16
0A25:  CLRF   15
0A26:  MOVWF  14
0A27:  CLRF   77
0A28:  CLRF   78
0A29:  RLF    14,W
0A2A:  MOVWF  79
0A2B:  RLF    15,W
0A2C:  MOVWF  7A
0A2D:  RLF    79,F
0A2E:  RLF    7A,F
0A2F:  RLF    79,F
0A30:  RLF    7A,F
0A31:  RLF    79,F
0A32:  RLF    7A,F
0A33:  RLF    79,F
0A34:  RLF    7A,F
0A35:  MOVLW  E0
0A36:  ANDWF  79,F
0A37:  MOVF   77,W
0A38:  BSF    03.5
0A39:  BCF    03.6
0A3A:  IORWF  68,F
0A3B:  MOVF   78,W
0A3C:  IORWF  69,F
0A3D:  MOVF   79,W
0A3E:  IORWF  6A,F
0A3F:  MOVF   7A,W
0A40:  IORWF  6B,F
....................    }  
....................    else {  
0A41:  GOTO   2B3
....................       ptr-=2;    //sidl  
0A42:  MOVLW  02
0A43:  SUBWF  6C,F
0A44:  MOVLW  00
0A45:  BTFSS  03.0
0A46:  MOVLW  01
0A47:  SUBWF  6D,F
....................       ret=((int32)*ptr & 0xE0) >> 5;  
0A48:  MOVF   6C,W
0A49:  MOVWF  04
0A4A:  BCF    03.7
0A4B:  BTFSC  6D.0
0A4C:  BSF    03.7
0A4D:  MOVF   00,W
0A4E:  BCF    03.5
0A4F:  BSF    03.6
0A50:  CLRF   17
0A51:  CLRF   16
0A52:  CLRF   15
0A53:  MOVWF  14
0A54:  ANDLW  E0
0A55:  MOVWF  18
0A56:  MOVF   15,W
0A57:  ANDLW  00
0A58:  MOVWF  19
0A59:  MOVF   16,W
0A5A:  ANDLW  00
0A5B:  MOVWF  1A
0A5C:  MOVF   17,W
0A5D:  ANDLW  00
0A5E:  MOVWF  1B
0A5F:  RRF    1B,W
0A60:  BSF    03.5
0A61:  BCF    03.6
0A62:  MOVWF  6B
0A63:  BCF    03.5
0A64:  BSF    03.6
0A65:  RRF    1A,W
0A66:  BSF    03.5
0A67:  BCF    03.6
0A68:  MOVWF  6A
0A69:  BCF    03.5
0A6A:  BSF    03.6
0A6B:  RRF    19,W
0A6C:  BSF    03.5
0A6D:  BCF    03.6
0A6E:  MOVWF  69
0A6F:  BCF    03.5
0A70:  BSF    03.6
0A71:  RRF    18,W
0A72:  BSF    03.5
0A73:  BCF    03.6
0A74:  MOVWF  68
0A75:  RRF    6B,F
0A76:  RRF    6A,F
0A77:  RRF    69,F
0A78:  RRF    68,F
0A79:  RRF    6B,F
0A7A:  RRF    6A,F
0A7B:  RRF    69,F
0A7C:  RRF    68,F
0A7D:  RRF    6B,F
0A7E:  RRF    6A,F
0A7F:  RRF    69,F
0A80:  RRF    68,F
0A81:  RRF    6B,F
0A82:  RRF    6A,F
0A83:  RRF    69,F
0A84:  RRF    68,F
0A85:  MOVLW  07
0A86:  ANDWF  6B,F
....................   
....................       ptr--;     //sidh  
0A87:  MOVF   6C,W
0A88:  BTFSC  03.2
0A89:  DECF   6D,F
0A8A:  DECF   6C,F
....................       ret|=((int32)*ptr << 3);  
0A8B:  MOVF   6C,W
0A8C:  MOVWF  04
0A8D:  BCF    03.7
0A8E:  BTFSC  6D.0
0A8F:  BSF    03.7
0A90:  MOVF   00,W
0A91:  BCF    03.5
0A92:  BSF    03.6
0A93:  CLRF   17
0A94:  CLRF   16
0A95:  CLRF   15
0A96:  MOVWF  14
0A97:  RLF    14,W
0A98:  MOVWF  77
0A99:  RLF    15,W
0A9A:  MOVWF  78
0A9B:  RLF    16,W
0A9C:  MOVWF  79
0A9D:  RLF    17,W
0A9E:  MOVWF  7A
0A9F:  RLF    77,F
0AA0:  RLF    78,F
0AA1:  RLF    79,F
0AA2:  RLF    7A,F
0AA3:  RLF    77,F
0AA4:  RLF    78,F
0AA5:  RLF    79,F
0AA6:  RLF    7A,F
0AA7:  MOVLW  F8
0AA8:  ANDWF  77,F
0AA9:  MOVF   77,W
0AAA:  BSF    03.5
0AAB:  BCF    03.6
0AAC:  IORWF  68,F
0AAD:  MOVF   78,W
0AAE:  IORWF  69,F
0AAF:  MOVF   79,W
0AB0:  IORWF  6A,F
0AB1:  MOVF   7A,W
0AB2:  IORWF  6B,F
....................    }  
....................   
....................    return(ret);  
0AB3:  MOVF   68,W
0AB4:  MOVWF  77
0AB5:  MOVF   69,W
0AB6:  MOVWF  78
0AB7:  MOVF   6A,W
0AB8:  MOVWF  79
0AB9:  MOVF   6B,W
0ABA:  MOVWF  7A
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_putd()  
.................... //  
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will  
.................... // send when the CAN bus becomes available.  
.................... //  
.................... //    Paramaters:  
.................... //       id - ID to transmit data as  
.................... //       data - pointer to data to send  
.................... //       len - length of data to send  
.................... //       priority - priority of message.  The higher the number, the  
.................... //                  sooner the CAN peripheral will send the message.  
.................... //                  Numbers 0 through 3 are valid.  
.................... //       ext - TRUE to use an extended ID, FALSE if not  
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT  
.................... //  
.................... //    Returns:  
.................... //       If successful, it will return TRUE  
.................... //       If un-successful, will return FALSE  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) {  
....................    int i;  
....................    int port;  
....................   
....................    int TXRXBaD0;  
....................    int TXBaCTRL;  
....................    int TXRXBaEIDL;  
....................    int TXBaDLC;  
....................   
....................    struct txbNctrl_struct b_TXBaCTRL;  
....................    struct rxbNdlc_struct b_TXBaDLC;  
....................    struct txbNctrl_struct b_TXB0CTRL, b_TXB1CTRL, b_TXB2CTRL;  
....................   
....................    b_TXB0CTRL=mcp2510_read(TXB0CTRL);  
*
03CC:  MOVLW  30
03CD:  MOVWF  4B
03CE:  BCF    03.6
03CF:  CALL   082
03D0:  MOVF   78,W
03D1:  BSF    03.6
03D2:  MOVWF  48
....................    b_TXB1CTRL=mcp2510_read(TXB1CTRL);  
03D3:  MOVLW  40
03D4:  MOVWF  4B
03D5:  BCF    03.6
03D6:  CALL   082
03D7:  MOVF   78,W
03D8:  BSF    03.6
03D9:  MOVWF  49
....................    b_TXB2CTRL=mcp2510_read(TXB2CTRL);  
03DA:  MOVLW  50
03DB:  MOVWF  4B
03DC:  BCF    03.6
03DD:  CALL   082
03DE:  MOVF   78,W
03DF:  BSF    03.6
03E0:  MOVWF  4A
....................   
....................     // find emtpy transmitter  
....................     //map access bank addresses to empty transmitter  
....................    if (!b_TXB0CTRL.txreq) {  
03E1:  BTFSC  48.3
03E2:  GOTO   3ED
....................       TXRXBaD0=TXB0D0;  
03E3:  MOVLW  36
03E4:  MOVWF  42
....................       TXBaCTRL=TXB0CTRL;  
03E5:  MOVLW  30
03E6:  MOVWF  43
....................       TXRXBaEIDL=TXB0EIDL;  
03E7:  MOVLW  34
03E8:  MOVWF  44
....................       TXBaDLC=TXB0DLC;  
03E9:  MOVLW  35
03EA:  MOVWF  45
....................       port=0;  
03EB:  CLRF   41
....................    }  
....................    else if (!b_TXB1CTRL.txreq) {  
03EC:  GOTO   40A
03ED:  BTFSC  49.3
03EE:  GOTO   3FA
....................       TXRXBaD0=TXB1D0;  
03EF:  MOVLW  46
03F0:  MOVWF  42
....................       TXBaCTRL=TXB1CTRL;  
03F1:  MOVLW  40
03F2:  MOVWF  43
....................       TXRXBaEIDL=TXB1EIDL;  
03F3:  MOVLW  44
03F4:  MOVWF  44
....................       TXBaDLC=TXB1DLC;  
03F5:  MOVLW  45
03F6:  MOVWF  45
....................       port=1;  
03F7:  MOVLW  01
03F8:  MOVWF  41
....................    }  
....................    else if (!b_TXB2CTRL.txreq) {  
03F9:  GOTO   40A
03FA:  BTFSC  4A.3
03FB:  GOTO   407
....................       TXRXBaD0=TXB2D0;  
03FC:  MOVLW  56
03FD:  MOVWF  42
....................       TXBaCTRL=TXB2CTRL;  
03FE:  MOVLW  50
03FF:  MOVWF  43
....................       TXRXBaEIDL=TXB2EIDL;  
0400:  MOVLW  54
0401:  MOVWF  44
....................       TXBaDLC=TXB2DLC;  
0402:  MOVLW  55
0403:  MOVWF  45
....................       port=2;  
0404:  MOVLW  02
0405:  MOVWF  41
....................    }  
....................    else {  
0406:  GOTO   40A
....................       #if CAN_DO_DEBUG  
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n");  
....................       #endif  
....................       return(0);  
0407:  MOVLW  00
0408:  MOVWF  78
0409:  GOTO   467
....................    }  
....................   
....................    //set priority.  
....................    b_TXBaCTRL=mcp2510_read(TXBaCTRL);  
040A:  MOVF   43,W
040B:  MOVWF  4B
040C:  BCF    03.6
040D:  CALL   082
040E:  MOVF   78,W
040F:  BSF    03.6
0410:  MOVWF  46
....................    b_TXBaCTRL.txpri=priority;  
0411:  MOVF   3D,W
0412:  ANDLW  03
0413:  MOVWF  77
0414:  MOVLW  FC
0415:  ANDWF  46,W
0416:  IORWF  77,W
0417:  MOVWF  46
....................    mcp2510_write(TXBaCTRL, (int)b_TXBaCTRL);  
0418:  MOVF   43,W
0419:  MOVWF  58
041A:  MOVF   46,W
041B:  MOVWF  59
041C:  BCF    03.6
041D:  CALL   0DD
....................   
....................    //set tx mask  
....................    can_set_id(TXRXBaEIDL, id, ext);  
041E:  BSF    03.6
041F:  MOVF   44,W
0420:  MOVWF  4B
0421:  MOVF   39,W
0422:  MOVWF  4F
0423:  MOVF   38,W
0424:  MOVWF  4E
0425:  MOVF   37,W
0426:  MOVWF  4D
0427:  MOVF   36,W
0428:  MOVWF  4C
0429:  MOVF   3E,W
042A:  MOVWF  50
042B:  BCF    03.6
042C:  CALL   115
....................   
....................    //set tx data count  
....................    b_TXBaDLC=len;  
042D:  BSF    03.6
042E:  MOVF   3C,W
042F:  MOVWF  47
....................    b_TXBaDLC.rtr=rtr;  
0430:  BCF    47.6
0431:  BTFSC  3F.0
0432:  BSF    47.6
....................    mcp2510_write(TXBaDLC, (int)b_TXBaDLC);  
0433:  MOVF   45,W
0434:  MOVWF  58
0435:  MOVF   47,W
0436:  MOVWF  59
0437:  BCF    03.6
0438:  CALL   0DD
....................   
....................    //write to buffer  
....................     for (i=TXRXBaD0; i<(TXRXBaD0 + len); i++) {  
0439:  BSF    03.6
043A:  MOVF   42,W
043B:  MOVWF  40
043C:  MOVF   3C,W
043D:  ADDWF  42,W
043E:  SUBWF  40,W
043F:  BTFSC  03.0
0440:  GOTO   456
....................       mcp2510_write(i,*data);  
0441:  MOVF   3B,W
0442:  MOVWF  7A
0443:  MOVF   3A,W
0444:  MOVWF  04
0445:  BCF    03.7
0446:  BTFSC  3B.0
0447:  BSF    03.7
0448:  MOVF   00,W
0449:  MOVWF  4B
044A:  MOVF   40,W
044B:  MOVWF  58
044C:  MOVF   4B,W
044D:  MOVWF  59
044E:  BCF    03.6
044F:  CALL   0DD
....................       data++;  
0450:  BSF    03.6
0451:  INCF   3A,F
0452:  BTFSC  03.2
0453:  INCF   3B,F
....................     }  
0454:  INCF   40,F
0455:  GOTO   43C
....................   
....................    //enable transmission  
....................    b_TXBaCTRL=mcp2510_read(TXBaCTRL);  
0456:  MOVF   43,W
0457:  MOVWF  4B
0458:  BCF    03.6
0459:  CALL   082
045A:  MOVF   78,W
045B:  BSF    03.6
045C:  MOVWF  46
....................    b_TXBaCTRL.txreq=1;  
045D:  BSF    46.3
....................    mcp2510_write(TXBaCTRL, (int)b_TXBaCTRL);  
045E:  MOVF   43,W
045F:  MOVWF  58
0460:  MOVF   46,W
0461:  MOVWF  59
0462:  BCF    03.6
0463:  CALL   0DD
....................   
....................    #if CAN_DO_DEBUG  
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr);  
....................             if ((len)&&(!rtr)) {  
....................                data-=len;  
....................                can_debug("  DATA = ");  
....................                for (i=0;i<len;i++) {  
....................                   can_debug("%X ",*data);  
....................                   data++;  
....................                }  
....................                can_debug("\r\n");  
....................             }  
....................    #endif  
....................   
....................    return(1);  
0464:  MOVLW  01
0465:  MOVWF  78
0466:  BSF    03.6
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_getd()  
.................... //  
.................... // Gets data from a receive buffer, if the data exists  
.................... //  
.................... //    Returns:  
.................... //      id - ID who sent message  
.................... //      data - pointer to array of data  
.................... //      len - length of received data  
.................... //      stat - structure holding some information (such as which buffer  
.................... //             recieved it, ext or standard, etc)  
.................... //  
.................... //    Returns:  
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE  
.................... //      if there was none.  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat)  
*
0823:  BCF    03.5
0824:  CLRF   28
0825:  BTFSC  0B.7
0826:  BSF    28.7
0827:  BCF    0B.7
.................... {  
....................     int i;  
....................   
....................    struct struct_RXB0CTRL b_RXB0CTRL;  
....................    struct struct_RXB1CTRL b_RXB1CTRL;  
....................    struct struct_EFLG b_EFLG;  
....................   
....................    int RXBaDLC;  
....................    struct rxbNdlc_struct b_RXBaDLC;  
....................   
....................    int TXRXBaSIDL;  
....................    struct struct_TXRXBaSIDL b_TXRXBaSIDL;  
....................   
....................   
....................    int RXBaD0;  
....................    struct struct_CANINTF b_CANINTF;  
....................   
....................    b_CANINTF=mcp2510_read(CANINTF);  
0828:  MOVLW  2C
0829:  BSF    03.6
082A:  MOVWF  4B
082B:  BCF    0A.3
082C:  BCF    03.6
082D:  CALL   082
082E:  BSF    0A.3
082F:  BTFSC  28.7
0830:  BSF    0B.7
0831:  MOVF   78,W
0832:  BSF    03.5
0833:  MOVWF  5D
0834:  BCF    03.5
0835:  CLRF   28
0836:  BTFSC  0B.7
0837:  BSF    28.7
0838:  BCF    0B.7
....................   
....................    b_RXB0CTRL=mcp2510_read(RXB0CTRL);  
0839:  MOVLW  60
083A:  BSF    03.6
083B:  MOVWF  4B
083C:  BCF    0A.3
083D:  BCF    03.6
083E:  CALL   082
083F:  BSF    0A.3
0840:  BTFSC  28.7
0841:  BSF    0B.7
0842:  MOVF   78,W
0843:  BSF    03.5
0844:  MOVWF  55
0845:  BCF    03.5
0846:  CLRF   28
0847:  BTFSC  0B.7
0848:  BSF    28.7
0849:  BCF    0B.7
....................    b_RXB1CTRL=mcp2510_read(RXB1CTRL);  
084A:  MOVLW  70
084B:  BSF    03.6
084C:  MOVWF  4B
084D:  BCF    0A.3
084E:  BCF    03.6
084F:  CALL   082
0850:  BSF    0A.3
0851:  BTFSC  28.7
0852:  BSF    0B.7
0853:  MOVF   78,W
0854:  BSF    03.5
0855:  MOVWF  56
0856:  BCF    03.5
0857:  CLRF   28
0858:  BTFSC  0B.7
0859:  BSF    28.7
085A:  BCF    0B.7
....................    b_EFLG=mcp2510_read(EFLG);  
085B:  MOVLW  2D
085C:  BSF    03.6
085D:  MOVWF  4B
085E:  BCF    0A.3
085F:  BCF    03.6
0860:  CALL   082
0861:  BSF    0A.3
0862:  BTFSC  28.7
0863:  BSF    0B.7
0864:  MOVF   78,W
0865:  BSF    03.5
0866:  MOVWF  57
....................   
....................     if (b_CANINTF.rx0if) {  
0867:  BTFSS  5D.0
0868:  GOTO   09E
....................         stat.buffer=0;  
0869:  BCF    03.5
086A:  BCF    3F.4
....................   
....................         stat.err_ovfl=b_EFLG.rx0ovr;  
086B:  BCF    3F.0
086C:  BSF    03.5
086D:  BTFSS  57.6
086E:  GOTO   072
086F:  BCF    03.5
0870:  BSF    3F.0
0871:  BSF    03.5
....................         b_EFLG.rx0ovr=0;  
0872:  BCF    57.6
0873:  BCF    03.5
0874:  CLRF   28
0875:  BTFSC  0B.7
0876:  BSF    28.7
0877:  BCF    0B.7
....................         mcp2510_write(EFLG, (int)b_EFLG);  
0878:  MOVLW  2D
0879:  BSF    03.6
087A:  MOVWF  58
087B:  BSF    03.5
087C:  BCF    03.6
087D:  MOVF   57,W
087E:  BCF    03.5
087F:  BSF    03.6
0880:  MOVWF  59
0881:  BCF    0A.3
0882:  BCF    03.6
0883:  CALL   0DD
0884:  BSF    0A.3
0885:  BTFSC  28.7
0886:  BSF    0B.7
....................   
....................         if (b_RXB0CTRL.bukt) {  
0887:  BSF    03.5
0888:  BTFSS  55.2
0889:  GOTO   097
....................          stat.filthit=b_RXB0CTRL.filhit0;  
088A:  MOVLW  00
088B:  BTFSC  55.0
088C:  MOVLW  01
088D:  ANDLW  07
088E:  MOVWF  77
088F:  BCF    03.0
0890:  RLF    77,F
0891:  MOVLW  F1
0892:  BCF    03.5
0893:  ANDWF  3F,W
0894:  IORWF  77,W
0895:  MOVWF  3F
0896:  BSF    03.5
....................         }  
....................   
....................         RXBaDLC=RXB0DLC;  
0897:  MOVLW  65
0898:  MOVWF  58
....................         TXRXBaSIDL=RXB0SIDL;  
0899:  MOVLW  62
089A:  MOVWF  5A
....................         RXBaD0=RXB0D0;  
089B:  MOVLW  66
089C:  MOVWF  5C
....................     }  
....................     else if (b_CANINTF.rx1if)  
089D:  GOTO   0D5
089E:  BTFSS  5D.1
089F:  GOTO   0D2
....................     {  
....................         stat.buffer=1;  
08A0:  BCF    03.5
08A1:  BSF    3F.4
....................   
....................         stat.err_ovfl=b_EFLG.rx1ovr;  
08A2:  BCF    3F.0
08A3:  BSF    03.5
08A4:  BTFSS  57.7
08A5:  GOTO   0A9
08A6:  BCF    03.5
08A7:  BSF    3F.0
08A8:  BSF    03.5
....................         b_EFLG.rx1ovr=0;  
08A9:  BCF    57.7
08AA:  BCF    03.5
08AB:  CLRF   28
08AC:  BTFSC  0B.7
08AD:  BSF    28.7
08AE:  BCF    0B.7
....................         mcp2510_write(EFLG, (int)b_EFLG);  
08AF:  MOVLW  2D
08B0:  BSF    03.6
08B1:  MOVWF  58
08B2:  BSF    03.5
08B3:  BCF    03.6
08B4:  MOVF   57,W
08B5:  BCF    03.5
08B6:  BSF    03.6
08B7:  MOVWF  59
08B8:  BCF    0A.3
08B9:  BCF    03.6
08BA:  CALL   0DD
08BB:  BSF    0A.3
08BC:  BTFSC  28.7
08BD:  BSF    0B.7
....................   
....................   
....................         stat.filthit=b_RXB1CTRL.filhit0;  
08BE:  BSF    03.5
08BF:  MOVF   56,W
08C0:  ANDLW  07
08C1:  ANDLW  07
08C2:  MOVWF  77
08C3:  BCF    03.0
08C4:  RLF    77,F
08C5:  MOVLW  F1
08C6:  BCF    03.5
08C7:  ANDWF  3F,W
08C8:  IORWF  77,W
08C9:  MOVWF  3F
....................         RXBaDLC=RXB1DLC;  
08CA:  MOVLW  75
08CB:  BSF    03.5
08CC:  MOVWF  58
....................         TXRXBaSIDL=RXB1SIDL;  
08CD:  MOVLW  72
08CE:  MOVWF  5A
....................         RXBaD0=RXB1D0;  
08CF:  MOVLW  76
08D0:  MOVWF  5C
....................     }  
....................     else {  
08D1:  GOTO   0D5
....................       #if CAN_DO_DEBUG  
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n");  
....................       #endif  
....................       return (0);  
08D2:  MOVLW  00
08D3:  MOVWF  78
08D4:  GOTO   31C
....................     }  
....................   
....................    //get count  
....................     b_RXBaDLC=mcp2510_read(RXBaDLC);  
08D5:  BCF    03.5
08D6:  CLRF   28
08D7:  BTFSC  0B.7
08D8:  BSF    28.7
08D9:  BCF    0B.7
08DA:  BSF    03.5
08DB:  MOVF   58,W
08DC:  BCF    03.5
08DD:  BSF    03.6
08DE:  MOVWF  4B
08DF:  BCF    0A.3
08E0:  BCF    03.6
08E1:  CALL   082
08E2:  BSF    0A.3
08E3:  BTFSC  28.7
08E4:  BSF    0B.7
08E5:  MOVF   78,W
08E6:  BSF    03.5
08E7:  MOVWF  59
....................     len = b_RXBaDLC.dlc;  
08E8:  MOVF   59,W
08E9:  ANDLW  0F
08EA:  BCF    03.5
08EB:  MOVWF  3E
....................     stat.rtr=b_RXBaDLC.rtr;  
08EC:  BCF    3F.5
08ED:  BSF    03.5
08EE:  BTFSS  59.6
08EF:  GOTO   0F3
08F0:  BCF    03.5
08F1:  BSF    3F.5
08F2:  BSF    03.5
08F3:  BCF    03.5
08F4:  CLRF   28
08F5:  BTFSC  0B.7
08F6:  BSF    28.7
08F7:  BCF    0B.7
....................   
....................    //was it extended or standard? 
....................     b_TXRXBaSIDL=mcp2510_read(TXRXBaSIDL);  
08F8:  BSF    03.5
08F9:  MOVF   5A,W
08FA:  BCF    03.5
08FB:  BSF    03.6
08FC:  MOVWF  4B
08FD:  BCF    0A.3
08FE:  BCF    03.6
08FF:  CALL   082
0900:  BSF    0A.3
0901:  BTFSC  28.7
0902:  BSF    0B.7
0903:  MOVF   78,W
0904:  BSF    03.5
0905:  MOVWF  5B
....................     stat.ext=b_TXRXBaSIDL.ext;  
0906:  BCF    03.5
0907:  BCF    3F.6
0908:  BSF    03.5
0909:  BTFSS  5B.3
090A:  GOTO   10E
090B:  BCF    03.5
090C:  BSF    3F.6
090D:  BSF    03.5
....................     id=can_get_id(TXRXBaSIDL + 2,stat.ext);  
090E:  MOVLW  02
090F:  ADDWF  5A,W
0910:  MOVWF  5E
0911:  MOVLW  00
0912:  BCF    03.5
0913:  BTFSC  3F.6
0914:  MOVLW  01
0915:  BSF    03.5
0916:  MOVWF  5F
0917:  MOVF   5E,W
0918:  MOVWF  66
0919:  MOVF   5F,W
091A:  MOVWF  67
*
0ABB:  MOVF   7A,W
0ABC:  BCF    03.5
0ABD:  MOVWF  2C
0ABE:  MOVF   79,W
0ABF:  MOVWF  2B
0AC0:  MOVF   78,W
0AC1:  MOVWF  2A
0AC2:  MOVF   77,W
0AC3:  MOVWF  29
....................   
....................    //get data  
....................     for ( i = RXBaD0; i < (RXBaD0 + len); i++ ) {  
0AC4:  BSF    03.5
0AC5:  MOVF   5C,W
0AC6:  MOVWF  54
0AC7:  BCF    03.5
0AC8:  MOVF   3E,W
0AC9:  BSF    03.5
0ACA:  ADDWF  5C,W
0ACB:  SUBWF  54,W
0ACC:  BTFSC  03.0
0ACD:  GOTO   2F1
....................          *data=mcp2510_read(i);  
0ACE:  MOVF   53,W
0ACF:  MOVWF  7A
0AD0:  MOVF   52,W
0AD1:  MOVWF  5E
0AD2:  MOVF   53,W
0AD3:  MOVWF  5F
0AD4:  BCF    03.5
0AD5:  CLRF   28
0AD6:  BTFSC  0B.7
0AD7:  BSF    28.7
0AD8:  BCF    0B.7
0AD9:  BSF    03.5
0ADA:  MOVF   54,W
0ADB:  BCF    03.5
0ADC:  BSF    03.6
0ADD:  MOVWF  4B
0ADE:  BCF    0A.3
0ADF:  BCF    03.6
0AE0:  CALL   082
0AE1:  BSF    0A.3
0AE2:  BTFSC  28.7
0AE3:  BSF    0B.7
0AE4:  BSF    03.5
0AE5:  MOVF   5E,W
0AE6:  MOVWF  04
0AE7:  BCF    03.7
0AE8:  BTFSC  5F.0
0AE9:  BSF    03.7
0AEA:  MOVF   78,W
0AEB:  MOVWF  00
....................         data++;  
0AEC:  INCF   52,F
0AED:  BTFSC  03.2
0AEE:  INCF   53,F
....................     }  
0AEF:  INCF   54,F
0AF0:  GOTO   2C7
....................   
....................     stat.inv=b_CANINTF.merrf;  
0AF1:  BCF    03.5
0AF2:  BCF    3F.7
0AF3:  BSF    03.5
0AF4:  BTFSS  5D.7
0AF5:  GOTO   2F9
0AF6:  BCF    03.5
0AF7:  BSF    3F.7
0AF8:  BSF    03.5
....................     if (b_CANINTF.merrf) {  
0AF9:  BTFSS  5D.7
0AFA:  GOTO   2FC
....................       b_CANINTF.merrf=0;  
0AFB:  BCF    5D.7
....................     }  
....................   
....................     if (stat.buffer) {  
0AFC:  BCF    03.5
0AFD:  BTFSS  3F.4
0AFE:  GOTO   303
....................       b_CANINTF.rx1if=0;  
0AFF:  BSF    03.5
0B00:  BCF    5D.1
....................     }  
....................     else {  
0B01:  GOTO   305
0B02:  BCF    03.5
....................       b_CANINTF.rx0if=0;  
0B03:  BSF    03.5
0B04:  BCF    5D.0
....................     }  
....................     mcp2510_write(CANINTF, (int)b_CANINTF);  
0B05:  BCF    03.5
0B06:  CLRF   28
0B07:  BTFSC  0B.7
0B08:  BSF    28.7
0B09:  BCF    0B.7
0B0A:  MOVLW  2C
0B0B:  BSF    03.6
0B0C:  MOVWF  58
0B0D:  BSF    03.5
0B0E:  BCF    03.6
0B0F:  MOVF   5D,W
0B10:  BCF    03.5
0B11:  BSF    03.6
0B12:  MOVWF  59
0B13:  BCF    0A.3
0B14:  BCF    03.6
0B15:  CALL   0DD
0B16:  BSF    0A.3
0B17:  BTFSC  28.7
0B18:  BSF    0B.7
....................   
....................     #if CAN_DO_DEBUG  
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl);  
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv);  
....................        if ((len)&&(!stat.rtr)) {  
....................           data-=len;  
....................           can_debug("\r\n    DATA = ");  
....................           for (i=0;i<len;i++) {  
....................             can_debug("%X ",*data);  
....................             data++;  
....................           }  
....................        }  
....................        can_debug("\r\n");  
....................     #endif  
....................   
....................     return(1);  
0B19:  MOVLW  01
0B1A:  MOVWF  78
0B1B:  BSF    03.5
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_kbhit()  
.................... //  
.................... // Returns TRUE if there is data in the receive buffers  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... int1 can_kbhit(void) {  
*
0800:  CLRF   28
0801:  BTFSC  0B.7
0802:  BSF    28.7
0803:  BCF    0B.7
....................    struct struct_CANINTF b_CANINTF;  
....................   
....................    b_CANINTF=mcp2510_read(CANINTF);  
0804:  MOVLW  2C
0805:  BSF    03.6
0806:  MOVWF  4B
0807:  BCF    0A.3
0808:  BCF    03.6
0809:  CALL   082
080A:  BSF    0A.3
080B:  BTFSC  28.7
080C:  BSF    0B.7
080D:  MOVF   78,W
080E:  BSF    03.5
080F:  MOVWF  52
....................    if (b_CANINTF.rx0if || b_CANINTF.rx1if)  
0810:  BTFSC  52.0
0811:  GOTO   014
0812:  BTFSS  52.1
0813:  GOTO   017
....................       {return(1);}  
0814:  MOVLW  01
0815:  MOVWF  78
0816:  GOTO   019
....................   
....................    return(0);  
0817:  MOVLW  00
0818:  MOVWF  78
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_tbe()  
.................... //  
.................... // Returns TRUE if the transmit buffers are empty and ready to transmit data  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... int1 can_tbe(void) {  
....................    struct txbNctrl_struct b_TXB0CTRL, b_TXB1CTRL, b_TXB2CTRL;  
....................   
....................    b_TXB0CTRL=mcp2510_read(TXB0CTRL);  
....................    b_TXB1CTRL=mcp2510_read(TXB1CTRL);  
....................    b_TXB2CTRL=mcp2510_read(TXB2CTRL);  
....................   
....................    if (!b_TXB0CTRL.txreq || !b_TXB1CTRL.txreq || !b_TXB2CTRL.txreq)  
....................       {return(1);}  
....................   
....................    return(0);  
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_abort()  
.................... //  
.................... // Aborts all pending tranmissions.  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... void can_abort(void) {  
....................    struct struct_CANCTRL b_CANCTRL;  
....................   
....................    b_CANCTRL=mcp2510_read(CANCTRL);  
....................    b_CANCTRL.abat=1;  
....................    mcp2510_write(CANCTRL, (int)b_CANCTRL);  
....................   
....................    delay_ms(5);  
....................    b_CANCTRL.abat=0;  
....................    mcp2510_write(CANCTRL, (int)b_CANCTRL);  
.................... }  
....................   
....................   
....................   
....................   
.................... ///////////////////  
.................... ///  
.................... //  
.................... // SPI CODE  
.................... //  
.................... ///  
.................... //////////////////  
....................   
.................... //data clocked in on rising edge  
.................... //data driven out on falling edge  
.................... int mcp2510_read(int address) {  
....................    int command[2];  
....................    int i;  
....................    int data;  
....................   
....................    command[1]=0x03;  
*
0082:  MOVLW  03
0083:  BSF    03.6
0084:  MOVWF  4D
....................    command[0]=address;  
0085:  MOVF   4B,W
0086:  MOVWF  4C
....................   
....................    output_low(EXT_CAN_CS);  
0087:  BSF    03.5
0088:  BCF    03.6
0089:  BCF    06.3
008A:  BCF    03.5
008B:  BCF    06.3
....................   
....................    for (i=0;i<16;i++) {  
008C:  BSF    03.6
008D:  CLRF   4E
008E:  MOVF   4E,W
008F:  SUBLW  0F
0090:  BTFSS  03.0
0091:  GOTO   0B1
....................       output_bit(EXT_CAN_SI, shift_left(&command[0],2,0));  
0092:  BCF    03.0
0093:  RLF    4C,F
0094:  RLF    4D,F
0095:  BTFSC  03.0
0096:  GOTO   09B
0097:  BCF    03.6
0098:  BCF    07.5
0099:  GOTO   09D
009A:  BSF    03.6
009B:  BCF    03.6
009C:  BSF    07.5
009D:  BCF    40.5
009E:  MOVF   40,W
009F:  BSF    03.5
00A0:  MOVWF  07
*
0726:  MOVLW  FF
0727:  MOVWF  40
....................       output_high(EXT_CAN_SCK);  
*
00A1:  BCF    03.5
00A2:  BCF    40.3
00A3:  MOVF   40,W
00A4:  BSF    03.5
00A5:  MOVWF  07
00A6:  BCF    03.5
00A7:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
00A8:  BCF    40.3
00A9:  MOVF   40,W
00AA:  BSF    03.5
00AB:  MOVWF  07
00AC:  BCF    03.5
00AD:  BCF    07.3
....................    }  
00AE:  BSF    03.6
00AF:  INCF   4E,F
00B0:  GOTO   08E
....................    for (i=0;i<8;i++) {  
00B1:  CLRF   4E
00B2:  MOVF   4E,W
00B3:  SUBLW  07
00B4:  BTFSS  03.0
00B5:  GOTO   0D3
....................       shift_left(&data,1,input(EXT_CAN_SO));  
00B6:  BCF    03.6
00B7:  BSF    40.4
00B8:  MOVF   40,W
00B9:  BSF    03.5
00BA:  MOVWF  07
00BB:  BCF    03.5
00BC:  BTFSC  07.4
00BD:  GOTO   0C0
00BE:  BCF    03.0
00BF:  GOTO   0C1
00C0:  BSF    03.0
00C1:  BSF    03.6
00C2:  RLF    4F,F
....................       output_high(EXT_CAN_SCK);  
00C3:  BCF    03.6
00C4:  BCF    40.3
00C5:  MOVF   40,W
00C6:  BSF    03.5
00C7:  MOVWF  07
00C8:  BCF    03.5
00C9:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
00CA:  BCF    40.3
00CB:  MOVF   40,W
00CC:  BSF    03.5
00CD:  MOVWF  07
00CE:  BCF    03.5
00CF:  BCF    07.3
....................    }  
00D0:  BSF    03.6
00D1:  INCF   4E,F
00D2:  GOTO   0B2
....................   
....................    output_high(EXT_CAN_CS);  
00D3:  BSF    03.5
00D4:  BCF    03.6
00D5:  BCF    06.3
00D6:  BCF    03.5
00D7:  BSF    06.3
....................   
....................    return(data);  
00D8:  BSF    03.6
00D9:  MOVF   4F,W
00DA:  MOVWF  78
.................... }  
00DB:  BCF    03.6
00DC:  RETLW  00
....................   
.................... int mcp2510_status(void) {  
....................    int command;  
....................    int data;  
....................    int i;  
....................   
....................    command=0xA0;  
....................   
....................    output_low(EXT_CAN_CS);  
....................   
....................    for (i=0;i<8;i++) {  
....................       output_bit(EXT_CAN_SI, shift_left(&command,1,0));  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................    for (i=0;i<8;i++) {  
....................       shift_left(&data,1,input(EXT_CAN_SO));  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................    for (i=0;i<8;i++) {  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................   
....................    output_high(EXT_CAN_CS);  
....................   
....................    return(data);  
.................... }  
....................   
....................   
.................... void mcp2510_write(int address, int data) {  
....................    int command[3];  
....................    int i;  
....................   
....................    command[2]=0x02;  
00DD:  MOVLW  02
00DE:  BSF    03.6
00DF:  MOVWF  5C
....................    command[1]=address;  
00E0:  MOVF   58,W
00E1:  MOVWF  5B
....................    command[0]=data;  
00E2:  MOVF   59,W
00E3:  MOVWF  5A
....................   
....................    output_low(EXT_CAN_CS);  
00E4:  BSF    03.5
00E5:  BCF    03.6
00E6:  BCF    06.3
00E7:  BCF    03.5
00E8:  BCF    06.3
....................   
....................    for (i=0;i<24;i++) {  
00E9:  BSF    03.6
00EA:  CLRF   5D
00EB:  MOVF   5D,W
00EC:  SUBLW  17
00ED:  BTFSS  03.0
00EE:  GOTO   10F
....................       output_bit(EXT_CAN_SI, shift_left(&command[0],3,0));  
00EF:  BCF    03.0
00F0:  RLF    5A,F
00F1:  RLF    5B,F
00F2:  RLF    5C,F
00F3:  BTFSC  03.0
00F4:  GOTO   0F9
00F5:  BCF    03.6
00F6:  BCF    07.5
00F7:  GOTO   0FB
00F8:  BSF    03.6
00F9:  BCF    03.6
00FA:  BSF    07.5
00FB:  BCF    40.5
00FC:  MOVF   40,W
00FD:  BSF    03.5
00FE:  MOVWF  07
....................       output_high(EXT_CAN_SCK);  
00FF:  BCF    03.5
0100:  BCF    40.3
0101:  MOVF   40,W
0102:  BSF    03.5
0103:  MOVWF  07
0104:  BCF    03.5
0105:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
0106:  BCF    40.3
0107:  MOVF   40,W
0108:  BSF    03.5
0109:  MOVWF  07
010A:  BCF    03.5
010B:  BCF    07.3
....................    }  
010C:  BSF    03.6
010D:  INCF   5D,F
010E:  GOTO   0EB
....................   
....................    output_high(EXT_CAN_CS);  
010F:  BSF    03.5
0110:  BCF    03.6
0111:  BCF    06.3
0112:  BCF    03.5
0113:  BSF    06.3
.................... }  
0114:  RETLW  00
....................   
.................... void mcp2510_command(int command) {  
....................    int i;  
....................   
....................    output_low(EXT_CAN_CS);  
*
04D3:  BCF    06.3
04D4:  BCF    03.5
04D5:  BCF    06.3
....................   
....................    for (i=0;i<8;i++) {  
04D6:  BSF    03.5
04D7:  CLRF   54
04D8:  MOVF   54,W
04D9:  SUBLW  07
04DA:  BTFSS  03.0
04DB:  GOTO   4FA
....................       output_bit(EXT_CAN_SI, shift_left(&command,1,0));  
04DC:  BCF    03.0
04DD:  RLF    53,F
04DE:  BTFSC  03.0
04DF:  GOTO   4E4
04E0:  BCF    03.5
04E1:  BCF    07.5
04E2:  GOTO   4E6
04E3:  BSF    03.5
04E4:  BCF    03.5
04E5:  BSF    07.5
04E6:  BCF    40.5
04E7:  MOVF   40,W
04E8:  BSF    03.5
04E9:  MOVWF  07
....................       output_high(EXT_CAN_SCK);  
04EA:  BCF    03.5
04EB:  BCF    40.3
04EC:  MOVF   40,W
04ED:  BSF    03.5
04EE:  MOVWF  07
04EF:  BCF    03.5
04F0:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
04F1:  BCF    40.3
04F2:  MOVF   40,W
04F3:  BSF    03.5
04F4:  MOVWF  07
04F5:  BCF    03.5
04F6:  BCF    07.3
....................    }  
04F7:  BSF    03.5
04F8:  INCF   54,F
04F9:  GOTO   4D8
....................   
....................    output_high(EXT_CAN_CS);  
04FA:  BCF    06.3
04FB:  BCF    03.5
04FC:  BSF    06.3
.................... }  
....................   
.................... void mcp2510_init(void) {  
....................    output_high(EXT_CAN_CS);  
*
04C6:  BSF    03.5
04C7:  BCF    06.3
04C8:  BCF    03.5
04C9:  BSF    06.3
....................    output_low(EXT_CAN_SCK);  
04CA:  BCF    40.3
04CB:  MOVF   40,W
04CC:  BSF    03.5
04CD:  MOVWF  07
04CE:  BCF    03.5
04CF:  BCF    07.3
....................   
....................    #ifdef EXT_CAN_TX0RTS  
....................     output_high(EXT_CAN_TX0RTS);  
....................    #endif  
....................    #ifdef EXT_CAN_TX1RTS  
....................     output_high(EXT_CAN_TX1RTS);  
....................    #endif  
....................    #ifdef EXT_CAN_TX2RTS  
....................     output_high(EXT_CAN_TX2RTS);  
....................    #endif  
....................   
....................   #ifdef EXT_CAN_TX0RTS  
....................    output_high(EXT_CAN_RESET);  
....................    output_low(EXT_CAN_RESET);  
....................    output_high(EXT_CAN_RESET);  
....................    delay_ms(5);  
....................   #endif  
....................   
....................    mcp2510_command(0xC0);   //reset  
04D0:  MOVLW  C0
04D1:  BSF    03.5
04D2:  MOVWF  53
....................    delay_ms(5);  
*
04FD:  MOVLW  05
04FE:  BSF    03.5
04FF:  MOVWF  53
0500:  BCF    03.5
0501:  GOTO   474
0502:  NOP
.................... }  
....................  
....................   
.................... #define led_on    output_high(PIN_B1)  
.................... #define led_off   output_low(PIN_B1)  
....................   
.................... int buf_ser[50];                       //buffer de reception serie  
.................... int is;                                //pointeur de reception serie  
.................... int16 mst;                             //compteur de temps en ms  
....................   
.................... /* declaration des fonctions */  
.................... void purge_srxbuf();                   //purge du tampon de reception serie  
.................... void send();                           //envoie d'une trame  
.................... void can_test();                       //test de reception  
.................... void init();  
....................   
.................... /* gestion du temps */  
.................... #int_timer2  
.................... void isr_timer2(void) {mst++;}         //timer qui est appele toutes les ms par une interruption du timer2  
*
004F:  INCF   42,F
0050:  BTFSC  03.2
0051:  INCF   43,F
....................   
.................... /* reception serie */  
0052:  BCF    0C.1
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   025
.................... #int_RDA  
.................... RDA_isr()  
.................... {  
....................    int c;  
....................   
....................    c=getc();  
*
01EC:  BTFSS  0C.5
01ED:  GOTO   1EC
01EE:  MOVF   1A,W
01EF:  BSF    03.6
01F0:  MOVWF  1D
....................    if (c!=0){  
01F1:  MOVF   1D,F
01F2:  BTFSC  03.2
01F3:  GOTO   1FF
....................       buf_ser[is]=c;  
01F4:  MOVLW  A0
01F5:  BCF    03.6
01F6:  ADDWF  41,W
01F7:  MOVWF  04
01F8:  BCF    03.7
01F9:  BSF    03.6
01FA:  MOVF   1D,W
01FB:  MOVWF  00
....................       is++;  
01FC:  BCF    03.6
01FD:  INCF   41,F
01FE:  BSF    03.6
....................    }  
....................    if (c==13)  {send();}  
01FF:  MOVF   1D,W
0200:  SUBLW  0D
0201:  BTFSS  03.2
0202:  GOTO   46B
....................    if (is==49) {purge_srxbuf();}  
*
046B:  BCF    03.6
046C:  MOVF   41,W
046D:  SUBLW  31
046E:  BTFSC  03.2
046F:  CALL   1DC
.................... }  
....................   
0470:  BCF    0C.5
0471:  BCF    0A.3
0472:  BCF    0A.4
0473:  GOTO   025
.................... void main() {  
....................    init();  
*
0712:  CLRF   04
0713:  BCF    03.7
0714:  MOVLW  1F
0715:  ANDWF  03,F
0716:  BSF    03.5
0717:  BSF    1F.0
0718:  BSF    1F.1
0719:  BSF    1F.2
071A:  BCF    1F.3
071B:  MOVLW  07
071C:  BCF    03.5
071D:  MOVWF  1F
071E:  MOVLW  03
071F:  BSF    03.5
0720:  MOVWF  19
0721:  MOVLW  22
0722:  MOVWF  18
0723:  MOVLW  90
0724:  BCF    03.5
0725:  MOVWF  18
*
0728:  GOTO   4C6
....................    while(TRUE)  
....................    {  
....................       can_test();  
0729:  BSF    0A.3
072A:  GOTO   000
072B:  BCF    0A.3
....................    }  
072C:  GOTO   729
.................... }  
....................   
.................... void can_test(){  
....................    if ( can_kbhit() )   //y a t il une reception ? 
072D:  GOTO   72D
*
0819:  MOVF   78,F
081A:  BTFSC  03.2
081B:  GOTO   3E1
....................    {  
....................       led_on;  
081C:  BCF    06.1
081D:  BCF    03.5
081E:  BSF    06.1
....................       if(can_getd(crx_id,&crxbuf[0],crx_len,rxstat))        //...extraction des donnees et envoie  
081F:  BSF    03.5
0820:  CLRF   53
0821:  MOVLW  2D
0822:  MOVWF  52
*
0B1C:  MOVF   78,F
0B1D:  BTFSC  03.2
0B1E:  GOTO   3DD
....................       {  
....................          printf("%LU ",mst);                                //temps  
0B1F:  MOVLW  10
0B20:  MOVWF  04
0B21:  BCF    03.5
0B22:  MOVF   43,W
0B23:  BSF    03.5
0B24:  MOVWF  53
0B25:  BCF    03.5
0B26:  MOVF   42,W
0B27:  BSF    03.5
0B28:  MOVWF  52
0B29:  BCF    0A.3
0B2A:  BCF    03.5
0B2B:  GOTO   622
0B2C:  BSF    0A.3
0B2D:  MOVLW  20
0B2E:  BTFSS  0C.4
0B2F:  GOTO   32E
0B30:  MOVWF  19
....................          printf("     ID %LX   LEN %U   ",crx_id,crx_len);  //id et taille trame  
0B31:  MOVLW  05
0B32:  BSF    03.5
0B33:  MOVWF  52
0B34:  MOVLW  20
0B35:  BCF    03.5
0B36:  BTFSC  0C.4
0B37:  GOTO   33A
0B38:  BSF    03.5
0B39:  GOTO   335
0B3A:  MOVWF  19
0B3B:  BSF    03.5
0B3C:  DECFSZ 52,F
0B3D:  GOTO   334
0B3E:  MOVLW  49
0B3F:  BCF    03.5
0B40:  BTFSC  0C.4
0B41:  GOTO   344
0B42:  BSF    03.5
0B43:  GOTO   33F
0B44:  MOVWF  19
0B45:  MOVLW  44
0B46:  BTFSS  0C.4
0B47:  GOTO   346
0B48:  MOVWF  19
0B49:  MOVLW  20
0B4A:  BTFSS  0C.4
0B4B:  GOTO   34A
0B4C:  MOVWF  19
0B4D:  MOVF   2C,W
0B4E:  BSF    03.5
0B4F:  MOVWF  53
0B50:  MOVLW  37
0B51:  MOVWF  54
0B52:  BCF    0A.3
0B53:  BCF    03.5
0B54:  CALL   689
0B55:  BSF    0A.3
0B56:  MOVF   2B,W
0B57:  BSF    03.5
0B58:  MOVWF  53
0B59:  MOVLW  37
0B5A:  MOVWF  54
0B5B:  BCF    0A.3
0B5C:  BCF    03.5
0B5D:  CALL   689
0B5E:  BSF    0A.3
0B5F:  MOVF   2A,W
0B60:  BSF    03.5
0B61:  MOVWF  53
0B62:  MOVLW  37
0B63:  MOVWF  54
0B64:  BCF    0A.3
0B65:  BCF    03.5
0B66:  CALL   689
0B67:  BSF    0A.3
0B68:  MOVF   29,W
0B69:  BSF    03.5
0B6A:  MOVWF  53
0B6B:  MOVLW  37
0B6C:  MOVWF  54
0B6D:  BCF    0A.3
0B6E:  BCF    03.5
0B6F:  CALL   689
0B70:  BSF    0A.3
0B71:  MOVLW  03
0B72:  BSF    03.5
0B73:  MOVWF  53
0B74:  MOVLW  20
0B75:  BCF    03.5
0B76:  BTFSC  0C.4
0B77:  GOTO   37A
0B78:  BSF    03.5
0B79:  GOTO   375
0B7A:  MOVWF  19
0B7B:  BSF    03.5
0B7C:  DECFSZ 53,F
0B7D:  GOTO   374
0B7E:  MOVLW  06
0B7F:  MOVWF  54
0B80:  MOVF   54,W
0B81:  BCF    0A.3
0B82:  BCF    03.5
0B83:  CALL   03E
0B84:  BSF    0A.3
0B85:  BSF    03.5
0B86:  INCF   54,F
0B87:  MOVWF  77
0B88:  BCF    03.5
0B89:  BTFSC  0C.4
0B8A:  GOTO   38D
0B8B:  BSF    03.5
0B8C:  GOTO   388
0B8D:  MOVWF  19
0B8E:  MOVLW  0A
0B8F:  BSF    03.5
0B90:  SUBWF  54,W
0B91:  BTFSS  03.2
0B92:  GOTO   380
0B93:  BCF    03.5
0B94:  MOVF   3E,W
0B95:  BSF    03.5
0B96:  MOVWF  55
0B97:  MOVLW  18
0B98:  MOVWF  56
0B99:  BCF    0A.3
0B9A:  BCF    03.5
0B9B:  GOTO   6CB
0B9C:  BSF    0A.3
0B9D:  MOVLW  03
0B9E:  BSF    03.5
0B9F:  MOVWF  55
0BA0:  MOVLW  20
0BA1:  BCF    03.5
0BA2:  BTFSC  0C.4
0BA3:  GOTO   3A6
0BA4:  BSF    03.5
0BA5:  GOTO   3A1
0BA6:  MOVWF  19
0BA7:  BSF    03.5
0BA8:  DECFSZ 55,F
0BA9:  GOTO   3A0
....................          if (!rxstat.rtr)  
0BAA:  BCF    03.5
0BAB:  BTFSC  3F.5
0BAC:  GOTO   3C2
....................          {  
....................             for (ic=0;ic<crx_len;ic++)  
0BAD:  CLRF   3D
0BAE:  MOVF   3E,W
0BAF:  SUBWF  3D,W
0BB0:  BTFSC  03.0
0BB1:  GOTO   3C2
....................                printf("%X",crxbuf[ic]);                     //data si c'est le cas  
0BB2:  MOVLW  2D
0BB3:  ADDWF  3D,W
0BB4:  MOVWF  04
0BB5:  BCF    03.7
0BB6:  MOVF   00,W
0BB7:  BSF    03.5
0BB8:  MOVWF  52
0BB9:  MOVWF  53
0BBA:  MOVLW  37
0BBB:  MOVWF  54
0BBC:  BCF    0A.3
0BBD:  BCF    03.5
0BBE:  CALL   689
0BBF:  BSF    0A.3
0BC0:  INCF   3D,F
0BC1:  GOTO   3AE
....................          }  
....................          if (rxstat.rtr)      {printf("R");}                //indicateurs si c'est le cas  
0BC2:  BTFSS  3F.5
0BC3:  GOTO   3C8
0BC4:  MOVLW  52
0BC5:  BTFSS  0C.4
0BC6:  GOTO   3C5
0BC7:  MOVWF  19
....................          if (rxstat.err_ovfl) {printf("O");}  
0BC8:  BTFSS  3F.0
0BC9:  GOTO   3CE
0BCA:  MOVLW  4F
0BCB:  BTFSS  0C.4
0BCC:  GOTO   3CB
0BCD:  MOVWF  19
....................          if (rxstat.inv)      {printf("I");}  
0BCE:  BTFSS  3F.7
0BCF:  GOTO   3D4
0BD0:  MOVLW  49
0BD1:  BTFSS  0C.4
0BD2:  GOTO   3D1
0BD3:  MOVWF  19
....................          printf("\r\n");                                    //saut de ligne  
0BD4:  MOVLW  0D
0BD5:  BTFSS  0C.4
0BD6:  GOTO   3D5
0BD7:  MOVWF  19
0BD8:  MOVLW  0A
0BD9:  BTFSS  0C.4
0BDA:  GOTO   3D9
0BDB:  MOVWF  19
0BDC:  BSF    03.5
....................       }  
....................       led_off;  
0BDD:  BCF    06.1
0BDE:  BCF    03.5
0BDF:  BCF    06.1
0BE0:  BSF    03.5
....................    }  
.................... }  
0BE1:  BCF    03.5
0BE2:  BCF    0A.3
0BE3:  BCF    0A.4
0BE4:  GOTO   72B (RETURN)
....................   
.................... void send(){  
....................    int a,i,j,n;  
....................    int txlen;  
....................    int rflag;  
....................    int txbuf[10];  
....................    int32 tx_id;  
....................    int32 var;  
....................   
....................    rflag=0;  
*
0203:  CLRF   23
....................    txlen=0;  
0204:  CLRF   22
....................    tx_id=0;  
0205:  CLRF   31
0206:  CLRF   30
0207:  CLRF   2F
0208:  CLRF   2E
....................    var=0;  
0209:  CLRF   35
020A:  CLRF   34
020B:  CLRF   33
020C:  CLRF   32
....................   
....................    for (i=0;i<10;i++){txbuf[i]=0;}  
020D:  CLRF   1F
020E:  MOVF   1F,W
020F:  SUBLW  09
0210:  BTFSS  03.0
0211:  GOTO   219
0212:  MOVLW  24
0213:  ADDWF  1F,W
0214:  MOVWF  04
0215:  BSF    03.7
0216:  CLRF   00
0217:  INCF   1F,F
0218:  GOTO   20E
....................   
....................    a=(buf_ser[1]-30);                                       //taille de l'identifiant  
0219:  MOVLW  1E
021A:  BSF    03.5
021B:  BCF    03.6
021C:  SUBWF  21,W
021D:  BCF    03.5
021E:  BSF    03.6
021F:  MOVWF  1E
....................    n=a;  
0220:  MOVF   1E,W
0221:  MOVWF  21
....................    for (i=0;i<a;i++){                                       //extraction de l'identifiant  
0222:  CLRF   1F
0223:  MOVF   1E,W
0224:  SUBWF  1F,W
0225:  BTFSC  03.0
0226:  GOTO   30F
....................       var=((buf_ser[i+2]-30));  
0227:  MOVLW  02
0228:  ADDWF  1F,W
0229:  ADDLW  A0
022A:  MOVWF  04
022B:  BCF    03.7
022C:  MOVLW  1E
022D:  SUBWF  00,W
022E:  MOVWF  32
022F:  CLRF   33
0230:  CLRF   34
0231:  CLRF   35
....................       if (n==2) {var=var*10;}  
0232:  MOVF   21,W
0233:  SUBLW  02
0234:  BTFSS  03.2
0235:  GOTO   24E
0236:  MOVF   35,W
0237:  MOVWF  39
0238:  MOVF   34,W
0239:  MOVWF  38
023A:  MOVF   33,W
023B:  MOVWF  37
023C:  MOVF   32,W
023D:  MOVWF  36
023E:  CLRF   3D
023F:  CLRF   3C
0240:  CLRF   3B
0241:  MOVLW  0A
0242:  MOVWF  3A
0243:  BCF    03.6
0244:  CALL   056
0245:  MOVF   7A,W
0246:  BSF    03.6
0247:  MOVWF  35
0248:  MOVF   79,W
0249:  MOVWF  34
024A:  MOVF   78,W
024B:  MOVWF  33
024C:  MOVF   77,W
024D:  MOVWF  32
....................       if (n==3) {var=var*100;}  
024E:  MOVF   21,W
024F:  SUBLW  03
0250:  BTFSS  03.2
0251:  GOTO   26A
0252:  MOVF   35,W
0253:  MOVWF  39
0254:  MOVF   34,W
0255:  MOVWF  38
0256:  MOVF   33,W
0257:  MOVWF  37
0258:  MOVF   32,W
0259:  MOVWF  36
025A:  CLRF   3D
025B:  CLRF   3C
025C:  CLRF   3B
025D:  MOVLW  64
025E:  MOVWF  3A
025F:  BCF    03.6
0260:  CALL   056
0261:  MOVF   7A,W
0262:  BSF    03.6
0263:  MOVWF  35
0264:  MOVF   79,W
0265:  MOVWF  34
0266:  MOVF   78,W
0267:  MOVWF  33
0268:  MOVF   77,W
0269:  MOVWF  32
....................       if (n==4) {var=var*1000;}  
026A:  MOVF   21,W
026B:  SUBLW  04
026C:  BTFSS  03.2
026D:  GOTO   287
026E:  MOVF   35,W
026F:  MOVWF  39
0270:  MOVF   34,W
0271:  MOVWF  38
0272:  MOVF   33,W
0273:  MOVWF  37
0274:  MOVF   32,W
0275:  MOVWF  36
0276:  CLRF   3D
0277:  CLRF   3C
0278:  MOVLW  03
0279:  MOVWF  3B
027A:  MOVLW  E8
027B:  MOVWF  3A
027C:  BCF    03.6
027D:  CALL   056
027E:  MOVF   7A,W
027F:  BSF    03.6
0280:  MOVWF  35
0281:  MOVF   79,W
0282:  MOVWF  34
0283:  MOVF   78,W
0284:  MOVWF  33
0285:  MOVF   77,W
0286:  MOVWF  32
....................       if (n==5) {var=var*10000;}  
0287:  MOVF   21,W
0288:  SUBLW  05
0289:  BTFSS  03.2
028A:  GOTO   2A4
028B:  MOVF   35,W
028C:  MOVWF  39
028D:  MOVF   34,W
028E:  MOVWF  38
028F:  MOVF   33,W
0290:  MOVWF  37
0291:  MOVF   32,W
0292:  MOVWF  36
0293:  CLRF   3D
0294:  CLRF   3C
0295:  MOVLW  27
0296:  MOVWF  3B
0297:  MOVLW  10
0298:  MOVWF  3A
0299:  BCF    03.6
029A:  CALL   056
029B:  MOVF   7A,W
029C:  BSF    03.6
029D:  MOVWF  35
029E:  MOVF   79,W
029F:  MOVWF  34
02A0:  MOVF   78,W
02A1:  MOVWF  33
02A2:  MOVF   77,W
02A3:  MOVWF  32
....................       if (n==6) {var=var*100000;}  
02A4:  MOVF   21,W
02A5:  SUBLW  06
02A6:  BTFSS  03.2
02A7:  GOTO   2C2
02A8:  MOVF   35,W
02A9:  MOVWF  39
02AA:  MOVF   34,W
02AB:  MOVWF  38
02AC:  MOVF   33,W
02AD:  MOVWF  37
02AE:  MOVF   32,W
02AF:  MOVWF  36
02B0:  CLRF   3D
02B1:  MOVLW  01
02B2:  MOVWF  3C
02B3:  MOVLW  86
02B4:  MOVWF  3B
02B5:  MOVLW  A0
02B6:  MOVWF  3A
02B7:  BCF    03.6
02B8:  CALL   056
02B9:  MOVF   7A,W
02BA:  BSF    03.6
02BB:  MOVWF  35
02BC:  MOVF   79,W
02BD:  MOVWF  34
02BE:  MOVF   78,W
02BF:  MOVWF  33
02C0:  MOVF   77,W
02C1:  MOVWF  32
....................       if (n==7) {var=var*1000000;}  
02C2:  MOVF   21,W
02C3:  SUBLW  07
02C4:  BTFSS  03.2
02C5:  GOTO   2E0
02C6:  MOVF   35,W
02C7:  MOVWF  39
02C8:  MOVF   34,W
02C9:  MOVWF  38
02CA:  MOVF   33,W
02CB:  MOVWF  37
02CC:  MOVF   32,W
02CD:  MOVWF  36
02CE:  CLRF   3D
02CF:  MOVLW  0F
02D0:  MOVWF  3C
02D1:  MOVLW  42
02D2:  MOVWF  3B
02D3:  MOVLW  40
02D4:  MOVWF  3A
02D5:  BCF    03.6
02D6:  CALL   056
02D7:  MOVF   7A,W
02D8:  BSF    03.6
02D9:  MOVWF  35
02DA:  MOVF   79,W
02DB:  MOVWF  34
02DC:  MOVF   78,W
02DD:  MOVWF  33
02DE:  MOVF   77,W
02DF:  MOVWF  32
....................       if (n==8) {var=var*10000000;}  
02E0:  MOVF   21,W
02E1:  SUBLW  08
02E2:  BTFSS  03.2
02E3:  GOTO   2FE
02E4:  MOVF   35,W
02E5:  MOVWF  39
02E6:  MOVF   34,W
02E7:  MOVWF  38
02E8:  MOVF   33,W
02E9:  MOVWF  37
02EA:  MOVF   32,W
02EB:  MOVWF  36
02EC:  CLRF   3D
02ED:  MOVLW  98
02EE:  MOVWF  3C
02EF:  MOVLW  96
02F0:  MOVWF  3B
02F1:  MOVLW  80
02F2:  MOVWF  3A
02F3:  BCF    03.6
02F4:  CALL   056
02F5:  MOVF   7A,W
02F6:  BSF    03.6
02F7:  MOVWF  35
02F8:  MOVF   79,W
02F9:  MOVWF  34
02FA:  MOVF   78,W
02FB:  MOVWF  33
02FC:  MOVF   77,W
02FD:  MOVWF  32
....................       tx_id= tx_id+var;  
02FE:  MOVF   32,W
02FF:  ADDWF  2E,F
0300:  MOVF   33,W
0301:  BTFSC  03.0
0302:  INCFSZ 33,W
0303:  ADDWF  2F,F
0304:  MOVF   34,W
0305:  BTFSC  03.0
0306:  INCFSZ 34,W
0307:  ADDWF  30,F
0308:  MOVF   35,W
0309:  BTFSC  03.0
030A:  INCFSZ 35,W
030B:  ADDWF  31,F
....................       n--;  
030C:  DECF   21,F
....................    }  
030D:  INCF   1F,F
030E:  GOTO   223
....................    txlen=buf_ser[a+2]-30;                                   //taille des donnees  
030F:  MOVLW  02
0310:  ADDWF  1E,W
0311:  ADDLW  A0
0312:  MOVWF  04
0313:  BCF    03.7
0314:  MOVLW  1E
0315:  SUBWF  00,W
0316:  MOVWF  22
....................    rflag=buf_ser[a+3]-30;                                   //indicateur  
0317:  MOVLW  03
0318:  ADDWF  1E,W
0319:  ADDLW  A0
031A:  MOVWF  04
031B:  BCF    03.7
031C:  MOVLW  1E
031D:  SUBWF  00,W
031E:  MOVWF  23
....................    j=a+4;  
031F:  MOVLW  04
0320:  ADDWF  1E,W
0321:  MOVWF  20
....................    for (i=0;i<txlen;i++){                                   //extraction des donnees  
0322:  CLRF   1F
0323:  MOVF   22,W
0324:  SUBWF  1F,W
0325:  BTFSC  03.0
0326:  GOTO   3B8
....................       a = buf_ser[j];  
0327:  MOVLW  A0
0328:  ADDWF  20,W
0329:  MOVWF  04
032A:  BCF    03.7
032B:  MOVF   00,W
032C:  MOVWF  1E
....................       if (a>=30 & a<=39){a=a-30;}  
032D:  MOVF   1E,W
032E:  SUBLW  1D
032F:  BTFSS  03.0
0330:  GOTO   333
0331:  MOVLW  00
0332:  GOTO   334
0333:  MOVLW  01
0334:  MOVWF  36
0335:  MOVF   1E,W
0336:  SUBLW  27
0337:  BTFSC  03.0
0338:  GOTO   33B
0339:  MOVLW  00
033A:  GOTO   33C
033B:  MOVLW  01
033C:  ANDWF  36,W
033D:  XORLW  00
033E:  BTFSC  03.2
033F:  GOTO   342
0340:  MOVLW  1E
0341:  SUBWF  1E,F
....................       if (a>=61 & a<=66){a=a-51;}  
0342:  MOVF   1E,W
0343:  SUBLW  3C
0344:  BTFSS  03.0
0345:  GOTO   348
0346:  MOVLW  00
0347:  GOTO   349
0348:  MOVLW  01
0349:  MOVWF  36
034A:  MOVF   1E,W
034B:  SUBLW  42
034C:  BTFSC  03.0
034D:  GOTO   350
034E:  MOVLW  00
034F:  GOTO   351
0350:  MOVLW  01
0351:  ANDWF  36,W
0352:  XORLW  00
0353:  BTFSC  03.2
0354:  GOTO   357
0355:  MOVLW  33
0356:  SUBWF  1E,F
....................       txbuf[i]=a;  
0357:  MOVLW  24
0358:  ADDWF  1F,W
0359:  MOVWF  04
035A:  BSF    03.7
035B:  MOVF   1E,W
035C:  MOVWF  00
....................       a = buf_ser[j+1];  
035D:  MOVLW  01
035E:  ADDWF  20,W
035F:  ADDLW  A0
0360:  MOVWF  04
0361:  BCF    03.7
0362:  MOVF   00,W
0363:  MOVWF  1E
....................       if (a>=30 & a<=39){a=a-30;}  
0364:  MOVF   1E,W
0365:  SUBLW  1D
0366:  BTFSS  03.0
0367:  GOTO   36A
0368:  MOVLW  00
0369:  GOTO   36B
036A:  MOVLW  01
036B:  MOVWF  36
036C:  MOVF   1E,W
036D:  SUBLW  27
036E:  BTFSC  03.0
036F:  GOTO   372
0370:  MOVLW  00
0371:  GOTO   373
0372:  MOVLW  01
0373:  ANDWF  36,W
0374:  XORLW  00
0375:  BTFSC  03.2
0376:  GOTO   379
0377:  MOVLW  1E
0378:  SUBWF  1E,F
....................       if (a>=61 & a<=66){a=a-51;}  
0379:  MOVF   1E,W
037A:  SUBLW  3C
037B:  BTFSS  03.0
037C:  GOTO   37F
037D:  MOVLW  00
037E:  GOTO   380
037F:  MOVLW  01
0380:  MOVWF  36
0381:  MOVF   1E,W
0382:  SUBLW  42
0383:  BTFSC  03.0
0384:  GOTO   387
0385:  MOVLW  00
0386:  GOTO   388
0387:  MOVLW  01
0388:  ANDWF  36,W
0389:  XORLW  00
038A:  BTFSC  03.2
038B:  GOTO   38E
038C:  MOVLW  33
038D:  SUBWF  1E,F
....................       txbuf[i+1]=a;  
038E:  MOVLW  01
038F:  ADDWF  1F,W
0390:  ADDLW  24
0391:  MOVWF  04
0392:  BSF    03.7
0393:  MOVF   1E,W
0394:  MOVWF  00
....................       a=txbuf[i+1]+16*txbuf[i];  
0395:  MOVLW  01
0396:  ADDWF  1F,W
0397:  ADDLW  24
0398:  MOVWF  04
0399:  BSF    03.7
039A:  MOVF   00,W
039B:  MOVWF  37
039C:  MOVLW  24
039D:  ADDWF  1F,W
039E:  MOVWF  04
039F:  BSF    03.7
03A0:  MOVF   00,W
03A1:  MOVWF  77
03A2:  SWAPF  77,F
03A3:  MOVLW  F0
03A4:  ANDWF  77,F
03A5:  MOVF   77,W
03A6:  ADDWF  37,W
03A7:  MOVWF  1E
....................       txbuf[i]=a;  
03A8:  MOVLW  24
03A9:  ADDWF  1F,W
03AA:  MOVWF  04
03AB:  BSF    03.7
03AC:  MOVF   1E,W
03AD:  MOVWF  00
....................       txbuf[i+1]=0;  
03AE:  MOVLW  01
03AF:  ADDWF  1F,W
03B0:  ADDLW  24
03B1:  MOVWF  04
03B2:  BSF    03.7
03B3:  CLRF   00
....................       j++;  
03B4:  INCF   20,F
....................       j++;  
03B5:  INCF   20,F
....................    }  
03B6:  INCF   1F,F
03B7:  GOTO   323
....................    can_putd(tx_id,&txbuf[0],txlen,3,1,rflag);               //envoie de la trame  
03B8:  MOVF   31,W
03B9:  MOVWF  39
03BA:  MOVF   30,W
03BB:  MOVWF  38
03BC:  MOVF   2F,W
03BD:  MOVWF  37
03BE:  MOVF   2E,W
03BF:  MOVWF  36
03C0:  MOVLW  01
03C1:  MOVWF  3B
03C2:  MOVLW  24
03C3:  MOVWF  3A
03C4:  MOVF   22,W
03C5:  MOVWF  3C
03C6:  MOVLW  03
03C7:  MOVWF  3D
03C8:  MOVLW  01
03C9:  MOVWF  3E
03CA:  MOVF   23,W
03CB:  MOVWF  3F
....................    purge_srxbuf();                                          //nettoyage  
*
0467:  BCF    03.6
0468:  CALL   1DC
0469:  NOP
046A:  BSF    03.6
.................... }  
....................   
.................... void init(){  
....................    can_init();  
....................    purge_srxbuf();  
*
060E:  CALL   1DC
060F:  BTFSC  28.7
0610:  BSF    0B.7
....................    setup_timer_2(T2_DIV_BY_16,246,16);                      // parametrage du timer 2  
0611:  MOVLW  78
0612:  MOVWF  78
0613:  IORLW  06
0614:  MOVWF  12
0615:  MOVLW  F6
0616:  BSF    03.5
0617:  MOVWF  12
....................    enable_interrupts(INT_TIMER2);                           // autorisation interruption timer2 100ms  
0618:  BSF    0C.1
....................    enable_interrupts(global);                               // autorisation de toutes les interruptions  
0619:  MOVLW  C0
061A:  BCF    03.5
061B:  IORWF  0B,F
....................    enable_interrupts(int_rda);                              // autorisation interruption liaison serie  
061C:  BSF    03.5
061D:  BSF    0C.5
.................... }  
061E:  BCF    03.5
061F:  BCF    0A.3
0620:  BCF    0A.4
0621:  GOTO   729 (RETURN)
....................   
.................... void purge_srxbuf(){  
....................    int i;  
....................    for (i=0;i<50;i++){buf_ser[i]=0;}  
*
01DC:  BSF    03.6
01DD:  CLRF   36
01DE:  MOVF   36,W
01DF:  SUBLW  31
01E0:  BTFSS  03.0
01E1:  GOTO   1E9
01E2:  MOVLW  A0
01E3:  ADDWF  36,W
01E4:  MOVWF  04
01E5:  BCF    03.7
01E6:  CLRF   00
01E7:  INCF   36,F
01E8:  GOTO   1DE
....................    is=0;  
01E9:  BCF    03.6
01EA:  CLRF   41
.................... }  
01EB:  RETLW  00
....................  

Configuration Fuses:
   Word  1: 3731   XT NOWDT PUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
