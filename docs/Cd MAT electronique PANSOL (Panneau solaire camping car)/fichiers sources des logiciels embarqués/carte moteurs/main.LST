CCS PCM C Compiler, Version 3.212, 26421               10-sept.-05 17:33

               Filename: C:\Dossier MAT Electronique\Programmes PIC applications MAT\Panneau solaire\source modules pic (version 2)\carte moteurs\main.LST

               ROM used: 2241 words (27%)
                         Largest free fragment is 2048
               RAM used: 66 (18%) at main() level
                         119 (33%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   52C
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.1
001C:  GOTO   01F
001D:  BTFSC  0C.1
001E:  GOTO   03E
001F:  MOVLW  8C
0020:  MOVWF  04
0021:  BTFSS  00.2
0022:  GOTO   025
0023:  BTFSC  0C.2
0024:  GOTO   041
0025:  MOVLW  8D
0026:  MOVWF  04
0027:  BTFSS  00.0
0028:  GOTO   02B
0029:  BTFSC  0D.0
002A:  GOTO   044
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  MOVWF  7B
0037:  MOVF   20,W
0038:  MOVWF  0A
0039:  SWAPF  21,W
003A:  MOVWF  03
003B:  SWAPF  7F,F
003C:  SWAPF  7F,W
003D:  RETFIE
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   087
0041:  BCF    0A.3
0042:  BCF    0A.4
0043:  GOTO   047
0044:  BCF    0A.3
0045:  BCF    0A.4
0046:  GOTO   068
....................  // version V2.0 du 31/07/2005  
.................... // maj : aucune  
....................   
.................... #include <16F876a.h> //mettre #include <16F876.h> si PIC16F876-04 // 
....................  //////// Standard Header file for the PIC16F876A device ////////////////  
.................... #device PIC16F876A  
.................... #list  
....................  
.................... #device ICD=TRUE  
.................... #device *=16  
.................... //#device adc=10  
.................... #use delay(clock=2500000)  
*
00C1:  MOVLW  5E
00C2:  MOVWF  04
00C3:  BCF    03.7
00C4:  MOVF   00,W
00C5:  BTFSC  03.2
00C6:  GOTO   0CD
00C7:  MOVLW  CF
00C8:  MOVWF  77
00C9:  DECFSZ 77,F
00CA:  GOTO   0C9
00CB:  DECFSZ 00,F
00CC:  GOTO   0C7
00CD:  RETLW  00
.................... #fuses XT, NOPROTECT, BROWNOUT, NOWDT  
.................... #zero_ram                              //remet la ram a 0 (initialise les variables a 0)  
....................   
.................... #include "can.c"                       //driver can a consulter pour bits utilises 
....................  /////////////////////////////////////////////////////////////////////////  
.................... ////                        can-mcp2510.c                            ////  
.................... //// CAN Library routines for Microchip's MCP2510 (and compatable)   ////  
.................... //// CAN IO expanders.                                               ////  
.................... ////                                                                 ////  
.................... //// This library provides the following functions:                  ////  
.................... ////  (for more information on these functions see the comment       ////  
.................... ////   header above each function)                                   ////  
.................... ////                                                                 ////  
.................... ////    can_init - Configures the MCP2510 CAN peripheral             ////  
.................... ////                                                                 ////  
.................... ////    can_set_baud - Sets the baud rate control registers          ////  
.................... ////                                                                 ////  
.................... ////    can_set_mode - Sets the CAN module into a specific mode      ////  
.................... ////                                                                 ////  
.................... ////    can_set_id - Sets the standard and extended ID               ////  
.................... ////                                                                 ////  
.................... ////    can_get_id - Gets the standard and extended ID               ////  
.................... ////                                                                 ////  
.................... ////    can_putd - Sends a message/request with specified ID         ////  
.................... ////                                                                 ////  
.................... ////    can_getd - Returns specifid message/request and ID           ////  
.................... ////                                                                 ////  
.................... ////    can_kbhit - Returns true if there is data in one of the      ////  
.................... ////                receive buffers                                  ////  
.................... ////                                                                 ////  
.................... ////    can_tbe - Returns true if the transmit buffer is ready to    ////  
.................... ////              send more data                                     ////  
.................... ////                                                                 ////  
.................... ////    can_abort - Aborts all pending transmissions                 ////  
.................... ////                                                                 ////  
.................... //// You will need a CAN transeiver to connect CANRX and CANTX       ////  
.................... //// pins to CANH and CANL bus lines.                                ////  
.................... ////                                                                 ////  
.................... //// CCS provides an example, ex_can_ccs_b.c, which shows how to use ////  
.................... //// this library with CCS's CAN Prototype board.                    ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////                                                                 ////  
.................... //// Version History                                                 ////  
.................... ////                                                                 ////  
.................... ////  Jul 27 04 - can_init() uses CAN_USE_EXTENDED_ID instead of     ////  
.................... ////              setting all RX filters to extended.                ////  
.................... ////                                                                 ////  
.................... ////  Apr 20 04 - Fixed a compling problem.                          ////  
.................... ////                                                                 ////  
.................... ////  Feb 24 04 - can_get_id() fixed for EID<18:20>.                 ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
.................... #include <can.h> 
....................  /////////////////////////////////////////////////////////////////////////  
.................... ////                        can-mcp2510.h                            ////  
.................... ////                                                                 ////  
.................... //// Prototypes, definitions, defines and macros used for and with   ////  
.................... //// the CCS CAN library for the MCP2510 (and compatable) CAN IO     ////  
.................... //// expanders.                                                      ////  
.................... ////                                                                 ////  
.................... //// (see can-mcp2510.c)                                             ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................   
....................   
.................... #ifndef CAN_DO_DEBUG  
....................  #define CAN_DO_DEBUG FALSE  
.................... #endif  
....................   
.................... #IFNDEF CAN_USE_EXTENDED_ID  
....................   #define CAN_USE_EXTENDED_ID         TRUE  
.................... #ENDIF  
....................   
.................... #IFNDEF CAN_BRG_SYNCH_JUMP_WIDTH  
....................   #define CAN_BRG_SYNCH_JUMP_WIDTH  0  //synchronized jump width (def: 1 x Tq)  
.................... #ENDIF  
....................   
.................... #IFNDEF CAN_BRG_PRESCALAR  
....................   #define CAN_BRG_PRESCALAR  4  //baud rate generator prescalar (def: 4) ( Tq = (2 x (PRE + 1))/Fosc )  
.................... #ENDIF  
....................   
.................... #ifndef CAN_BRG_SEG_2_PHASE_TS  
....................  #define CAN_BRG_SEG_2_PHASE_TS   TRUE //phase segment 2 time select bit (def: freely programmable)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_SAM  
....................  #define CAN_BRG_SAM 0 //sample of the can bus line (def: bus line is sampled 1 times prior to sample point)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PHASE_SEGMENT_1  
....................  #define CAN_BRG_PHASE_SEGMENT_1  5 //phase segment 1 (def: 6 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PROPAGATION_TIME  
....................  #define CAN_BRG_PROPAGATION_TIME 2 //propagation time select (def: 3 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_WAKE_FILTER  
....................  #define CAN_BRG_WAKE_FILTER FALSE   //selects can bus line filter for wake up bit  
.................... #endif  
....................   
.................... #ifndef CAN_BRG_PHASE_SEGMENT_2  
....................  #define CAN_BRG_PHASE_SEGMENT_2 5 //phase segment 2 time select (def: 6 x Tq)  
.................... #endif  
....................   
.................... #ifndef CAN_USE_RX_DOUBLE_BUFFER  
....................  #define CAN_USE_RX_DOUBLE_BUFFER TRUE   //if buffer 0 overflows, do NOT use buffer 1 to put buffer 0 data  
.................... #endif  
....................   
.................... #ifndef CAN_ENABLE_DRIVE_HIGH  
....................  #define CAN_ENABLE_DRIVE_HIGH 0  
.................... #endif  
....................   
.................... #ifndef CAN_ENABLE_CAN_CAPTURE  
....................  #define CAN_ENABLE_CAN_CAPTURE 0  
.................... #endif  
....................   
.................... enum CAN_OP_MODE {CAN_OP_CONFIG=4, CAN_OP_LISTEN=3, CAN_OP_LOOPBACK=2, CAN_OP_SLEEP=1, CAN_OP_NORMAL=0};  
....................   
.................... //can control  
.................... struct struct_CANCTRL {  
....................    int  clkpre:2; //0:1 //clkout pin prescalar  
....................    int1 clken; //2   //clkout pin enable  
....................    int1 void3; //3  
....................    int1 abat;  //4   //abort all pending transmissions  
....................    CAN_OP_MODE reqop:3; //5:7 //request operation mode  
.................... };  
.................... #define CANCTRL   0x0F  //or 1f, or 2f, or 3f ... or 7f  
....................   
.................... enum CAN_INT_CODE {CAN_INT_RX1=7, CAN_INT_RX0=6, CAN_INT_TX2=5, CAN_INT_TX1=4, CAN_INT_TX0=3, CAN_INT_WAKEUP=2, CAN_INT_ERROR=1, CAN_INT_NO=0};  
....................   
.................... //can status register READ-ONLY  
.................... struct struct_CANSTAT {  
.................... 	int1 void0;	//0  
.................... 	CAN_INT_CODE icode:3;	//1:3	//interrupt code  
.................... 	int1 void4;	//4  
.................... 	CAN_OP_MODE opmode:3;	//5:7	//operation mode status  
.................... };  
.................... #define CANSTAT 0x0E //or 1e, or 2e ... or 7e  
....................   
.................... //error flag register  
.................... struct struct_EFLG {  
.................... 	int1 ewarn;		//0 //error warning  
.................... 	int1 rxwar;		//1 //receiver warning  
.................... 	int1 txwar;		//2 //transmitter warning  
.................... 	int1 rxep;	//3 //receive error passive flag  
.................... 	int1 txep;	//4 //transmit error passive flag  
.................... 	int1 txbo;	//5	//bus off error flag  
.................... 	int1 rx0ovr;	//6	//receive buffer 0 overflow  
.................... 	int1 rx1ovr;	//7	//receive buffer 1 overflow  
.................... };  
.................... #define EFLG   0x2D  
....................   
.................... //interupt enable register  
.................... struct struct_CANINTE {  
....................    int1 rx0ie; //0   //receive buffer 0 full interrupt enable  
....................    int1 rx1ie; //1   //receive buffer 1 full interrupt enable  
....................    int1 tx0ie; //2   //transmit buffer 0 embty interrupt enable  
....................    int1 tx1ie; //3   //transmit buffer 1 embty interrupt enable  
....................    int1 tx2ie; //4   //transmit buffer 2 embty interrupt enable  
....................    int1 errie; //5   //error interrupt enable  
....................    int1 wakie; //6   //wakeup interrupt  enable  
....................    int1 merre; //7   //message error interrupt enable  
.................... };  
.................... #define CANINTE   0x2B  
....................   
.................... //interupt enable register  
.................... struct struct_CANINTF {  
....................    int1 rx0if; //0   //receive buffer 0 full interrupt flag  
....................    int1 rx1if; //1   //receive buffer 1 full interrupt flag  
....................    int1 tx0if; //2   //transmit buffer 0 embty interrupt flag  
....................    int1 tx1if; //3   //transmit buffer 1 embty interrupt flag  
....................    int1 tx2if; //4   //transmit buffer 2 embty interrupt flag  
....................    int1 errif; //5   //error interrupt flag  
....................    int1 wakif; //6   //wakeup interrupt flag  
....................    int1 merrf; //7   //message error interrupt flag  
.................... };  
.................... #define CANINTF   0x2C  
....................   
....................   
.................... //error counters  
.................... #define TEC    0x1C  
.................... #define REC    0x1D  
....................   
.................... //baud rate control register 1  
.................... struct struct_CNF1 {  
.................... 	int brp:6;	//0:5	//baud rate prescalar  
.................... 	int sjw:2;	//6:7	//synchronized jump width  
.................... };  
.................... #define CNF1   0x2A  
....................   
.................... //baud rate control register 2  
.................... struct struct_CNF2 {  
.................... 	int prseg:3; //0:2 //propagation time select  
.................... 	int phseg1:3; //3:5 //phase segment 1  
.................... 	int1 sam; //6 //sample of the can bus line  
.................... 	int1 btlmode; //7 //phase segment 2 bit time length  
.................... };  
.................... #define CNF2   0x29  
....................   
.................... //baud rate control register 3  
.................... struct struct_CNF3 {  
.................... 	int phseg2:3;	//0:2	//phase segment 2 time select  
.................... 	int void543:3;	//3:5  
.................... 	int1 wakfil;	//6 //selects can bus line filter for wake-up  
.................... 	int1 void7;	//7  
.................... };  
.................... #define CNF3   0x28  
.................... //can i/o control register  
....................   
.................... //transmit buffer n control register  
.................... struct txbNctrl_struct {  
.................... 	int  txpri:2;	//0:1	//transmit priority bits  
.................... 	int1 void2; //2  
.................... 	int1 txreq;	//3	//transmit request status (clear to request message abort)  
.................... 	int1 txerr;	//4	//transmission error detected  
.................... 	int1 mloa;	//5	//message lost arbitration  
.................... 	int1 abtf;	//6	//message was aborted / or transmitted succesfully  
.................... 	int1 void7;  
.................... };  
.................... #define TXB0CTRL  0x30  
.................... #define TXB1CTRL  0x40  
.................... #define TXB2CTRL  0x50  
....................   
.................... //TXnRTS pin control and status register  
.................... struct struct_TXRTSCTRL {  
....................    int1 b0rtsm; //0  //1=request message trans, 0=digital  
....................    int1 b1rtsm; //1  //1=request message trans, 0=digital  
....................    int1 b2rtsm; //2  //1=request message trans, 0=digital  
....................    int1 b0rts; //3   //reads as tx2rts when in digital, 0 when in rts  
....................    int1 b1rts; //4   //reads as tx2rts when in digital, 0 when in rts mode  
....................    int1 b2rts; //5  //reads as tx2rts when in digital, 0 when in rts mode  
....................    int  void67:2; //6:7  
.................... };  
.................... #define TXRTSCTRL 0x0D  
....................   
.................... //transmit buffer n standard identifier  
.................... #define TXB0SIDH 0x31  
.................... #define TXB0SIDL 0x32  
.................... #define TXB1SIDH 0x41  
.................... #define TXB1SIDL 0x42  
.................... #define TXB2SIDH 0x51  
.................... #define TXB2SIDL 0x52  
....................   
.................... //transmit buffer n extended identifier  
.................... #define TXB0EIDH 0x33  
.................... #define TXB0EIDL 0x34  
.................... #define TXB1EIDH 0x43  
.................... #define TXB1EIDL 0x44  
.................... #define TXB2EIDH 0x53  
.................... #define TXB2EIDL 0x54  
....................   
.................... //transmit buffer n data byte m  
.................... #define TXB0D0 0x36  
.................... #define TXB0D7 0x3D  
....................   
.................... #define TXB1D0 0x46  
.................... #define TXB1D7 0x4D  
....................   
.................... #define TXB2D0 0x56  
.................... #define TXB2D7 0x5D  
....................   
.................... //transmit buffer n data length  
.................... struct txbNdlc_struct {  
.................... 	int dlc:4;	//0:3  
.................... 	int void54:2; //4:5  
.................... 	int1 rtr; //6 //transmission frame remote tranmission  
.................... 	int1 void7; //7  
.................... };  
.................... #define TXB0DLC 0x35  
.................... #define TXB1DLC 0x45  
.................... #define TXB2DLC 0x55  
....................   
.................... //#byte TXBaDLC=0xF65  //txbXdlc when in the access bank  
....................   
....................   
.................... //transmit error count register  
.................... #byte TXERRCNT=0xF76  
....................   
....................   
.................... enum CAN_RX_MODE {CAN_RX_ALL=3, CAN_RX_EXT=2, CAN_RX_STD=1, CAN_RX_VALID=0};  
....................   
.................... //receive buffer 0 control register  
.................... struct struct_RXB0CTRL {  
.................... 	int1 filhit0;	//0 //filter hit  
.................... 	int1 bukt1;	//1 //read only copy of bukt bit (used internally by mcp2510)  
.................... 	int1 bukt;	//2 //rollover enable  
.................... 	int1 rxrtr;	//3 //receive remote transfer request  
.................... 	int1 void4;	//4  
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receiver buffer mode  
.................... 	int1 void7;	//7 //receive full status  
.................... };  
.................... #define RXB0CTRL  0x60  
....................   
.................... //receive buffer 1 control register  
.................... struct struct_RXB1CTRL {  
.................... 	int filhit0:3;	//0:2  
.................... 	int1 rxrtr;	//3 //receive remote transfer request  
.................... 	int1 void4;	//4  
.................... 	CAN_RX_MODE rxm:2;	//5:6 //receive buffer mode  
.................... 	int1 void7;	//7  
.................... };  
.................... #define RXB1CTRL 0x70  
....................   
.................... //RXnBF pint control and status register  
.................... struct struct_BFPCTRL {  
....................    int1  b0bfm; //0   //1=pin is interrupt when message loaded into rxb0, 0=digital  
....................    int1  b1bfm; //1   //1=pin is interrupt when message loaded into rxb1, 0=digital  
....................    int1  b0bfe; //2   //rx0bf pin function enable  
....................    int1  b1bfe; //3   //rx1bf pin function enable  
....................    int1  b0bfs; //4   //rx0bf pin state  
....................    int1  b1bfs; //5   //rx1bf pin state  
.................... };  
....................   
.................... //receive buffer n standard identifier  
.................... #define	RXB0SIDH  0x61  
.................... #define	RXB0SIDL  0x62  
....................   
.................... #define	RXB1SIDH  0x71  
.................... #define	RXB1SIDL  0x72  
....................   
.................... //receive buffer n extended identifier  
.................... #define	RXB0EID8  0x63  
.................... #define	RXB0EID0  0x64  
....................   
.................... #define	RXB1EID8  0x73  
.................... #define	RXB1EID0  0x74  
....................   
.................... struct struct_TXRXBaSIDL {  
....................    int void012:3; //0:2  
....................    int1 ext;      //3 //extendid id  
....................    int1 srr;      //4 //substitute remove request bit  
....................    int void567:3; //5:7  
.................... };  
....................   
.................... //receive buffer n data length code register  
.................... struct rxbNdlc_struct {  
.................... 	int dlc:4;	//0:3 //data length code  
.................... 	int1 rb0;   //4   //reserved  
.................... 	int1 rb1;	//5   //reserved  
.................... 	int1 rtr;	//6   //receiver remote transmission request bit  
.................... 	int1 void7;	//7  
.................... };  
.................... #define	RXB0DLC   0x65  
.................... #define	RXB1DLC   0x75  
....................   
.................... //receive buffer n data field byte m register  
.................... #define RXB0D0    0x66  
.................... #define RXB0D7    0x6D  
....................   
.................... #define RXB1D0    0x76  
.................... #define RXB1D7    0x7D  
....................   
....................   
.................... //receive acceptance filter n standard indifier  
.................... #define RXF0SIDH  0x00  
.................... #define RXF0SIDL  0x01  
.................... #define RXF1SIDH  0x04  
.................... #define RXF1SIDL  0x05  
.................... #define RXF2SIDH  0x08  
.................... #define RXF2SIDL  0x09  
.................... #define RXF3SIDH  0x10  
.................... #define RXF3SIDL  0x11  
.................... #define RXF4SIDH  0x14  
.................... #define RXF4SIDL  0x15  
.................... #define RXF5SIDH  0x18  
.................... #define RXF5SIDL  0x19  
....................   
.................... //receive acceptance filter n extended indifier  
.................... #define RXF0EIDH  0x02  
.................... #define RXF0EIDL  0x03  
.................... #define RXF1EIDH  0x06  
.................... #define RXF1EIDL  0x07  
.................... #define RXF2EIDH  0x0a  
.................... #define RXF2EIDL  0x0b  
.................... #define RXF3EIDH  0x12  
.................... #define RXF3EIDL  0x13  
.................... #define RXF4EIDH  0x16  
.................... #define RXF4EIDL  0x17  
.................... #define RXF5EIDH  0x1a  
.................... #define RXF5EIDL  0x1b  
....................   
.................... //receive acceptance mask n standard identifer mask  
.................... #define RXM0SIDH  0x20  
.................... #define RXM0SIDL  0x21  
.................... #define RXM1SIDH  0x24  
.................... #define RXM1SIDL  0x25  
....................   
.................... //receive acceptance mask n extended identifer mask  
.................... #define RXM0EIDH  0x22  
.................... #define RXM0EIDL  0x23  
.................... #define RXM1EIDH  0x26  
.................... #define RXM1EIDL  0x27  
....................   
.................... #define RX0MASK       RXM0EIDL   //rxm0eidl  
.................... #define RX1MASK       RXM1EIDL   //rxm1eidl  
.................... #define RX0FILTER0    RXF0EIDL   //rxf0eidl  
.................... #define RX0FILTER1    RXF1EIDL   //rxf1eidl  
.................... #define RX1FILTER2    RXF2EIDL   //rxf2eidl  
.................... #define RX1FILTER3    RXF3EIDL   //rxf3eidl  
.................... #define RX1FILTER4    RXF4EIDL   //rxf4eidl  
.................... #define RX1FILTER5    RXF5EIDL   //rxf5eidl  
.................... #define RXB0ID        RXB0EIDL   //rxb0eidl  
.................... #define RXB1ID        RXB1EIDL   //rxb1eidl  
.................... #define TXB0ID        TXB0EIDL   //txb0eidl  
.................... #define TXB1ID        TXB1EIDL   //txb1eidl  
.................... #define TXB2ID        TXB2EIDL   //tsb2eidl  
....................   
.................... //value to put in mask field to accept all incoming id's  
.................... #define CAN_MASK_ACCEPT_ALL   0  
....................   
....................   
.................... //PROTOTYPES and MACROS  
....................   
.................... struct rx_stat {  
....................    int1 err_ovfl;  
....................    int filthit:3;  
....................    int1 buffer;  
....................    int1 rtr;  
....................    int1 ext;  
....................    int1 inv;  
.................... };  
....................   
.................... /* variables bus can */  
.................... int32 crx_id;  
.................... int crxbuf[8];  
.................... int ctxbuf[8];  
.................... int ic,crx_len;  
.................... struct rx_stat rxstat;  
....................   
....................   
.................... void  can_init(void);  
.................... void  can_set_baud(void);  
.................... void  can_set_mode(CAN_OP_MODE mode);  
.................... void can_set_id(int addr, int32 id, int1 ext);  
.................... int32 can_get_id(int addr, int1 ext);  
.................... int   can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr);  
.................... int1  can_getd(int32 & id, int * data, int & len, struct rx_stat & stat);  
....................   
.................... void mcp2510_init();  
.................... void mcp2510_command(int command);  
.................... void mcp2510_write(int address, int data);  
.................... int mcp2510_status(void);  
.................... int mcp2510_read(int address);  
....................   
....................   
....................  
....................   
.................... //IO pins connected to MCP2510  
.................... #ifndef EXT_CAN_CS  
....................    #define EXT_CAN_CS   PIN_B3  
....................    #define EXT_CAN_SI   PIN_C5  
....................    #define EXT_CAN_SO   PIN_C4  
....................    #define EXT_CAN_SCK  PIN_C3  
.................... //   #define EXT_CAN_RESET   PIN_B5 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX0RTS  PIN_C4 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX1RTS  PIN_B4 //CCS library does not use this pin by default  
.................... //   #define EXT_CAN_TX2RTS  PIN_C2 //CCS library does not use this pin by default  
.................... #endif  
....................   
.................... #if CAN_DO_DEBUG  
....................  #define can_debug printf  
.................... #else  
....................  #define can_debug  
.................... #endif  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_init()  
.................... //  
.................... // Initializes MCP2510 CAN peripheral.  Sets the RX filter and masks so the  
.................... // CAN peripheral will receive all incoming IDs.  Configures both RX buffers  
.................... // to only accept valid valid messages (as opposed to all messages, or all  
.................... // extended message, or all standard messages).  
.................... //  
.................... // The constants (CAN_USE_RX_DOUBLE_BUFFER, CAN_ENABLE_DRIVE_HIGH,  
.................... // CAN_ENABLE_CAN_CAPTURE, etc) are given a default define in the can-mcp2510.h file.  
.................... // These default values can be overwritten in the main code, but most  
.................... // applications will be fine with these defaults.  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... void can_init(void) {  
....................    struct struct_RXB0CTRL b_rxb0ctrl;  
....................   
....................    mcp2510_init();  
....................   
....................    can_set_mode(CAN_OP_CONFIG);   //must be in config mode before params can be set  
*
0281:  MOVLW  04
0282:  MOVWF  5E
0283:  CALL   159
....................    can_set_baud();  
....................   
....................    b_rxb0ctrl=0;  
*
02B6:  CLRF   5D
....................    b_rxb0ctrl.rxm=CAN_RX_VALID;  
02B7:  MOVLW  9F
02B8:  ANDWF  5D,W
02B9:  MOVWF  5D
....................    b_rxb0ctrl.bukt=CAN_USE_RX_DOUBLE_BUFFER;  
02BA:  BSF    5D.2
....................    mcp2510_write(RXB0CTRL, (int)b_rxb0ctrl);  
02BB:  MOVLW  60
02BC:  BSF    03.5
02BD:  MOVWF  2C
02BE:  BCF    03.5
02BF:  MOVF   5D,W
02C0:  BSF    03.5
02C1:  MOVWF  2D
02C2:  BCF    03.5
02C3:  CALL   125
....................    mcp2510_write(RXB1CTRL, (int)b_rxb0ctrl);  
02C4:  MOVLW  70
02C5:  BSF    03.5
02C6:  MOVWF  2C
02C7:  BCF    03.5
02C8:  MOVF   5D,W
02C9:  BSF    03.5
02CA:  MOVWF  2D
02CB:  BCF    03.5
02CC:  CALL   125
....................   
....................    //if you want to configure the TXnRTS pins, do it here.  default is off  
....................   
....................    can_set_id(RX0MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 0 (RX BUFFER 0)  
02CD:  MOVLW  23
02CE:  MOVWF  73
02CF:  BSF    03.5
02D0:  CLRF   23
02D1:  CLRF   22
02D2:  CLRF   21
02D3:  CLRF   20
02D4:  MOVLW  01
02D5:  MOVWF  74
02D6:  BCF    03.5
02D7:  CALL   182
....................    can_set_id(RX0FILTER0, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 0 (RX BUFFER 0)  
02D8:  MOVLW  03
02D9:  MOVWF  73
02DA:  BSF    03.5
02DB:  CLRF   23
02DC:  CLRF   22
02DD:  CLRF   21
02DE:  CLRF   20
02DF:  MOVLW  01
02E0:  MOVWF  74
02E1:  BCF    03.5
02E2:  CALL   182
....................    can_set_id(RX0FILTER1, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 0 (RX BUFFER 0)  
02E3:  MOVLW  07
02E4:  MOVWF  73
02E5:  BSF    03.5
02E6:  CLRF   23
02E7:  CLRF   22
02E8:  CLRF   21
02E9:  CLRF   20
02EA:  MOVLW  01
02EB:  MOVWF  74
02EC:  BCF    03.5
02ED:  CALL   182
....................   
....................    can_set_id(RX1MASK, CAN_MASK_ACCEPT_ALL, CAN_USE_EXTENDED_ID);  //set mask 1 (RX BUFFER 1)  
02EE:  MOVLW  27
02EF:  MOVWF  73
02F0:  BSF    03.5
02F1:  CLRF   23
02F2:  CLRF   22
02F3:  CLRF   21
02F4:  CLRF   20
02F5:  MOVLW  01
02F6:  MOVWF  74
02F7:  BCF    03.5
02F8:  CALL   182
....................    can_set_id(RX1FILTER2, 0, CAN_USE_EXTENDED_ID);  //set filter 0 of mask 1 (RX BUFFER 1)  
02F9:  MOVLW  0B
02FA:  MOVWF  73
02FB:  BSF    03.5
02FC:  CLRF   23
02FD:  CLRF   22
02FE:  CLRF   21
02FF:  CLRF   20
0300:  MOVLW  01
0301:  MOVWF  74
0302:  BCF    03.5
0303:  CALL   182
....................    can_set_id(RX1FILTER3, 0, CAN_USE_EXTENDED_ID);  //set filter 1 of mask 1 (RX BUFFER 1)  
0304:  MOVLW  13
0305:  MOVWF  73
0306:  BSF    03.5
0307:  CLRF   23
0308:  CLRF   22
0309:  CLRF   21
030A:  CLRF   20
030B:  MOVLW  01
030C:  MOVWF  74
030D:  BCF    03.5
030E:  CALL   182
....................    can_set_id(RX1FILTER4, 0, CAN_USE_EXTENDED_ID);  //set filter 2 of mask 1 (RX BUFFER 1)  
030F:  MOVLW  17
0310:  MOVWF  73
0311:  BSF    03.5
0312:  CLRF   23
0313:  CLRF   22
0314:  CLRF   21
0315:  CLRF   20
0316:  MOVLW  01
0317:  MOVWF  74
0318:  BCF    03.5
0319:  CALL   182
....................    can_set_id(RX1FILTER5, 0, CAN_USE_EXTENDED_ID);  //set filter 3 of mask 1 (RX BUFFER 1)  
031A:  MOVLW  1B
031B:  MOVWF  73
031C:  BSF    03.5
031D:  CLRF   23
031E:  CLRF   22
031F:  CLRF   21
0320:  CLRF   20
0321:  MOVLW  01
0322:  MOVWF  74
0323:  BCF    03.5
0324:  CALL   182
....................   
....................    can_set_mode(CAN_OP_NORMAL);  
0325:  CLRF   5E
0326:  CALL   159
0327:  NOP
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_set_baud()  
.................... //  
.................... // Configures the baud rate control registers.  All the defines here  
.................... // are defaulted in the can-mcp2510.h file.  These defaults can, and  
.................... // probably should, be overwritten in the main code.  
.................... //  
.................... // Current defaults are set to work with CCS's CAN Prototype board and  
.................... // Microchip's MCP250xxx CAN Developers Kit if this PIC is running at 20Mhz.  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... void can_set_baud(void) {  
....................    struct struct_CNF1 new_CNF1;  
....................    struct struct_CNF2 new_CNF2;  
....................    struct struct_CNF3 new_CNF3;  
....................   
....................   
....................    new_CNF1.brp=CAN_BRG_PRESCALAR;  
*
0284:  MOVLW  C0
0285:  ANDWF  5E,W
0286:  IORLW  04
0287:  MOVWF  5E
....................    new_CNF1.sjw=CAN_BRG_SYNCH_JUMP_WIDTH;  
0288:  MOVLW  3F
0289:  ANDWF  5E,W
028A:  MOVWF  5E
....................   
....................    new_CNF2.prseg=CAN_BRG_PROPAGATION_TIME;  
028B:  MOVLW  F8
028C:  ANDWF  5F,W
028D:  IORLW  02
028E:  MOVWF  5F
....................    new_CNF2.phseg1=CAN_BRG_PHASE_SEGMENT_1;  
028F:  MOVLW  C7
0290:  ANDWF  5F,W
0291:  IORLW  28
0292:  MOVWF  5F
....................    new_CNF2.sam=CAN_BRG_SAM;  
0293:  BCF    5F.6
....................    new_CNF2.btlmode=CAN_BRG_SEG_2_PHASE_TS;  
0294:  BSF    5F.7
....................   
....................    new_CNF3.phseg2=CAN_BRG_PHASE_SEGMENT_2;  
0295:  MOVLW  F8
0296:  ANDWF  60,W
0297:  IORLW  05
0298:  MOVWF  60
....................    new_CNF3.wakfil=CAN_BRG_WAKE_FILTER;  
0299:  BCF    60.6
....................   
....................    mcp2510_write(CNF1, (int)new_CNF1);  
029A:  MOVLW  2A
029B:  BSF    03.5
029C:  MOVWF  2C
029D:  BCF    03.5
029E:  MOVF   5E,W
029F:  BSF    03.5
02A0:  MOVWF  2D
02A1:  BCF    03.5
02A2:  CALL   125
....................    mcp2510_write(CNF2, (int)new_CNF2);  
02A3:  MOVLW  29
02A4:  BSF    03.5
02A5:  MOVWF  2C
02A6:  BCF    03.5
02A7:  MOVF   5F,W
02A8:  BSF    03.5
02A9:  MOVWF  2D
02AA:  BCF    03.5
02AB:  CALL   125
....................    mcp2510_write(CNF3, (int)new_CNF3);  
02AC:  MOVLW  28
02AD:  BSF    03.5
02AE:  MOVWF  2C
02AF:  BCF    03.5
02B0:  MOVF   60,W
02B1:  BSF    03.5
02B2:  MOVWF  2D
02B3:  BCF    03.5
02B4:  CALL   125
02B5:  NOP
.................... }  
....................   
.................... void can_set_mode(CAN_OP_MODE mode) {  
....................    struct struct_CANCTRL old_CANCTRL;  
....................   
....................    old_CANCTRL=mcp2510_read(CANCTRL);  
*
0159:  MOVLW  0F
015A:  BSF    03.5
015B:  MOVWF  2B
015C:  BCF    03.5
015D:  CALL   0CE
015E:  MOVF   78,W
015F:  MOVWF  5F
....................   
....................    old_CANCTRL.reqop=mode;  
0160:  SWAPF  5E,W
0161:  ANDLW  70
0162:  MOVWF  77
0163:  BCF    03.0
0164:  RLF    77,F
0165:  MOVLW  1F
0166:  ANDWF  5F,W
0167:  IORWF  77,W
0168:  MOVWF  5F
....................   
....................    mcp2510_write(CANCTRL, (int)old_CANCTRL);  
0169:  MOVLW  0F
016A:  BSF    03.5
016B:  MOVWF  2C
016C:  BCF    03.5
016D:  MOVF   5F,W
016E:  BSF    03.5
016F:  MOVWF  2D
0170:  BCF    03.5
0171:  CALL   125
....................   
....................    do {  
....................       old_CANCTRL=mcp2510_read(CANCTRL);  
0172:  MOVLW  0F
0173:  BSF    03.5
0174:  MOVWF  2B
0175:  BCF    03.5
0176:  CALL   0CE
0177:  MOVF   78,W
0178:  MOVWF  5F
....................    } while (old_CANCTRL.reqop != mode);  
0179:  MOVF   5F,W
017A:  MOVWF  77
017B:  SWAPF  77,F
017C:  RRF    77,W
017D:  ANDLW  07
017E:  SUBWF  5E,W
017F:  BTFSS  03.2
0180:  GOTO   172
.................... }  
0181:  RETLW  00
....................   
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_set_id()  
.................... //  
.................... // Configures the xxxxEIDL, xxxxEIDH, xxxxSIDL and xxxxSIDH registers to  
.................... // configure the defined buffer to use the specified ID  
.................... //  
.................... //   Paramaters:  
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL.  
.................... //            For example, a pointer to RXM1EIDL  
.................... //     id - ID to set buffer to  
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... void can_set_id(int addr, int32 id, int1 ext) {  
....................    int converted_id[4];  
....................    int *ptr;  
....................   
....................    ptr=&converted_id[3];   //3=eidl, 2=eidh, 1=sidl, 0=sidh  
0182:  CLRF   76
0183:  MOVLW  A7
0184:  MOVWF  75
....................   
....................    if (ext) {  //extended  
0185:  MOVF   74,F
0186:  BTFSC  03.2
0187:  GOTO   1E3
....................       //eidl  
....................       *ptr=make8(id,0); //0:7  
0188:  MOVF   75,W
0189:  MOVWF  04
018A:  BCF    03.7
018B:  BTFSC  76.0
018C:  BSF    03.7
018D:  BSF    03.5
018E:  MOVF   20,W
018F:  MOVWF  00
....................   
....................       //eidh  
....................       ptr--;  
0190:  MOVF   75,W
0191:  BTFSC  03.2
0192:  DECF   76,F
0193:  DECF   75,F
....................       *ptr=make8(id,1); //8:15  
0194:  MOVF   75,W
0195:  MOVWF  04
0196:  BCF    03.7
0197:  BTFSC  76.0
0198:  BSF    03.7
0199:  MOVF   21,W
019A:  MOVWF  00
....................   
....................       //sidl  
....................       ptr--;  
019B:  MOVF   75,W
019C:  BTFSC  03.2
019D:  DECF   76,F
019E:  DECF   75,F
....................       *ptr=make8(id,2) & 0x03;   //16:17  
019F:  MOVF   75,W
01A0:  MOVWF  04
01A1:  BCF    03.7
01A2:  BTFSC  76.0
01A3:  BSF    03.7
01A4:  MOVF   22,W
01A5:  ANDLW  03
01A6:  MOVWF  00
....................       *ptr|=(make8(id,2) << 3) & 0xE0; //18:20  
01A7:  MOVF   75,W
01A8:  MOVWF  04
01A9:  BCF    03.7
01AA:  BTFSC  76.0
01AB:  BSF    03.7
01AC:  MOVF   22,W
01AD:  MOVWF  77
01AE:  RLF    77,F
01AF:  RLF    77,F
01B0:  RLF    77,F
01B1:  MOVLW  F8
01B2:  ANDWF  77,F
01B3:  MOVF   77,W
01B4:  ANDLW  E0
01B5:  IORWF  00,W
01B6:  MOVWF  00
....................       *ptr|=0x08;  
01B7:  MOVF   75,W
01B8:  MOVWF  04
01B9:  BCF    03.7
01BA:  BTFSC  76.0
01BB:  BSF    03.7
01BC:  MOVF   00,W
01BD:  IORLW  08
01BE:  MOVWF  00
....................   
....................   
....................       //sidh  
....................       ptr--;  
01BF:  MOVF   75,W
01C0:  BTFSC  03.2
01C1:  DECF   76,F
01C2:  DECF   75,F
....................       *ptr=((make8(id,2) >> 5) & 0x07 ); //21:23  
01C3:  MOVF   75,W
01C4:  MOVWF  04
01C5:  BCF    03.7
01C6:  BTFSC  76.0
01C7:  BSF    03.7
01C8:  MOVF   22,W
01C9:  MOVWF  77
01CA:  SWAPF  77,F
01CB:  RRF    77,F
01CC:  MOVLW  07
01CD:  ANDWF  77,F
01CE:  MOVF   77,W
01CF:  ANDLW  07
01D0:  MOVWF  00
....................       *ptr|=((make8(id,3) << 3) & 0xF8);//24:28  
01D1:  MOVF   75,W
01D2:  MOVWF  04
01D3:  BCF    03.7
01D4:  BTFSC  76.0
01D5:  BSF    03.7
01D6:  MOVF   23,W
01D7:  MOVWF  77
01D8:  RLF    77,F
01D9:  RLF    77,F
01DA:  RLF    77,F
01DB:  MOVLW  F8
01DC:  ANDWF  77,F
01DD:  MOVF   77,W
01DE:  ANDLW  F8
01DF:  IORWF  00,W
01E0:  MOVWF  00
....................    }  
....................    else {   //standard  
01E1:  GOTO   228
01E2:  BCF    03.5
....................       //eidl  
....................       *ptr=0;  
01E3:  MOVF   75,W
01E4:  MOVWF  04
01E5:  BCF    03.7
01E6:  BTFSC  76.0
01E7:  BSF    03.7
01E8:  CLRF   00
....................   
....................       //eidh  
....................       ptr--;  
01E9:  MOVF   75,W
01EA:  BTFSC  03.2
01EB:  DECF   76,F
01EC:  DECF   75,F
....................       *ptr=0;  
01ED:  MOVF   75,W
01EE:  MOVWF  04
01EF:  BCF    03.7
01F0:  BTFSC  76.0
01F1:  BSF    03.7
01F2:  CLRF   00
....................   
....................       //sidl  
....................       ptr--;  
01F3:  MOVF   75,W
01F4:  BTFSC  03.2
01F5:  DECF   76,F
01F6:  DECF   75,F
....................       *ptr=(make8(id,0) << 5) & 0xE0;  
01F7:  MOVF   75,W
01F8:  MOVWF  04
01F9:  BCF    03.7
01FA:  BTFSC  76.0
01FB:  BSF    03.7
01FC:  BSF    03.5
01FD:  MOVF   20,W
01FE:  MOVWF  77
01FF:  SWAPF  77,F
0200:  RLF    77,F
0201:  MOVLW  E0
0202:  ANDWF  77,F
0203:  MOVF   77,W
0204:  ANDLW  E0
0205:  MOVWF  00
....................   
....................       //sidh  
....................       ptr--;  
0206:  MOVF   75,W
0207:  BTFSC  03.2
0208:  DECF   76,F
0209:  DECF   75,F
....................       *ptr=(make8(id,0) >> 3) & 0x1F;  
020A:  MOVF   75,W
020B:  MOVWF  04
020C:  BCF    03.7
020D:  BTFSC  76.0
020E:  BSF    03.7
020F:  MOVF   20,W
0210:  MOVWF  77
0211:  RRF    77,F
0212:  RRF    77,F
0213:  RRF    77,F
0214:  MOVLW  1F
0215:  ANDWF  77,F
0216:  MOVF   77,W
0217:  ANDLW  1F
0218:  MOVWF  00
....................       *ptr|=(make8(id,1) << 5) & 0xE0;  
0219:  MOVF   75,W
021A:  MOVWF  04
021B:  BCF    03.7
021C:  BTFSC  76.0
021D:  BSF    03.7
021E:  MOVF   21,W
021F:  MOVWF  77
0220:  SWAPF  77,F
0221:  RLF    77,F
0222:  MOVLW  E0
0223:  ANDWF  77,F
0224:  MOVF   77,W
0225:  ANDLW  E0
0226:  IORWF  00,W
0227:  MOVWF  00
....................    }  
....................   
....................    //0=eidl, 1=eidh, 2=sidl, 3=sidh  
....................    mcp2510_write(addr--, converted_id[3]);  
0228:  MOVF   73,W
0229:  DECF   73,F
022A:  MOVWF  28
022B:  MOVWF  2C
022C:  MOVF   27,W
022D:  MOVWF  2D
022E:  BCF    03.5
022F:  CALL   125
....................    mcp2510_write(addr--, converted_id[2]);  
0230:  MOVF   73,W
0231:  DECF   73,F
0232:  BSF    03.5
0233:  MOVWF  28
0234:  MOVWF  2C
0235:  MOVF   26,W
0236:  MOVWF  2D
0237:  BCF    03.5
0238:  CALL   125
....................    mcp2510_write(addr--, converted_id[1]);  
0239:  MOVF   73,W
023A:  DECF   73,F
023B:  BSF    03.5
023C:  MOVWF  28
023D:  MOVWF  2C
023E:  MOVF   25,W
023F:  MOVWF  2D
0240:  BCF    03.5
0241:  CALL   125
....................    mcp2510_write(addr, converted_id[0]);  
0242:  MOVF   73,W
0243:  BSF    03.5
0244:  MOVWF  2C
0245:  MOVF   24,W
0246:  MOVWF  2D
0247:  BCF    03.5
0248:  CALL   125
.................... }  
0249:  RETLW  00
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_get_id()  
.................... //  
.................... // Returns the ID of the specified buffer.  (The opposite of can_set_id())  
.................... // This is used after receiving a message, to see which ID sent the message.  
.................... //  
.................... //   Paramaters:  
.................... //     addr - pointer to first byte of ID register, starting with xxxxEIDL.  
.................... //            For example, a pointer to RXM1EIDL  
.................... //     ext - Set to TRUE if this buffer uses an extended ID, FALSE if not  
.................... //  
.................... //   Returns:  
.................... //     The ID of the buffer  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int32 can_get_id(int addr, int1 ext) {  
....................    int32 ret;  
....................    int * ptr;  
....................    int converted_id[4];  
....................   
....................    ptr=&converted_id[3];   //3=eidl, 2=eidh, 1=sidl, 0=sidh  
*
08AE:  CLRF   75
08AF:  MOVLW  A7
08B0:  MOVWF  74
....................   
....................    converted_id[3]=mcp2510_read(addr--);  
08B1:  MOVF   72,W
08B2:  DECF   72,F
08B3:  BSF    03.5
08B4:  MOVWF  28
08B5:  MOVWF  2B
08B6:  BCF    0A.3
08B7:  BCF    03.5
08B8:  CALL   0CE
08B9:  BSF    0A.3
08BA:  MOVF   78,W
08BB:  BSF    03.5
08BC:  MOVWF  27
....................    converted_id[2]=mcp2510_read(addr--);  
08BD:  MOVF   72,W
08BE:  DECF   72,F
08BF:  MOVWF  28
08C0:  MOVWF  2B
08C1:  BCF    0A.3
08C2:  BCF    03.5
08C3:  CALL   0CE
08C4:  BSF    0A.3
08C5:  MOVF   78,W
08C6:  BSF    03.5
08C7:  MOVWF  26
....................    converted_id[1]=mcp2510_read(addr--);  
08C8:  MOVF   72,W
08C9:  DECF   72,F
08CA:  MOVWF  28
08CB:  MOVWF  2B
08CC:  BCF    0A.3
08CD:  BCF    03.5
08CE:  CALL   0CE
08CF:  BSF    0A.3
08D0:  MOVF   78,W
08D1:  BSF    03.5
08D2:  MOVWF  25
....................    converted_id[0]=mcp2510_read(addr);  
08D3:  MOVF   72,W
08D4:  MOVWF  2B
08D5:  BCF    0A.3
08D6:  BCF    03.5
08D7:  CALL   0CE
08D8:  BSF    0A.3
08D9:  MOVF   78,W
08DA:  BSF    03.5
08DB:  MOVWF  24
....................   
....................    ret=0;  
08DC:  CLRF   23
08DD:  CLRF   22
08DE:  CLRF   21
08DF:  CLRF   20
....................   
....................   
....................    if (ext) {  
08E0:  MOVF   73,F
08E1:  BTFSC  03.2
08E2:  GOTO   18A
....................       ret=*ptr;  //eidl  
08E3:  MOVF   75,W
08E4:  MOVWF  7A
08E5:  MOVF   74,W
08E6:  MOVWF  04
08E7:  BCF    03.7
08E8:  BTFSC  75.0
08E9:  BSF    03.7
08EA:  MOVF   00,W
08EB:  MOVWF  77
08EC:  CLRF   78
08ED:  CLRF   79
08EE:  CLRF   7A
08EF:  MOVF   7A,W
08F0:  MOVWF  23
08F1:  MOVF   79,W
08F2:  MOVWF  22
08F3:  MOVF   78,W
08F4:  MOVWF  21
08F5:  MOVF   77,W
08F6:  MOVWF  20
....................   
....................       ptr--;     //eidh  
08F7:  MOVF   74,W
08F8:  BTFSC  03.2
08F9:  DECF   75,F
08FA:  DECF   74,F
....................       ret|=((int32)*ptr << 8);  
08FB:  MOVF   74,W
08FC:  MOVWF  04
08FD:  BCF    03.7
08FE:  BTFSC  75.0
08FF:  BSF    03.7
0900:  MOVF   00,W
0901:  CLRF   2B
0902:  CLRF   2A
0903:  CLRF   29
0904:  MOVWF  28
0905:  CLRF   77
0906:  MOVF   77,W
0907:  IORWF  20,F
0908:  MOVF   28,W
0909:  IORWF  21,F
090A:  MOVF   29,W
090B:  IORWF  22,F
090C:  MOVF   2A,W
090D:  IORWF  23,F
....................   
....................       ptr--;     //sidl  
090E:  MOVF   74,W
090F:  BTFSC  03.2
0910:  DECF   75,F
0911:  DECF   74,F
....................       ret|=((int32)*ptr & 0x03) << 16;  
0912:  MOVF   74,W
0913:  MOVWF  04
0914:  BCF    03.7
0915:  BTFSC  75.0
0916:  BSF    03.7
0917:  MOVF   00,W
0918:  CLRF   2B
0919:  CLRF   2A
091A:  CLRF   29
091B:  MOVWF  28
091C:  ANDLW  03
091D:  MOVWF  2C
091E:  MOVF   29,W
091F:  ANDLW  00
0920:  MOVWF  2D
0921:  MOVF   2A,W
0922:  ANDLW  00
0923:  MOVWF  2E
0924:  MOVF   2B,W
0925:  ANDLW  00
0926:  MOVWF  2F
0927:  CLRF   77
0928:  CLRF   78
0929:  MOVF   77,W
092A:  IORWF  20,F
092B:  MOVF   78,W
092C:  IORWF  21,F
092D:  MOVF   2C,W
092E:  IORWF  22,F
092F:  MOVF   2D,W
0930:  IORWF  23,F
....................       ret|=((int32)*ptr & 0xE0) << 13;  
0931:  MOVF   74,W
0932:  MOVWF  04
0933:  BCF    03.7
0934:  BTFSC  75.0
0935:  BSF    03.7
0936:  MOVF   00,W
0937:  CLRF   2B
0938:  CLRF   2A
0939:  CLRF   29
093A:  MOVWF  28
093B:  ANDLW  E0
093C:  MOVWF  2C
093D:  MOVF   29,W
093E:  ANDLW  00
093F:  MOVWF  2D
0940:  MOVF   2A,W
0941:  ANDLW  00
0942:  MOVWF  2E
0943:  MOVF   2B,W
0944:  ANDLW  00
0945:  MOVWF  2F
0946:  CLRF   77
0947:  RLF    2C,W
0948:  MOVWF  78
0949:  RLF    2D,W
094A:  MOVWF  79
094B:  RLF    2E,W
094C:  MOVWF  7A
094D:  RLF    78,F
094E:  RLF    79,F
094F:  RLF    7A,F
0950:  RLF    78,F
0951:  RLF    79,F
0952:  RLF    7A,F
0953:  RLF    78,F
0954:  RLF    79,F
0955:  RLF    7A,F
0956:  RLF    78,F
0957:  RLF    79,F
0958:  RLF    7A,F
0959:  MOVLW  E0
095A:  ANDWF  78,F
095B:  MOVF   77,W
095C:  IORWF  20,F
095D:  MOVF   78,W
095E:  IORWF  21,F
095F:  MOVF   79,W
0960:  IORWF  22,F
0961:  MOVF   7A,W
0962:  IORWF  23,F
....................   
....................       ptr--;     //sidh  
0963:  MOVF   74,W
0964:  BTFSC  03.2
0965:  DECF   75,F
0966:  DECF   74,F
....................       ret|=((int32)*ptr << 21);  
0967:  MOVF   74,W
0968:  MOVWF  04
0969:  BCF    03.7
096A:  BTFSC  75.0
096B:  BSF    03.7
096C:  MOVF   00,W
096D:  CLRF   2B
096E:  CLRF   2A
096F:  CLRF   29
0970:  MOVWF  28
0971:  CLRF   77
0972:  CLRF   78
0973:  RLF    28,W
0974:  MOVWF  79
0975:  RLF    29,W
0976:  MOVWF  7A
0977:  RLF    79,F
0978:  RLF    7A,F
0979:  RLF    79,F
097A:  RLF    7A,F
097B:  RLF    79,F
097C:  RLF    7A,F
097D:  RLF    79,F
097E:  RLF    7A,F
097F:  MOVLW  E0
0980:  ANDWF  79,F
0981:  MOVF   77,W
0982:  IORWF  20,F
0983:  MOVF   78,W
0984:  IORWF  21,F
0985:  MOVF   79,W
0986:  IORWF  22,F
0987:  MOVF   7A,W
0988:  IORWF  23,F
....................    }  
....................    else {  
0989:  GOTO   1E7
....................       ptr-=2;    //sidl  
098A:  MOVLW  02
098B:  SUBWF  74,F
098C:  MOVLW  00
098D:  BTFSS  03.0
098E:  MOVLW  01
098F:  SUBWF  75,F
....................       ret=((int32)*ptr & 0xE0) >> 5;  
0990:  MOVF   74,W
0991:  MOVWF  04
0992:  BCF    03.7
0993:  BTFSC  75.0
0994:  BSF    03.7
0995:  MOVF   00,W
0996:  CLRF   2B
0997:  CLRF   2A
0998:  CLRF   29
0999:  MOVWF  28
099A:  ANDLW  E0
099B:  MOVWF  2C
099C:  MOVF   29,W
099D:  ANDLW  00
099E:  MOVWF  2D
099F:  MOVF   2A,W
09A0:  ANDLW  00
09A1:  MOVWF  2E
09A2:  MOVF   2B,W
09A3:  ANDLW  00
09A4:  MOVWF  2F
09A5:  RRF    2F,W
09A6:  MOVWF  23
09A7:  RRF    2E,W
09A8:  MOVWF  22
09A9:  RRF    2D,W
09AA:  MOVWF  21
09AB:  RRF    2C,W
09AC:  MOVWF  20
09AD:  RRF    23,F
09AE:  RRF    22,F
09AF:  RRF    21,F
09B0:  RRF    20,F
09B1:  RRF    23,F
09B2:  RRF    22,F
09B3:  RRF    21,F
09B4:  RRF    20,F
09B5:  RRF    23,F
09B6:  RRF    22,F
09B7:  RRF    21,F
09B8:  RRF    20,F
09B9:  RRF    23,F
09BA:  RRF    22,F
09BB:  RRF    21,F
09BC:  RRF    20,F
09BD:  MOVLW  07
09BE:  ANDWF  23,F
....................   
....................       ptr--;     //sidh  
09BF:  MOVF   74,W
09C0:  BTFSC  03.2
09C1:  DECF   75,F
09C2:  DECF   74,F
....................       ret|=((int32)*ptr << 3);  
09C3:  MOVF   74,W
09C4:  MOVWF  04
09C5:  BCF    03.7
09C6:  BTFSC  75.0
09C7:  BSF    03.7
09C8:  MOVF   00,W
09C9:  CLRF   2B
09CA:  CLRF   2A
09CB:  CLRF   29
09CC:  MOVWF  28
09CD:  RLF    28,W
09CE:  MOVWF  77
09CF:  RLF    29,W
09D0:  MOVWF  78
09D1:  RLF    2A,W
09D2:  MOVWF  79
09D3:  RLF    2B,W
09D4:  MOVWF  7A
09D5:  RLF    77,F
09D6:  RLF    78,F
09D7:  RLF    79,F
09D8:  RLF    7A,F
09D9:  RLF    77,F
09DA:  RLF    78,F
09DB:  RLF    79,F
09DC:  RLF    7A,F
09DD:  MOVLW  F8
09DE:  ANDWF  77,F
09DF:  MOVF   77,W
09E0:  IORWF  20,F
09E1:  MOVF   78,W
09E2:  IORWF  21,F
09E3:  MOVF   79,W
09E4:  IORWF  22,F
09E5:  MOVF   7A,W
09E6:  IORWF  23,F
....................    }  
....................   
....................    return(ret);  
09E7:  MOVF   20,W
09E8:  MOVWF  77
09E9:  MOVF   21,W
09EA:  MOVWF  78
09EB:  MOVF   22,W
09EC:  MOVWF  79
09ED:  MOVF   23,W
09EE:  MOVWF  7A
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_putd()  
.................... //  
.................... // Puts data on a transmit buffer, at which time the CAN peripheral will  
.................... // send when the CAN bus becomes available.  
.................... //  
.................... //    Paramaters:  
.................... //       id - ID to transmit data as  
.................... //       data - pointer to data to send  
.................... //       len - length of data to send  
.................... //       priority - priority of message.  The higher the number, the  
.................... //                  sooner the CAN peripheral will send the message.  
.................... //                  Numbers 0 through 3 are valid.  
.................... //       ext - TRUE to use an extended ID, FALSE if not  
.................... //       rtr - TRUE to set the RTR (request) bit in the ID, false if NOT  
.................... //  
.................... //    Returns:  
.................... //       If successful, it will return TRUE  
.................... //       If un-successful, will return FALSE  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int1 can_putd(int32 id, int * data, int len, int priority, int1 ext, int1 rtr) {  
....................    int i;  
....................    int port;  
....................   
....................    int TXRXBaD0;  
....................    int TXBaCTRL;  
....................    int TXRXBaEIDL;  
....................    int TXBaDLC;  
....................   
....................    struct txbNctrl_struct b_TXBaCTRL;  
....................    struct rxbNdlc_struct b_TXBaDLC;  
....................    struct txbNctrl_struct b_TXB0CTRL, b_TXB1CTRL, b_TXB2CTRL;  
....................   
....................    b_TXB0CTRL=mcp2510_read(TXB0CTRL);  
*
0A63:  MOVLW  30
0A64:  BSF    03.5
0A65:  MOVWF  2B
0A66:  BCF    0A.3
0A67:  BCF    03.5
0A68:  CALL   0CE
0A69:  BSF    0A.3
0A6A:  MOVF   78,W
0A6B:  MOVWF  6F
....................    b_TXB1CTRL=mcp2510_read(TXB1CTRL);  
0A6C:  MOVLW  40
0A6D:  BSF    03.5
0A6E:  MOVWF  2B
0A6F:  BCF    0A.3
0A70:  BCF    03.5
0A71:  CALL   0CE
0A72:  BSF    0A.3
0A73:  MOVF   78,W
0A74:  MOVWF  71
....................    b_TXB2CTRL=mcp2510_read(TXB2CTRL);  
0A75:  MOVLW  50
0A76:  BSF    03.5
0A77:  MOVWF  2B
0A78:  BCF    0A.3
0A79:  BCF    03.5
0A7A:  CALL   0CE
0A7B:  BSF    0A.3
0A7C:  MOVF   78,W
0A7D:  MOVWF  72
....................   
....................     // find emtpy transmitter  
....................     //map access bank addresses to empty transmitter  
....................    if (!b_TXB0CTRL.txreq) {  
0A7E:  BTFSC  6F.3
0A7F:  GOTO   28A
....................       TXRXBaD0=TXB0D0;  
0A80:  MOVLW  36
0A81:  MOVWF  69
....................       TXBaCTRL=TXB0CTRL;  
0A82:  MOVLW  30
0A83:  MOVWF  6A
....................       TXRXBaEIDL=TXB0EIDL;  
0A84:  MOVLW  34
0A85:  MOVWF  6B
....................       TXBaDLC=TXB0DLC;  
0A86:  MOVLW  35
0A87:  MOVWF  6C
....................       port=0;  
0A88:  CLRF   68
....................    }  
....................    else if (!b_TXB1CTRL.txreq) {  
0A89:  GOTO   2A7
0A8A:  BTFSC  71.3
0A8B:  GOTO   297
....................       TXRXBaD0=TXB1D0;  
0A8C:  MOVLW  46
0A8D:  MOVWF  69
....................       TXBaCTRL=TXB1CTRL;  
0A8E:  MOVLW  40
0A8F:  MOVWF  6A
....................       TXRXBaEIDL=TXB1EIDL;  
0A90:  MOVLW  44
0A91:  MOVWF  6B
....................       TXBaDLC=TXB1DLC;  
0A92:  MOVLW  45
0A93:  MOVWF  6C
....................       port=1;  
0A94:  MOVLW  01
0A95:  MOVWF  68
....................    }  
....................    else if (!b_TXB2CTRL.txreq) {  
0A96:  GOTO   2A7
0A97:  BTFSC  72.3
0A98:  GOTO   2A4
....................       TXRXBaD0=TXB2D0;  
0A99:  MOVLW  56
0A9A:  MOVWF  69
....................       TXBaCTRL=TXB2CTRL;  
0A9B:  MOVLW  50
0A9C:  MOVWF  6A
....................       TXRXBaEIDL=TXB2EIDL;  
0A9D:  MOVLW  54
0A9E:  MOVWF  6B
....................       TXBaDLC=TXB2DLC;  
0A9F:  MOVLW  55
0AA0:  MOVWF  6C
....................       port=2;  
0AA1:  MOVLW  02
0AA2:  MOVWF  68
....................    }  
....................    else {  
0AA3:  GOTO   2A7
....................       #if CAN_DO_DEBUG  
....................          can_debug("\r\nCAN_PUTD() FAIL: NO OPEN TX BUFFERS\r\n");  
....................       #endif  
....................       return(0);  
0AA4:  MOVLW  00
0AA5:  MOVWF  78
0AA6:  GOTO   31E
....................    }  
....................   
....................    //set priority.  
....................    b_TXBaCTRL=mcp2510_read(TXBaCTRL);  
0AA7:  MOVF   6A,W
0AA8:  BSF    03.5
0AA9:  MOVWF  2B
0AAA:  BCF    0A.3
0AAB:  BCF    03.5
0AAC:  CALL   0CE
0AAD:  BSF    0A.3
0AAE:  MOVF   78,W
0AAF:  MOVWF  6D
....................    b_TXBaCTRL.txpri=priority;  
0AB0:  MOVF   64,W
0AB1:  ANDLW  03
0AB2:  MOVWF  77
0AB3:  MOVLW  FC
0AB4:  ANDWF  6D,W
0AB5:  IORWF  77,W
0AB6:  MOVWF  6D
....................    mcp2510_write(TXBaCTRL, (int)b_TXBaCTRL);  
0AB7:  MOVF   6A,W
0AB8:  BSF    03.5
0AB9:  MOVWF  2C
0ABA:  BCF    03.5
0ABB:  MOVF   6D,W
0ABC:  BSF    03.5
0ABD:  MOVWF  2D
0ABE:  BCF    0A.3
0ABF:  BCF    03.5
0AC0:  CALL   125
0AC1:  BSF    0A.3
....................   
....................    //set tx mask  
....................    can_set_id(TXRXBaEIDL, id, ext);  
0AC2:  MOVF   6B,W
0AC3:  MOVWF  73
0AC4:  MOVF   60,W
0AC5:  BSF    03.5
0AC6:  MOVWF  23
0AC7:  BCF    03.5
0AC8:  MOVF   5F,W
0AC9:  BSF    03.5
0ACA:  MOVWF  22
0ACB:  BCF    03.5
0ACC:  MOVF   5E,W
0ACD:  BSF    03.5
0ACE:  MOVWF  21
0ACF:  BCF    03.5
0AD0:  MOVF   5D,W
0AD1:  BSF    03.5
0AD2:  MOVWF  20
0AD3:  BCF    03.5
0AD4:  MOVF   65,W
0AD5:  MOVWF  74
0AD6:  BCF    0A.3
0AD7:  CALL   182
0AD8:  BSF    0A.3
....................   
....................    //set tx data count  
....................    b_TXBaDLC=len;  
0AD9:  MOVF   63,W
0ADA:  MOVWF  6E
....................    b_TXBaDLC.rtr=rtr;  
0ADB:  BCF    6E.6
0ADC:  BTFSC  66.0
0ADD:  BSF    6E.6
....................    mcp2510_write(TXBaDLC, (int)b_TXBaDLC);  
0ADE:  MOVF   6C,W
0ADF:  BSF    03.5
0AE0:  MOVWF  2C
0AE1:  BCF    03.5
0AE2:  MOVF   6E,W
0AE3:  BSF    03.5
0AE4:  MOVWF  2D
0AE5:  BCF    0A.3
0AE6:  BCF    03.5
0AE7:  CALL   125
0AE8:  BSF    0A.3
....................   
....................    //write to buffer  
....................     for (i=TXRXBaD0; i<(TXRXBaD0 + len); i++) {  
0AE9:  MOVF   69,W
0AEA:  MOVWF  67
0AEB:  MOVF   63,W
0AEC:  ADDWF  69,W
0AED:  SUBWF  67,W
0AEE:  BTFSC  03.0
0AEF:  GOTO   307
....................       mcp2510_write(i,*data);  
0AF0:  MOVF   62,W
0AF1:  MOVWF  7A
0AF2:  MOVF   61,W
0AF3:  MOVWF  04
0AF4:  BCF    03.7
0AF5:  BTFSC  62.0
0AF6:  BSF    03.7
0AF7:  MOVF   00,W
0AF8:  MOVWF  73
0AF9:  MOVF   67,W
0AFA:  BSF    03.5
0AFB:  MOVWF  2C
0AFC:  MOVF   73,W
0AFD:  MOVWF  2D
0AFE:  BCF    0A.3
0AFF:  BCF    03.5
0B00:  CALL   125
0B01:  BSF    0A.3
....................       data++;  
0B02:  INCF   61,F
0B03:  BTFSC  03.2
0B04:  INCF   62,F
....................     }  
0B05:  INCF   67,F
0B06:  GOTO   2EB
....................   
....................    //enable transmission  
....................    b_TXBaCTRL=mcp2510_read(TXBaCTRL);  
0B07:  MOVF   6A,W
0B08:  BSF    03.5
0B09:  MOVWF  2B
0B0A:  BCF    0A.3
0B0B:  BCF    03.5
0B0C:  CALL   0CE
0B0D:  BSF    0A.3
0B0E:  MOVF   78,W
0B0F:  MOVWF  6D
....................    b_TXBaCTRL.txreq=1;  
0B10:  BSF    6D.3
....................    mcp2510_write(TXBaCTRL, (int)b_TXBaCTRL);  
0B11:  MOVF   6A,W
0B12:  BSF    03.5
0B13:  MOVWF  2C
0B14:  BCF    03.5
0B15:  MOVF   6D,W
0B16:  BSF    03.5
0B17:  MOVWF  2D
0B18:  BCF    0A.3
0B19:  BCF    03.5
0B1A:  CALL   125
0B1B:  BSF    0A.3
....................   
....................    #if CAN_DO_DEBUG  
....................             can_debug("\r\nCAN_PUTD(): BUFF=%U ID=%LX LEN=%U PRI=%U EXT=%U RTR=%U\r\n", port, id, len, priority, ext, rtr);  
....................             if ((len)&&(!rtr)) {  
....................                data-=len;  
....................                can_debug("  DATA = ");  
....................                for (i=0;i<len;i++) {  
....................                   can_debug("%X ",*data);  
....................                   data++;  
....................                }  
....................                can_debug("\r\n");  
....................             }  
....................    #endif  
....................   
....................    return(1);  
0B1C:  MOVLW  01
0B1D:  MOVWF  78
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_getd()  
.................... //  
.................... // Gets data from a receive buffer, if the data exists  
.................... //  
.................... //    Returns:  
.................... //      id - ID who sent message  
.................... //      data - pointer to array of data  
.................... //      len - length of received data  
.................... //      stat - structure holding some information (such as which buffer  
.................... //             recieved it, ext or standard, etc)  
.................... //  
.................... //    Returns:  
.................... //      Function call returns a TRUE if there was data in a RX buffer, FALSE  
.................... //      if there was none.  
.................... //  
.................... ////////////////////////////////////////////////////////////////////////  
.................... int1 can_getd(int32 & id, int * data, int & len, struct rx_stat & stat)  
.................... {  
....................     int i;  
....................   
....................    struct struct_RXB0CTRL b_RXB0CTRL;  
....................    struct struct_RXB1CTRL b_RXB1CTRL;  
....................    struct struct_EFLG b_EFLG;  
....................   
....................    int RXBaDLC;  
....................    struct rxbNdlc_struct b_RXBaDLC;  
....................   
....................    int TXRXBaSIDL;  
....................    struct struct_TXRXBaSIDL b_TXRXBaSIDL;  
....................   
....................   
....................    int RXBaD0;  
....................    struct struct_CANINTF b_CANINTF;  
....................   
....................    b_CANINTF=mcp2510_read(CANINTF);  
*
0818:  MOVLW  2C
0819:  BSF    03.5
081A:  MOVWF  2B
081B:  BCF    0A.3
081C:  BCF    03.5
081D:  CALL   0CE
081E:  BSF    0A.3
081F:  MOVF   78,W
0820:  MOVWF  68
....................   
....................    b_RXB0CTRL=mcp2510_read(RXB0CTRL);  
0821:  MOVLW  60
0822:  BSF    03.5
0823:  MOVWF  2B
0824:  BCF    0A.3
0825:  BCF    03.5
0826:  CALL   0CE
0827:  BSF    0A.3
0828:  MOVF   78,W
0829:  MOVWF  60
....................    b_RXB1CTRL=mcp2510_read(RXB1CTRL);  
082A:  MOVLW  70
082B:  BSF    03.5
082C:  MOVWF  2B
082D:  BCF    0A.3
082E:  BCF    03.5
082F:  CALL   0CE
0830:  BSF    0A.3
0831:  MOVF   78,W
0832:  MOVWF  61
....................    b_EFLG=mcp2510_read(EFLG);  
0833:  MOVLW  2D
0834:  BSF    03.5
0835:  MOVWF  2B
0836:  BCF    0A.3
0837:  BCF    03.5
0838:  CALL   0CE
0839:  BSF    0A.3
083A:  MOVF   78,W
083B:  MOVWF  62
....................   
....................     if (b_CANINTF.rx0if) {  
083C:  BTFSS  68.0
083D:  GOTO   062
....................         stat.buffer=0;  
083E:  BCF    3E.4
....................   
....................         stat.err_ovfl=b_EFLG.rx0ovr;  
083F:  BCF    3E.0
0840:  BTFSC  62.6
0841:  BSF    3E.0
....................         b_EFLG.rx0ovr=0;  
0842:  BCF    62.6
....................         mcp2510_write(EFLG, (int)b_EFLG);  
0843:  MOVLW  2D
0844:  BSF    03.5
0845:  MOVWF  2C
0846:  BCF    03.5
0847:  MOVF   62,W
0848:  BSF    03.5
0849:  MOVWF  2D
084A:  BCF    0A.3
084B:  BCF    03.5
084C:  CALL   125
084D:  BSF    0A.3
....................   
....................         if (b_RXB0CTRL.bukt) {  
084E:  BTFSS  60.2
084F:  GOTO   05B
....................          stat.filthit=b_RXB0CTRL.filhit0;  
0850:  MOVLW  00
0851:  BTFSC  60.0
0852:  MOVLW  01
0853:  ANDLW  07
0854:  MOVWF  77
0855:  BCF    03.0
0856:  RLF    77,F
0857:  MOVLW  F1
0858:  ANDWF  3E,W
0859:  IORWF  77,W
085A:  MOVWF  3E
....................         }  
....................   
....................         RXBaDLC=RXB0DLC;  
085B:  MOVLW  65
085C:  MOVWF  63
....................         TXRXBaSIDL=RXB0SIDL;  
085D:  MOVLW  62
085E:  MOVWF  65
....................         RXBaD0=RXB0D0;  
085F:  MOVLW  66
0860:  MOVWF  67
....................     }  
....................     else if (b_CANINTF.rx1if)  
0861:  GOTO   088
0862:  BTFSS  68.1
0863:  GOTO   085
....................     {  
....................         stat.buffer=1;  
0864:  BSF    3E.4
....................   
....................         stat.err_ovfl=b_EFLG.rx1ovr;  
0865:  BCF    3E.0
0866:  BTFSC  62.7
0867:  BSF    3E.0
....................         b_EFLG.rx1ovr=0;  
0868:  BCF    62.7
....................         mcp2510_write(EFLG, (int)b_EFLG);  
0869:  MOVLW  2D
086A:  BSF    03.5
086B:  MOVWF  2C
086C:  BCF    03.5
086D:  MOVF   62,W
086E:  BSF    03.5
086F:  MOVWF  2D
0870:  BCF    0A.3
0871:  BCF    03.5
0872:  CALL   125
0873:  BSF    0A.3
....................   
....................   
....................         stat.filthit=b_RXB1CTRL.filhit0;  
0874:  MOVF   61,W
0875:  ANDLW  07
0876:  ANDLW  07
0877:  MOVWF  77
0878:  BCF    03.0
0879:  RLF    77,F
087A:  MOVLW  F1
087B:  ANDWF  3E,W
087C:  IORWF  77,W
087D:  MOVWF  3E
....................         RXBaDLC=RXB1DLC;  
087E:  MOVLW  75
087F:  MOVWF  63
....................         TXRXBaSIDL=RXB1SIDL;  
0880:  MOVLW  72
0881:  MOVWF  65
....................         RXBaD0=RXB1D0;  
0882:  MOVLW  76
0883:  MOVWF  67
....................     }  
....................     else {  
0884:  GOTO   088
....................       #if CAN_DO_DEBUG  
....................          can_debug("\r\nFAIL ON CAN_GETD(): NO MESSAGE IN BUFFER\r\n");  
....................       #endif  
....................       return (0);  
0885:  MOVLW  00
0886:  MOVWF  78
0887:  GOTO   230
....................     }  
....................   
....................    //get count  
....................     b_RXBaDLC=mcp2510_read(RXBaDLC);  
0888:  MOVF   63,W
0889:  BSF    03.5
088A:  MOVWF  2B
088B:  BCF    0A.3
088C:  BCF    03.5
088D:  CALL   0CE
088E:  BSF    0A.3
088F:  MOVF   78,W
0890:  MOVWF  64
....................     len = b_RXBaDLC.dlc;  
0891:  MOVF   64,W
0892:  ANDLW  0F
0893:  MOVWF  3D
....................     stat.rtr=b_RXBaDLC.rtr;  
0894:  BCF    3E.5
0895:  BTFSC  64.6
0896:  BSF    3E.5
....................   
....................    //was it extended or standard? 
....................     b_TXRXBaSIDL=mcp2510_read(TXRXBaSIDL);  
0897:  MOVF   65,W
0898:  BSF    03.5
0899:  MOVWF  2B
089A:  BCF    0A.3
089B:  BCF    03.5
089C:  CALL   0CE
089D:  BSF    0A.3
089E:  MOVF   78,W
089F:  MOVWF  66
....................     stat.ext=b_TXRXBaSIDL.ext;  
08A0:  BCF    3E.6
08A1:  BTFSC  66.3
08A2:  BSF    3E.6
....................     id=can_get_id(TXRXBaSIDL + 2,stat.ext);  
08A3:  MOVLW  02
08A4:  ADDWF  65,W
08A5:  MOVWF  69
08A6:  MOVLW  00
08A7:  BTFSC  3E.6
08A8:  MOVLW  01
08A9:  MOVWF  6A
08AA:  MOVF   69,W
08AB:  MOVWF  72
08AC:  MOVF   6A,W
08AD:  MOVWF  73
*
09EF:  MOVF   7A,W
09F0:  BCF    03.5
09F1:  MOVWF  2B
09F2:  MOVF   79,W
09F3:  MOVWF  2A
09F4:  MOVF   78,W
09F5:  MOVWF  29
09F6:  MOVF   77,W
09F7:  MOVWF  28
....................   
....................    //get data  
....................     for ( i = RXBaD0; i < (RXBaD0 + len); i++ ) {  
09F8:  MOVF   67,W
09F9:  MOVWF  5F
09FA:  MOVF   3D,W
09FB:  ADDWF  67,W
09FC:  SUBWF  5F,W
09FD:  BTFSC  03.0
09FE:  GOTO   218
....................          *data=mcp2510_read(i);  
09FF:  MOVF   5E,W
0A00:  MOVWF  7A
0A01:  MOVF   5D,W
0A02:  MOVWF  69
0A03:  MOVF   5E,W
0A04:  MOVWF  6A
0A05:  MOVF   5F,W
0A06:  BSF    03.5
0A07:  MOVWF  2B
0A08:  BCF    0A.3
0A09:  BCF    03.5
0A0A:  CALL   0CE
0A0B:  BSF    0A.3
0A0C:  MOVF   69,W
0A0D:  MOVWF  04
0A0E:  BCF    03.7
0A0F:  BTFSC  6A.0
0A10:  BSF    03.7
0A11:  MOVF   78,W
0A12:  MOVWF  00
....................         data++;  
0A13:  INCF   5D,F
0A14:  BTFSC  03.2
0A15:  INCF   5E,F
....................     }  
0A16:  INCF   5F,F
0A17:  GOTO   1FA
....................   
....................     stat.inv=b_CANINTF.merrf;  
0A18:  BCF    3E.7
0A19:  BTFSC  68.7
0A1A:  BSF    3E.7
....................     if (b_CANINTF.merrf) {  
0A1B:  BTFSS  68.7
0A1C:  GOTO   21E
....................       b_CANINTF.merrf=0;  
0A1D:  BCF    68.7
....................     }  
....................   
....................     if (stat.buffer) {  
0A1E:  BTFSS  3E.4
0A1F:  GOTO   222
....................       b_CANINTF.rx1if=0;  
0A20:  BCF    68.1
....................     }  
....................     else {  
0A21:  GOTO   223
....................       b_CANINTF.rx0if=0;  
0A22:  BCF    68.0
....................     }  
....................     mcp2510_write(CANINTF, (int)b_CANINTF);  
0A23:  MOVLW  2C
0A24:  BSF    03.5
0A25:  MOVWF  2C
0A26:  BCF    03.5
0A27:  MOVF   68,W
0A28:  BSF    03.5
0A29:  MOVWF  2D
0A2A:  BCF    0A.3
0A2B:  BCF    03.5
0A2C:  CALL   125
0A2D:  BSF    0A.3
....................   
....................     #if CAN_DO_DEBUG  
....................        can_debug("\r\nCAN_GETD(): BUFF=%U ID=%LX LEN=%U OVF=%U ", stat.buffer, id, len, stat.err_ovfl);  
....................        can_debug("FILT=%U RTR=%U EXT=%U INV=%U", stat.filthit, stat.rtr, stat.ext, stat.inv);  
....................        if ((len)&&(!stat.rtr)) {  
....................           data-=len;  
....................           can_debug("\r\n    DATA = ");  
....................           for (i=0;i<len;i++) {  
....................             can_debug("%X ",*data);  
....................             data++;  
....................           }  
....................        }  
....................        can_debug("\r\n");  
....................     #endif  
....................   
....................     return(1);  
0A2E:  MOVLW  01
0A2F:  MOVWF  78
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_kbhit()  
.................... //  
.................... // Returns TRUE if there is data in the receive buffers  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... int1 can_kbhit(void) {  
....................    struct struct_CANINTF b_CANINTF;  
....................   
....................    b_CANINTF=mcp2510_read(CANINTF);  
*
0800:  MOVLW  2C
0801:  BSF    03.5
0802:  MOVWF  2B
0803:  BCF    0A.3
0804:  BCF    03.5
0805:  CALL   0CE
0806:  BSF    0A.3
0807:  MOVF   78,W
0808:  MOVWF  5D
....................    if (b_CANINTF.rx0if || b_CANINTF.rx1if)  
0809:  BTFSC  5D.0
080A:  GOTO   00D
080B:  BTFSS  5D.1
080C:  GOTO   010
....................       {return(1);}  
080D:  MOVLW  01
080E:  MOVWF  78
080F:  GOTO   012
....................   
....................    return(0);  
0810:  MOVLW  00
0811:  MOVWF  78
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_tbe()  
.................... //  
.................... // Returns TRUE if the transmit buffers are empty and ready to transmit data  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... int1 can_tbe(void) {  
....................    struct txbNctrl_struct b_TXB0CTRL, b_TXB1CTRL, b_TXB2CTRL;  
....................   
....................    b_TXB0CTRL=mcp2510_read(TXB0CTRL);  
....................    b_TXB1CTRL=mcp2510_read(TXB1CTRL);  
....................    b_TXB2CTRL=mcp2510_read(TXB2CTRL);  
....................   
....................    if (!b_TXB0CTRL.txreq || !b_TXB1CTRL.txreq || !b_TXB2CTRL.txreq)  
....................       {return(1);}  
....................   
....................    return(0);  
.................... }  
....................   
.................... ////////////////////////////////////////////////////////////////////////  
.................... //  
.................... // can_abort()  
.................... //  
.................... // Aborts all pending tranmissions.  
.................... //  
.................... //////////////////////////////////////////////////////////////////////////////  
.................... void can_abort(void) {  
....................    struct struct_CANCTRL b_CANCTRL;  
....................   
....................    b_CANCTRL=mcp2510_read(CANCTRL);  
....................    b_CANCTRL.abat=1;  
....................    mcp2510_write(CANCTRL, (int)b_CANCTRL);  
....................   
....................    delay_ms(5);  
....................    b_CANCTRL.abat=0;  
....................    mcp2510_write(CANCTRL, (int)b_CANCTRL);  
.................... }  
....................   
....................   
....................   
....................   
.................... ///////////////////  
.................... ///  
.................... //  
.................... // SPI CODE  
.................... //  
.................... ///  
.................... //////////////////  
....................   
.................... //data clocked in on rising edge  
.................... //data driven out on falling edge  
.................... int mcp2510_read(int address) {  
....................    int command[2];  
....................    int i;  
....................    int data;  
....................   
....................    command[1]=0x03;  
*
00CE:  MOVLW  03
00CF:  BSF    03.5
00D0:  MOVWF  2D
....................    command[0]=address;  
00D1:  MOVF   2B,W
00D2:  MOVWF  2C
....................   
....................    output_low(EXT_CAN_CS);  
00D3:  BCF    06.3
00D4:  BCF    03.5
00D5:  BCF    06.3
....................   
....................    for (i=0;i<16;i++) {  
00D6:  BSF    03.5
00D7:  CLRF   2E
00D8:  MOVF   2E,W
00D9:  SUBLW  0F
00DA:  BTFSS  03.0
00DB:  GOTO   0FB
....................       output_bit(EXT_CAN_SI, shift_left(&command[0],2,0));  
00DC:  BCF    03.0
00DD:  RLF    2C,F
00DE:  RLF    2D,F
00DF:  BTFSC  03.0
00E0:  GOTO   0E5
00E1:  BCF    03.5
00E2:  BCF    07.5
00E3:  GOTO   0E7
00E4:  BSF    03.5
00E5:  BCF    03.5
00E6:  BSF    07.5
00E7:  BCF    3F.5
00E8:  MOVF   3F,W
00E9:  BSF    03.5
00EA:  MOVWF  07
*
0572:  MOVLW  FF
0573:  MOVWF  3F
....................       output_high(EXT_CAN_SCK);  
*
00EB:  BCF    03.5
00EC:  BCF    3F.3
00ED:  MOVF   3F,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  BCF    03.5
00F1:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
00F2:  BCF    3F.3
00F3:  MOVF   3F,W
00F4:  BSF    03.5
00F5:  MOVWF  07
00F6:  BCF    03.5
00F7:  BCF    07.3
....................    }  
00F8:  BSF    03.5
00F9:  INCF   2E,F
00FA:  GOTO   0D8
....................    for (i=0;i<8;i++) {  
00FB:  CLRF   2E
00FC:  MOVF   2E,W
00FD:  SUBLW  07
00FE:  BTFSS  03.0
00FF:  GOTO   11D
....................       shift_left(&data,1,input(EXT_CAN_SO));  
0100:  BCF    03.5
0101:  BSF    3F.4
0102:  MOVF   3F,W
0103:  BSF    03.5
0104:  MOVWF  07
0105:  BCF    03.5
0106:  BTFSC  07.4
0107:  GOTO   10A
0108:  BCF    03.0
0109:  GOTO   10B
010A:  BSF    03.0
010B:  BSF    03.5
010C:  RLF    2F,F
....................       output_high(EXT_CAN_SCK);  
010D:  BCF    03.5
010E:  BCF    3F.3
010F:  MOVF   3F,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  BCF    03.5
0113:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
0114:  BCF    3F.3
0115:  MOVF   3F,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BCF    03.5
0119:  BCF    07.3
....................    }  
011A:  BSF    03.5
011B:  INCF   2E,F
011C:  GOTO   0FC
....................   
....................    output_high(EXT_CAN_CS);  
011D:  BCF    06.3
011E:  BCF    03.5
011F:  BSF    06.3
....................   
....................    return(data);  
0120:  BSF    03.5
0121:  MOVF   2F,W
0122:  MOVWF  78
.................... }  
0123:  BCF    03.5
0124:  RETLW  00
....................   
.................... int mcp2510_status(void) {  
....................    int command;  
....................    int data;  
....................    int i;  
....................   
....................    command=0xA0;  
....................   
....................    output_low(EXT_CAN_CS);  
....................   
....................    for (i=0;i<8;i++) {  
....................       output_bit(EXT_CAN_SI, shift_left(&command,1,0));  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................    for (i=0;i<8;i++) {  
....................       shift_left(&data,1,input(EXT_CAN_SO));  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................    for (i=0;i<8;i++) {  
....................       output_high(EXT_CAN_SCK);  
....................       output_low(EXT_CAN_SCK);  
....................    }  
....................   
....................    output_high(EXT_CAN_CS);  
....................   
....................    return(data);  
.................... }  
....................   
....................   
.................... void mcp2510_write(int address, int data) {  
....................    int command[3];  
....................    int i;  
....................   
....................    command[2]=0x02;  
0125:  MOVLW  02
0126:  BSF    03.5
0127:  MOVWF  30
....................    command[1]=address;  
0128:  MOVF   2C,W
0129:  MOVWF  2F
....................    command[0]=data;  
012A:  MOVF   2D,W
012B:  MOVWF  2E
....................   
....................    output_low(EXT_CAN_CS);  
012C:  BCF    06.3
012D:  BCF    03.5
012E:  BCF    06.3
....................   
....................    for (i=0;i<24;i++) {  
012F:  BSF    03.5
0130:  CLRF   31
0131:  MOVF   31,W
0132:  SUBLW  17
0133:  BTFSS  03.0
0134:  GOTO   155
....................       output_bit(EXT_CAN_SI, shift_left(&command[0],3,0));  
0135:  BCF    03.0
0136:  RLF    2E,F
0137:  RLF    2F,F
0138:  RLF    30,F
0139:  BTFSC  03.0
013A:  GOTO   13F
013B:  BCF    03.5
013C:  BCF    07.5
013D:  GOTO   141
013E:  BSF    03.5
013F:  BCF    03.5
0140:  BSF    07.5
0141:  BCF    3F.5
0142:  MOVF   3F,W
0143:  BSF    03.5
0144:  MOVWF  07
....................       output_high(EXT_CAN_SCK);  
0145:  BCF    03.5
0146:  BCF    3F.3
0147:  MOVF   3F,W
0148:  BSF    03.5
0149:  MOVWF  07
014A:  BCF    03.5
014B:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
014C:  BCF    3F.3
014D:  MOVF   3F,W
014E:  BSF    03.5
014F:  MOVWF  07
0150:  BCF    03.5
0151:  BCF    07.3
....................    }  
0152:  BSF    03.5
0153:  INCF   31,F
0154:  GOTO   131
....................   
....................    output_high(EXT_CAN_CS);  
0155:  BCF    06.3
0156:  BCF    03.5
0157:  BSF    06.3
.................... }  
0158:  RETLW  00
....................   
.................... void mcp2510_command(int command) {  
....................    int i;  
....................   
....................    output_low(EXT_CAN_CS);  
*
0256:  BSF    03.5
0257:  BCF    06.3
0258:  BCF    03.5
0259:  BCF    06.3
....................   
....................    for (i=0;i<8;i++) {  
025A:  CLRF   5F
025B:  MOVF   5F,W
025C:  SUBLW  07
025D:  BTFSS  03.0
025E:  GOTO   279
....................       output_bit(EXT_CAN_SI, shift_left(&command,1,0));  
025F:  BCF    03.0
0260:  RLF    5E,F
0261:  BTFSC  03.0
0262:  GOTO   265
0263:  BCF    07.5
0264:  GOTO   266
0265:  BSF    07.5
0266:  BCF    3F.5
0267:  MOVF   3F,W
0268:  BSF    03.5
0269:  MOVWF  07
....................       output_high(EXT_CAN_SCK);  
026A:  BCF    03.5
026B:  BCF    3F.3
026C:  MOVF   3F,W
026D:  BSF    03.5
026E:  MOVWF  07
026F:  BCF    03.5
0270:  BSF    07.3
....................       output_low(EXT_CAN_SCK);  
0271:  BCF    3F.3
0272:  MOVF   3F,W
0273:  BSF    03.5
0274:  MOVWF  07
0275:  BCF    03.5
0276:  BCF    07.3
....................    }  
0277:  INCF   5F,F
0278:  GOTO   25B
....................   
....................    output_high(EXT_CAN_CS);  
0279:  BSF    03.5
027A:  BCF    06.3
027B:  BCF    03.5
027C:  BSF    06.3
.................... }  
....................   
.................... void mcp2510_init(void) {  
....................    output_high(EXT_CAN_CS);  
*
024A:  BSF    03.5
024B:  BCF    06.3
024C:  BCF    03.5
024D:  BSF    06.3
....................    output_low(EXT_CAN_SCK);  
024E:  BCF    3F.3
024F:  MOVF   3F,W
0250:  BSF    03.5
0251:  MOVWF  07
0252:  BCF    03.5
0253:  BCF    07.3
....................   
....................    #ifdef EXT_CAN_TX0RTS  
....................     output_high(EXT_CAN_TX0RTS);  
....................    #endif  
....................    #ifdef EXT_CAN_TX1RTS  
....................     output_high(EXT_CAN_TX1RTS);  
....................    #endif  
....................    #ifdef EXT_CAN_TX2RTS  
....................     output_high(EXT_CAN_TX2RTS);  
....................    #endif  
....................   
....................   #ifdef EXT_CAN_TX0RTS  
....................    output_high(EXT_CAN_RESET);  
....................    output_low(EXT_CAN_RESET);  
....................    output_high(EXT_CAN_RESET);  
....................    delay_ms(5);  
....................   #endif  
....................   
....................    mcp2510_command(0xC0);   //reset  
0254:  MOVLW  C0
0255:  MOVWF  5E
....................    delay_ms(5);  
*
027D:  MOVLW  05
027E:  MOVWF  5E
027F:  CALL   0C1
0280:  NOP
.................... }  
....................  
....................   
.................... /* identifiants bus can */  
.................... #define i_m_m  0x400                   //reception d'une demande de donnee  
.................... #define i_mo   0x401                   //identifiant pour reponse au module de controle  
.................... #define i_m_c  0x402                   //reception d'un commande moteur  
....................   
.................... /* declaration des e/s */  
.................... #define elev_sens_high output_high(PIN_A4)       //sens moteur elevation  
.................... #define elev_sens_low output_low(PIN_A4)  
.................... #define elev_enable_high output_high(PIN_A5)     //validation moteur elevation  
.................... #define elev_enable_low output_low(PIN_A5)  
....................   
.................... #define azim_sens_high output_high(PIN_A2)       //sens moteur elevation  
.................... #define azim_sens_low output_low(PIN_A2)  
.................... #define azim_enable_high output_high(PIN_A3)     //validation moteur elevation  
.................... #define azim_enable_low output_low(PIN_A3)  
....................   
.................... #define elev_rel_sens_high output_high(PIN_B5)   //sens relais elevation  
.................... #define elev_rel_sens_low output_low(PIN_B5)  
.................... #define elev_rel_enable_high output_high(PIN_B4) //validation relais elevation  
.................... #define elev_rel_enable_low output_low(PIN_B4)  
....................   
.................... #define led_on output_high(PIN_B1)       //led systeme  
.................... #define led_off output_low(PIN_B1)  
....................   
.................... /* variables du systeme */  
.................... int16 mo_ie;                           //courant moteur 1  
.................... int16 mo_ia;                           //courant moteur 2  
.................... int mo_ovle;                           //indicateur de surcharge elevation  
.................... int mo_ovla;                           //indicateur de surcharge azimut  
.................... int mot_e_sens;                        //sens de deplacement 0,1 ou 2  
.................... int mot_e_dure;                        //duree de deplacement en secondes  
.................... int mot_a_sens;                        //sens de deplacement 0,1 ou 2  
.................... int mot_a_dure;                        //duree de deplacement en secondes  
.................... int on;                                //indique un eventuel deplacement  
.................... int park;                              //a 1 si demande parking depuis module de controle  
.................... int mot_off;                           //a 1 si demande arret depuis module de controle  
.................... int1 but_b;                            //a 1 si butee haute  
.................... int1 but_h;                            //a 1 si butee basse  
.................... int1 but_d;                            //a 1 si butee droite  
.................... int1 but_g;                            //a 1 si butee gauche  
.................... int ang_elev;                          //angle elevation  
.................... int ang_azim;                          //angle azimut  
.................... int butee;                             //etat des butees  
....................   
.................... long pos_elev,pos_azim;                //comptage des tops des codeurs  
....................   
.................... /* indicateurs des taches activees periodiquement */  
.................... int1 off_flag;                         //indicateur de mise a l'arret  
.................... int1 mes_flag;                         //indicateur de declenchement mesure i  
.................... int16 msa;                             //tick de comptage azimut  
.................... int16 mse;                             //tick de comptage elevation  
.................... int16 mst;                             //tick de comptage du time out moteur  
.................... int16 msc;                             //tick de comptage pour acquisition courant  
....................   
.................... /* declaration des fonctions */  
.................... void init();  
.................... void mes_mot();  
.................... void gest_can();  
.................... void gest_mot();  
....................   
.................... #int_ccp1  
.................... void isr_cpp1() {  
....................    if (on==3){  
*
0047:  MOVF   4A,W
0048:  SUBLW  03
0049:  BTFSS  03.2
004A:  GOTO   050
....................       pos_azim=pos_azim+1;  
004B:  MOVLW  01
004C:  ADDWF  53,F
004D:  BTFSC  03.0
004E:  INCF   54,F
....................    }  
....................    else if (((on==4)||(on==6))&&(pos_azim>>0)){  
004F:  GOTO   064
0050:  MOVF   4A,W
0051:  SUBLW  04
0052:  BTFSC  03.2
0053:  GOTO   058
0054:  MOVF   4A,W
0055:  SUBLW  06
0056:  BTFSS  03.2
0057:  GOTO   064
0058:  MOVF   54,W
0059:  MOVWF  7A
005A:  MOVF   53,W
005B:  IORWF  7A,W
005C:  BTFSC  03.2
005D:  GOTO   064
....................       pos_azim=pos_azim-1;  
005E:  MOVLW  01
005F:  SUBWF  53,F
0060:  MOVLW  00
0061:  BTFSS  03.0
0062:  MOVLW  01
0063:  SUBWF  54,F
....................    }  
.................... }  
....................   
0064:  BCF    0C.2
0065:  BCF    0A.3
0066:  BCF    0A.4
0067:  GOTO   02B
.................... #int_ccp2  
.................... void isr_cpp2() {  
....................    if (on==1){  
0068:  DECFSZ 4A,W
0069:  GOTO   06F
....................       pos_elev=pos_elev+1;  
006A:  MOVLW  01
006B:  ADDWF  51,F
006C:  BTFSC  03.0
006D:  INCF   52,F
....................    }  
....................    else if (((on==2)||(on==5))&&(pos_elev>>0)){  
006E:  GOTO   083
006F:  MOVF   4A,W
0070:  SUBLW  02
0071:  BTFSC  03.2
0072:  GOTO   077
0073:  MOVF   4A,W
0074:  SUBLW  05
0075:  BTFSS  03.2
0076:  GOTO   083
0077:  MOVF   52,W
0078:  MOVWF  7A
0079:  MOVF   51,W
007A:  IORWF  7A,W
007B:  BTFSC  03.2
007C:  GOTO   083
....................       pos_elev=pos_elev-1;  
007D:  MOVLW  01
007E:  SUBWF  51,F
007F:  MOVLW  00
0080:  BTFSS  03.0
0081:  MOVLW  01
0082:  SUBWF  52,F
....................    }  
.................... }  
....................   
.................... /* timer des taches appele par interruption */  
0083:  BCF    0D.0
0084:  BCF    0A.3
0085:  BCF    0A.4
0086:  GOTO   02B
.................... #int_timer2  
.................... void isr_timer2(void) {  
....................    msc++;  
0087:  INCF   5B,F
0088:  BTFSC  03.2
0089:  INCF   5C,F
....................    if (msc == 100){  
008A:  MOVF   5B,W
008B:  SUBLW  64
008C:  BTFSS  03.2
008D:  GOTO   094
008E:  MOVF   5C,F
008F:  BTFSS  03.2
0090:  GOTO   094
....................       mes_flag = 1;  
0091:  BSF    4D.5
....................       msc=0;  
0092:  CLRF   5C
0093:  CLRF   5B
....................       }  
....................    if ((on != 0)&&(park==0)){mst++;}                 //timer qui est appele toutes les ms par une interruption du timer2  
0094:  MOVF   4A,F
0095:  BTFSC  03.2
0096:  GOTO   09D
0097:  MOVF   4B,F
0098:  BTFSS  03.2
0099:  GOTO   09D
009A:  INCF   59,F
009B:  BTFSC  03.2
009C:  INCF   5A,F
....................    if ((mst >= mse)&&(park==0)){  
009D:  MOVF   58,W
009E:  SUBWF  5A,W
009F:  BTFSS  03.0
00A0:  GOTO   0AD
00A1:  BTFSS  03.2
00A2:  GOTO   0A7
00A3:  MOVF   57,W
00A4:  SUBWF  59,W
00A5:  BTFSS  03.0
00A6:  GOTO   0AD
00A7:  MOVF   4B,F
00A8:  BTFSS  03.2
00A9:  GOTO   0AD
....................       off_flag = 1;  
00AA:  BSF    4D.4
....................       mst=0;  
00AB:  CLRF   5A
00AC:  CLRF   59
....................       }       //on incremente mst si moteur on, qd mst>=mse on positionne flag pour arret  
....................    if ((mst >= msa)&&(park==0)){  
00AD:  MOVF   56,W
00AE:  SUBWF  5A,W
00AF:  BTFSS  03.0
00B0:  GOTO   0BD
00B1:  BTFSS  03.2
00B2:  GOTO   0B7
00B3:  MOVF   55,W
00B4:  SUBWF  59,W
00B5:  BTFSS  03.0
00B6:  GOTO   0BD
00B7:  MOVF   4B,F
00B8:  BTFSS  03.2
00B9:  GOTO   0BD
....................       off_flag = 1;  
00BA:  BSF    4D.4
....................       mst=0;  
00BB:  CLRF   5A
00BC:  CLRF   59
....................       }       //on incremente mst si moteur on, qd mst>=msa on positionne flag pour arret  
.................... }  
....................   
.................... /* programme principal */  
00BD:  BCF    0C.1
00BE:  BCF    0A.3
00BF:  BCF    0A.4
00C0:  GOTO   02B
.................... void main()  
.................... {  
*
052C:  MOVLW  1F
052D:  ANDWF  03,F
052E:  MOVLW  50
052F:  MOVWF  77
0530:  MOVLW  20
0531:  MOVWF  04
0532:  BCF    03.7
0533:  CLRF   00
0534:  INCF   04,F
0535:  CLRWDT
0536:  DECFSZ 77,F
0537:  GOTO   533
0538:  CLRF   71
0539:  CLRF   72
053A:  CLRF   73
053B:  CLRF   74
053C:  CLRF   75
053D:  CLRF   76
053E:  CLRF   78
053F:  CLRF   79
0540:  CLRF   7A
0541:  CLRF   7B
0542:  CLRF   7C
0543:  CLRF   7D
0544:  CLRF   7E
0545:  MOVLW  50
0546:  MOVWF  77
0547:  MOVLW  A0
0548:  MOVWF  04
0549:  BCF    03.7
054A:  CLRF   00
054B:  INCF   04,F
054C:  CLRWDT
054D:  DECFSZ 77,F
054E:  GOTO   54A
054F:  MOVLW  60
0550:  MOVWF  77
0551:  MOVLW  10
0552:  MOVWF  04
0553:  BSF    03.7
0554:  CLRF   00
0555:  INCF   04,F
0556:  CLRWDT
0557:  DECFSZ 77,F
0558:  GOTO   554
0559:  BCF    03.7
055A:  MOVLW  59
055B:  MOVWF  77
055C:  MOVLW  90
055D:  MOVWF  04
055E:  BSF    03.7
055F:  CLRF   00
0560:  INCF   04,F
0561:  CLRWDT
0562:  DECFSZ 77,F
0563:  GOTO   55F
0564:  BCF    03.7
0565:  CLRF   20
0566:  CLRF   04
0567:  BCF    03.7
0568:  MOVLW  1F
0569:  ANDWF  03,F
056A:  BSF    03.5
056B:  BSF    1F.0
056C:  BSF    1F.1
056D:  BSF    1F.2
056E:  BCF    1F.3
056F:  MOVLW  07
0570:  BCF    03.5
0571:  MOVWF  1F
....................    init();  
*
0574:  GOTO   24A
....................    while (1)  
....................    {  
....................       mes_mot();                       //mesure des courants  
0575:  GOTO   3AA
....................       gest_mot();                      //gestion des moteurs  
0576:  GOTO   44A
....................       gest_can();                      //gestion bus can  
0577:  BSF    0A.3
0578:  GOTO   000
0579:  BCF    0A.3
....................    }  
057A:  GOTO   575
.................... }  
....................   
.................... /* definition des fonctions */  
....................   
.................... void gest_mot(){  
....................    if (on==0){  
*
044A:  MOVF   4A,F
044B:  BTFSS  03.2
044C:  GOTO   4F0
*
057B:  GOTO   57B
....................       if ((mot_e_sens==1)&&(but_h==0)){  //elevation montee  
*
044D:  DECFSZ 46,W
044E:  GOTO   46B
044F:  BTFSC  4D.1
0450:  GOTO   46B
....................          mse=mot_e_dure*500;  
0451:  CLRF   5E
0452:  MOVF   47,W
0453:  MOVWF  5D
0454:  MOVLW  01
0455:  MOVWF  60
0456:  MOVLW  F4
0457:  MOVWF  5F
0458:  CALL   435
0459:  MOVF   79,W
045A:  MOVWF  58
045B:  MOVF   78,W
045C:  MOVWF  57
....................          elev_rel_sens_high;  
045D:  BSF    03.5
045E:  BCF    06.5
045F:  BCF    03.5
0460:  BSF    06.5
....................          elev_rel_enable_high;  
0461:  BSF    03.5
0462:  BCF    06.4
0463:  BCF    03.5
0464:  BSF    06.4
....................          delay_ms(100);  
0465:  MOVLW  64
0466:  MOVWF  5E
0467:  CALL   0C1
....................          but_b=0;  
0468:  BCF    4D.0
....................          on=1;  
0469:  MOVLW  01
046A:  MOVWF  4A
....................       }  
....................       if ((mot_e_sens==2)&&(but_b==0)){  //elevation descente  
046B:  MOVF   46,W
046C:  SUBLW  02
046D:  BTFSS  03.2
046E:  GOTO   48B
046F:  BTFSC  4D.0
0470:  GOTO   48B
....................          mse=mot_e_dure*500;  
0471:  CLRF   5E
0472:  MOVF   47,W
0473:  MOVWF  5D
0474:  MOVLW  01
0475:  MOVWF  60
0476:  MOVLW  F4
0477:  MOVWF  5F
0478:  CALL   435
0479:  MOVF   79,W
047A:  MOVWF  58
047B:  MOVF   78,W
047C:  MOVWF  57
....................          elev_rel_sens_low;  
047D:  BSF    03.5
047E:  BCF    06.5
047F:  BCF    03.5
0480:  BCF    06.5
....................          elev_rel_enable_high;  
0481:  BSF    03.5
0482:  BCF    06.4
0483:  BCF    03.5
0484:  BSF    06.4
....................          delay_ms(100);  
0485:  MOVLW  64
0486:  MOVWF  5E
0487:  CALL   0C1
....................          but_h=0;  
0488:  BCF    4D.1
....................          on=2;  
0489:  MOVLW  02
048A:  MOVWF  4A
....................       }  
....................       if ((mot_a_sens==1)&&(but_d==0)){  //azimut sens horaire  
048B:  DECFSZ 48,W
048C:  GOTO   4A9
048D:  BTFSC  4D.2
048E:  GOTO   4A9
....................          msa=mot_a_dure*500;  
048F:  CLRF   5E
0490:  MOVF   49,W
0491:  MOVWF  5D
0492:  MOVLW  01
0493:  MOVWF  60
0494:  MOVLW  F4
0495:  MOVWF  5F
0496:  CALL   435
0497:  MOVF   79,W
0498:  MOVWF  56
0499:  MOVF   78,W
049A:  MOVWF  55
....................          azim_sens_high;  
049B:  BSF    03.5
049C:  BCF    05.2
049D:  BCF    03.5
049E:  BSF    05.2
....................          azim_enable_high;  
049F:  BSF    03.5
04A0:  BCF    05.3
04A1:  BCF    03.5
04A2:  BSF    05.3
....................          delay_ms(100);  
04A3:  MOVLW  64
04A4:  MOVWF  5E
04A5:  CALL   0C1
....................          but_g=0;  
04A6:  BCF    4D.3
....................          on=3;  
04A7:  MOVLW  03
04A8:  MOVWF  4A
....................       }  
....................       if ((mot_a_sens==2)&&(but_g==0)){  //azimut sens anti horaire  
04A9:  MOVF   48,W
04AA:  SUBLW  02
04AB:  BTFSS  03.2
04AC:  GOTO   4C9
04AD:  BTFSC  4D.3
04AE:  GOTO   4C9
....................          msa=mot_a_dure*500;  
04AF:  CLRF   5E
04B0:  MOVF   49,W
04B1:  MOVWF  5D
04B2:  MOVLW  01
04B3:  MOVWF  60
04B4:  MOVLW  F4
04B5:  MOVWF  5F
04B6:  CALL   435
04B7:  MOVF   79,W
04B8:  MOVWF  56
04B9:  MOVF   78,W
04BA:  MOVWF  55
....................          azim_sens_low;  
04BB:  BSF    03.5
04BC:  BCF    05.2
04BD:  BCF    03.5
04BE:  BCF    05.2
....................          azim_enable_high;  
04BF:  BSF    03.5
04C0:  BCF    05.3
04C1:  BCF    03.5
04C2:  BSF    05.3
....................          delay_ms(100);  
04C3:  MOVLW  64
04C4:  MOVWF  5E
04C5:  CALL   0C1
....................          but_d=0;  
04C6:  BCF    4D.2
....................          on=4;  
04C7:  MOVLW  04
04C8:  MOVWF  4A
....................       }  
....................       if (park==1){                      //parking  
04C9:  DECFSZ 4B,W
04CA:  GOTO   4F0
....................          if (but_g==0){  
04CB:  BTFSC  4D.3
04CC:  GOTO   4D8
....................             azim_sens_low;  
04CD:  BSF    03.5
04CE:  BCF    05.2
04CF:  BCF    03.5
04D0:  BCF    05.2
....................             azim_enable_high;  
04D1:  BSF    03.5
04D2:  BCF    05.3
04D3:  BCF    03.5
04D4:  BSF    05.3
....................             on=5;  
04D5:  MOVLW  05
04D6:  MOVWF  4A
....................          }  
....................          else if (but_b==0){  
04D7:  GOTO   4F0
04D8:  BTFSC  4D.0
04D9:  GOTO   4E5
....................             elev_rel_sens_low;  
04DA:  BSF    03.5
04DB:  BCF    06.5
04DC:  BCF    03.5
04DD:  BCF    06.5
....................             elev_rel_enable_high;  
04DE:  BSF    03.5
04DF:  BCF    06.4
04E0:  BCF    03.5
04E1:  BSF    06.4
....................             on=6;  
04E2:  MOVLW  06
04E3:  MOVWF  4A
....................          }  
....................          else if ((but_b==1)&&(but_g==1)){  
04E4:  GOTO   4F0
04E5:  BTFSS  4D.0
04E6:  GOTO   4F0
04E7:  BTFSS  4D.3
04E8:  GOTO   4F0
....................             pos_azim=0;  
04E9:  CLRF   54
04EA:  CLRF   53
....................             pos_elev=0;  
04EB:  CLRF   52
04EC:  CLRF   51
....................             ang_elev=0;  
04ED:  CLRF   4E
....................             ang_azim=0;  
04EE:  CLRF   4F
....................             park=0;  
04EF:  CLRF   4B
....................          }  
....................       }  
....................    }  
....................    if (on != 0){  
04F0:  MOVF   4A,F
04F1:  BTFSC  03.2
04F2:  GOTO   505
....................       if ((off_flag == 1)||(mot_off==1)){ //on arrete les moteurs ? 
04F3:  BTFSC  4D.4
04F4:  GOTO   4F7
04F5:  DECFSZ 4C,W
04F6:  GOTO   505
....................          azim_enable_low;  
04F7:  BSF    03.5
04F8:  BCF    05.3
04F9:  BCF    03.5
04FA:  BCF    05.3
....................          elev_rel_enable_low;  
04FB:  BSF    03.5
04FC:  BCF    06.4
04FD:  BCF    03.5
04FE:  BCF    06.4
....................          mot_e_sens=0;                    //on annule les ordres de mise en marche  
04FF:  CLRF   46
....................          mot_a_sens=0;  
0500:  CLRF   48
....................          mst=0;  
0501:  CLRF   5A
0502:  CLRF   59
....................          on=0;                            //pas de deplacement  
0503:  CLRF   4A
....................          off_flag=0;  
0504:  BCF    4D.4
....................       }  
....................    }  
....................    butee=but_h+(but_b*2)+(but_g*4)+(but_d*8);         //calcul de l'indicateur butee  
0505:  MOVLW  00
0506:  BTFSC  4D.1
0507:  MOVLW  01
0508:  MOVWF  5D
0509:  MOVLW  00
050A:  BTFSC  4D.0
050B:  MOVLW  01
050C:  MOVWF  77
050D:  BCF    03.0
050E:  RLF    77,F
050F:  MOVF   77,W
0510:  ADDWF  5D,W
0511:  MOVWF  5F
0512:  MOVLW  00
0513:  BTFSC  4D.3
0514:  MOVLW  01
0515:  MOVWF  77
0516:  RLF    77,F
0517:  RLF    77,F
0518:  MOVLW  FC
0519:  ANDWF  77,F
051A:  MOVF   77,W
051B:  ADDWF  5F,W
051C:  MOVWF  61
051D:  MOVLW  00
051E:  BTFSC  4D.2
051F:  MOVLW  01
0520:  MOVWF  77
0521:  RLF    77,F
0522:  RLF    77,F
0523:  RLF    77,F
0524:  MOVLW  F8
0525:  ANDWF  77,F
0526:  MOVF   77,W
0527:  ADDWF  61,W
0528:  MOVWF  50
.................... }  
0529:  BCF    0A.3
052A:  BCF    0A.4
052B:  GOTO   577 (RETURN)
....................   
....................   
.................... void gest_can(){  
....................    if ( can_kbhit() ){   //y a t il des donnees dans le buffer ?..  
*
0812:  MOVF   78,F
0813:  BTFSC  03.2
0814:  GOTO   33E
....................       if(can_getd(crx_id, &crxbuf[0], crx_len, rxstat)){ //...si oui lecture des donnees  
0815:  CLRF   5E
0816:  MOVLW  2C
0817:  MOVWF  5D
*
0A30:  MOVF   78,F
0A31:  BTFSC  03.2
0A32:  GOTO   33E
....................          if (crx_id == i_m_m) {  
0A33:  MOVF   28,F
0A34:  BTFSS  03.2
0A35:  GOTO   320
0A36:  MOVF   29,W
0A37:  SUBLW  04
0A38:  BTFSS  03.2
0A39:  GOTO   320
0A3A:  MOVF   2A,F
0A3B:  BTFSS  03.2
0A3C:  GOTO   320
0A3D:  MOVF   2B,F
0A3E:  BTFSS  03.2
0A3F:  GOTO   320
....................             led_on;                                      //change la LED system  
0A40:  BSF    03.5
0A41:  BCF    06.1
0A42:  BCF    03.5
0A43:  BSF    06.1
....................             ctxbuf[0]=mo_ie;  
0A44:  MOVF   40,W
0A45:  MOVWF  34
....................             ctxbuf[1]=mo_ia;  
0A46:  MOVF   42,W
0A47:  MOVWF  35
....................             ctxbuf[2]=mo_ovle;  
0A48:  MOVF   44,W
0A49:  MOVWF  36
....................             ctxbuf[3]=mo_ovla;  
0A4A:  MOVF   45,W
0A4B:  MOVWF  37
....................             ctxbuf[4]=on;  
0A4C:  MOVF   4A,W
0A4D:  MOVWF  38
....................             ctxbuf[5]=ang_azim;  
0A4E:  MOVF   4F,W
0A4F:  MOVWF  39
....................             ctxbuf[6]=ang_elev;  
0A50:  MOVF   4E,W
0A51:  MOVWF  3A
....................             ctxbuf[7]=butee;  
0A52:  MOVF   50,W
0A53:  MOVWF  3B
....................             can_putd(i_mo,&ctxbuf[0],8,1,1,0);           //reponse avec 5 octets de buffer  
0A54:  CLRF   60
0A55:  CLRF   5F
0A56:  MOVLW  04
0A57:  MOVWF  5E
0A58:  MOVLW  01
0A59:  MOVWF  5D
0A5A:  CLRF   62
0A5B:  MOVLW  34
0A5C:  MOVWF  61
0A5D:  MOVLW  08
0A5E:  MOVWF  63
0A5F:  MOVLW  01
0A60:  MOVWF  64
0A61:  MOVWF  65
0A62:  CLRF   66
....................             mo_ovle=0;                                   //raz indicateur de surcharge apres envoi  
*
0B1E:  CLRF   44
....................             mo_ovla=0;                                   //raz indicateur de surcharge apres envoi  
0B1F:  CLRF   45
....................          }  
....................          if (crx_id == i_m_c) {  
0B20:  MOVF   28,W
0B21:  SUBLW  02
0B22:  BTFSS  03.2
0B23:  GOTO   33E
0B24:  MOVF   29,W
0B25:  SUBLW  04
0B26:  BTFSS  03.2
0B27:  GOTO   33E
0B28:  MOVF   2A,F
0B29:  BTFSS  03.2
0B2A:  GOTO   33E
0B2B:  MOVF   2B,F
0B2C:  BTFSS  03.2
0B2D:  GOTO   33E
....................             led_on;                                      //change la LED system  
0B2E:  BSF    03.5
0B2F:  BCF    06.1
0B30:  BCF    03.5
0B31:  BSF    06.1
....................             mot_a_sens=crxbuf[0];                        //sens moteur elevation  
0B32:  MOVF   2C,W
0B33:  MOVWF  48
....................             mot_a_dure=crxbuf[1];                        //duree moteur elevation  
0B34:  MOVF   2D,W
0B35:  MOVWF  49
....................             mot_e_sens=crxbuf[2];                        //sens moteur azimut  
0B36:  MOVF   2E,W
0B37:  MOVWF  46
....................             mot_e_dure=crxbuf[3];                        //duree moteur azimut  
0B38:  MOVF   2F,W
0B39:  MOVWF  47
....................             mot_off=crxbuf[4];  
0B3A:  MOVF   30,W
0B3B:  MOVWF  4C
....................             park=crxbuf[5];  
0B3C:  MOVF   31,W
0B3D:  MOVWF  4B
....................          }  
....................       }  
....................    }  
....................    led_off;  
0B3E:  BSF    03.5
0B3F:  BCF    06.1
0B40:  BCF    03.5
0B41:  BCF    06.1
.................... }  
0B42:  BCF    0A.3
0B43:  BCF    0A.4
0B44:  GOTO   579 (RETURN)
....................   
.................... void mes_mot(){  
....................    int16 a;  
....................   
....................    if (mes_flag==1){  
*
03AA:  BTFSS  4D.5
03AB:  GOTO   432
....................       ang_azim=pos_azim/77;  
03AC:  MOVF   54,W
03AD:  MOVWF  60
03AE:  MOVF   53,W
03AF:  MOVWF  5F
03B0:  CLRF   62
03B1:  MOVLW  4D
03B2:  MOVWF  61
03B3:  CALL   384
03B4:  MOVF   78,W
03B5:  MOVWF  4F
....................       ang_elev=pos_elev/166;  
03B6:  MOVF   52,W
03B7:  MOVWF  60
03B8:  MOVF   51,W
03B9:  MOVWF  5F
03BA:  CLRF   62
03BB:  MOVLW  A6
03BC:  MOVWF  61
03BD:  CALL   384
03BE:  MOVF   78,W
03BF:  MOVWF  4E
....................       if (pos_azim > 19635){  
03C0:  MOVF   54,W
03C1:  SUBLW  4B
03C2:  BTFSC  03.0
03C3:  GOTO   3CD
03C4:  XORLW  FF
03C5:  BTFSS  03.2
03C6:  GOTO   3CB
03C7:  MOVF   53,W
03C8:  SUBLW  B3
03C9:  BTFSC  03.0
03CA:  GOTO   3CD
....................          ang_elev = ang_elev + 100;  
03CB:  MOVLW  64
03CC:  ADDWF  4E,F
....................       }  
....................   
....................       set_adc_channel(1);  
03CD:  MOVLW  08
03CE:  MOVWF  78
03CF:  MOVF   1F,W
03D0:  ANDLW  C7
03D1:  IORWF  78,W
03D2:  MOVWF  1F
....................       delay_us(10);  
03D3:  NOP
03D4:  NOP
03D5:  NOP
03D6:  NOP
03D7:  NOP
03D8:  NOP
....................       a=read_adc();  
03D9:  BSF    1F.2
03DA:  BTFSC  1F.2
03DB:  GOTO   3DA
03DC:  MOVF   1E,W
03DD:  CLRF   5E
03DE:  MOVWF  5D
....................       mo_ie = a/1;  
03DF:  MOVF   5E,W
03E0:  MOVWF  41
03E1:  MOVF   5D,W
03E2:  MOVWF  40
....................       if (a>200){  
03E3:  MOVF   5E,F
03E4:  BTFSS  03.2
03E5:  GOTO   3EA
03E6:  MOVF   5D,W
03E7:  SUBLW  C8
03E8:  BTFSC  03.0
03E9:  GOTO   3F0
....................          off_flag=1;                   //arret si surcharge  
03EA:  BSF    4D.4
....................          mo_ovle=1;  
03EB:  MOVLW  01
03EC:  MOVWF  44
....................          if(on==1){but_h=1;}           //si montee alors butee haute  
03ED:  DECFSZ 4A,W
03EE:  GOTO   3F0
03EF:  BSF    4D.1
....................       }  
....................       if ((a<45)&&((on==2)||(on==6))){  
03F0:  MOVF   5E,F
03F1:  BTFSS  03.2
03F2:  GOTO   401
03F3:  MOVF   5D,W
03F4:  SUBLW  2C
03F5:  BTFSS  03.0
03F6:  GOTO   401
03F7:  MOVF   4A,W
03F8:  SUBLW  02
03F9:  BTFSC  03.2
03FA:  GOTO   3FF
03FB:  MOVF   4A,W
03FC:  SUBLW  06
03FD:  BTFSS  03.2
03FE:  GOTO   401
....................          but_b=1;                      //alors butee basse  
03FF:  BSF    4D.0
....................          off_flag=1;                   //si descente et plus de courant  
0400:  BSF    4D.4
....................       }  
....................       set_adc_channel(0);  
0401:  MOVLW  00
0402:  MOVWF  78
0403:  MOVF   1F,W
0404:  ANDLW  C7
0405:  IORWF  78,W
0406:  MOVWF  1F
....................       delay_us(10);  
0407:  NOP
0408:  NOP
0409:  NOP
040A:  NOP
040B:  NOP
040C:  NOP
....................       a=read_adc();  
040D:  BSF    1F.2
040E:  BTFSC  1F.2
040F:  GOTO   40E
0410:  MOVF   1E,W
0411:  CLRF   5E
0412:  MOVWF  5D
....................       mo_ia = a/1;  
0413:  MOVF   5E,W
0414:  MOVWF  43
0415:  MOVF   5D,W
0416:  MOVWF  42
....................       if (a>120){  
0417:  MOVF   5E,F
0418:  BTFSS  03.2
0419:  GOTO   41E
041A:  MOVF   5D,W
041B:  SUBLW  78
041C:  BTFSC  03.0
041D:  GOTO   431
....................          off_flag=1;                   //arret si surcharge  
041E:  BSF    4D.4
....................          mo_ovla=1;  
041F:  MOVLW  01
0420:  MOVWF  45
....................          if((on==3)||(on==5)){  
0421:  MOVF   4A,W
0422:  SUBLW  03
0423:  BTFSC  03.2
0424:  GOTO   429
0425:  MOVF   4A,W
0426:  SUBLW  05
0427:  BTFSS  03.2
0428:  GOTO   42B
....................             but_g=1;  
0429:  BSF    4D.3
....................             but_d=0;  
042A:  BCF    4D.2
....................          }                             //si gauche alors butee gauche  
....................          if(on==4){  
042B:  MOVF   4A,W
042C:  SUBLW  04
042D:  BTFSS  03.2
042E:  GOTO   431
....................             but_d=1;  
042F:  BSF    4D.2
....................             but_g=0;  
0430:  BCF    4D.3
....................          }                             //si droite alors butee droite  
....................       }  
....................       mes_flag=0;  
0431:  BCF    4D.5
....................    }  
.................... }  
0432:  BCF    0A.3
0433:  BCF    0A.4
0434:  GOTO   576 (RETURN)
....................   
.................... void init(){  
....................    can_init();  
....................    elev_sens_low;  
*
0328:  BSF    03.5
0329:  BCF    05.4
032A:  BCF    03.5
032B:  BCF    05.4
....................    elev_enable_high;  
032C:  BSF    03.5
032D:  BCF    05.5
032E:  BCF    03.5
032F:  BSF    05.5
....................    elev_rel_enable_low;  
0330:  BSF    03.5
0331:  BCF    06.4
0332:  BCF    03.5
0333:  BCF    06.4
....................    azim_enable_low;  
0334:  BSF    03.5
0335:  BCF    05.3
0336:  BCF    03.5
0337:  BCF    05.3
....................    mst=0;  
0338:  CLRF   5A
0339:  CLRF   59
....................    msc=0;  
033A:  CLRF   5C
033B:  CLRF   5B
....................    on=0;  
033C:  CLRF   4A
....................    park=0;  
033D:  CLRF   4B
....................    mo_ovle=0;  
033E:  CLRF   44
....................    mo_ovla=0;  
033F:  CLRF   45
....................    but_b=0;  
0340:  BCF    4D.0
....................    but_h=0;  
0341:  BCF    4D.1
....................    but_g=0;  
0342:  BCF    4D.3
....................    but_d=0;  
0343:  BCF    4D.2
....................    off_flag=0;  
0344:  BCF    4D.4
....................    mot_e_sens=0;                 //on annule les ordres de mise en marche  
0345:  CLRF   46
....................    mot_a_sens=0;  
0346:  CLRF   48
....................    mst=0;  
0347:  CLRF   5A
0348:  CLRF   59
....................    mse=500;  
0349:  MOVLW  01
034A:  MOVWF  58
034B:  MOVLW  F4
034C:  MOVWF  57
....................    msa=500;  
034D:  MOVLW  01
034E:  MOVWF  56
034F:  MOVLW  F4
0350:  MOVWF  55
....................    setup_adc_ports(RA0_RA1_RA3_ANALOG);  
0351:  BSF    03.5
0352:  BCF    1F.0
0353:  BCF    1F.1
0354:  BSF    1F.2
0355:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL);  
0356:  BCF    1F.6
0357:  BCF    03.5
0358:  BSF    1F.6
0359:  BSF    1F.7
035A:  BSF    03.5
035B:  BCF    1F.7
035C:  BCF    03.5
035D:  BSF    1F.0
....................    setup_ccp1(CCP_CAPTURE_RE);    // Configure CCP1 to capture rise  
035E:  BSF    3F.2
035F:  MOVF   3F,W
0360:  BSF    03.5
0361:  MOVWF  07
0362:  BCF    03.5
0363:  CLRF   17
0364:  MOVLW  05
0365:  MOVWF  17
....................    setup_ccp2(CCP_CAPTURE_RE);    // Configure CCP2 to capture fall  
0366:  BSF    3F.1
0367:  MOVF   3F,W
0368:  BSF    03.5
0369:  MOVWF  07
036A:  BCF    03.5
036B:  CLRF   1D
036C:  MOVLW  05
036D:  MOVWF  1D
....................    enable_interrupts(INT_CCP2);   // Setup interrupt on falling edge  
036E:  BSF    03.5
036F:  BSF    0D.0
....................    enable_interrupts(INT_CCP1);   // Setup interrupt on falling edge  
0370:  BSF    0C.2
....................    setup_timer_2(T2_DIV_BY_16,8,5);    // parametrage du timer 2  
0371:  MOVLW  20
0372:  MOVWF  78
0373:  IORLW  06
0374:  BCF    03.5
0375:  MOVWF  12
0376:  MOVLW  08
0377:  BSF    03.5
0378:  MOVWF  12
....................    setup_timer_1(T1_INTERNAL);    // Start timer 1  
0379:  MOVLW  85
037A:  BCF    03.5
037B:  MOVWF  10
....................    enable_interrupts(INT_TIMER2);      // autorisation interruption timer2  
037C:  BSF    03.5
037D:  BSF    0C.1
....................    enable_interrupts(GLOBAL);          // autorisation de toutes les interruptions (afin de prendre en compte timer2)  
037E:  MOVLW  C0
037F:  BCF    03.5
0380:  IORWF  0B,F
.................... }  
0381:  BCF    0A.3
0382:  BCF    0A.4
0383:  GOTO   575 (RETURN)
....................  

Configuration Fuses:
   Word  1: 3731   XT NOWDT PUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
